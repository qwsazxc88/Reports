@model Reports.Presenters.UI.ViewModel.EditMissionPbDocumentModel
@{
    Layout = "~/Views/Shared/_LayoutMissionOrder.cshtml";
    ViewBag.Title = "Редактирование книги покупок";
}
@using (Html.BeginForm())
{
    <div class="doc-wrap">
        <table style="width:100%"> 
            <tr>
                <td colspan="2">
                    @Html.ValidationSummary(false)
                    <div id="Error" style="color:Red;display:none;"></div>
                </td>
            </tr
            <tr>
                <td style="width:115px">
                    @Html.LabelFor(m => m.Number):
                    <input type="hidden" id="Id" name="Id" value="@Model.Id" />
                    <input type="hidden" id="UserId" name="UserId" value="@Model.UserId" />
                    <input type="hidden" id="Version" name="Version" value="@Model.Version" />
                    <input type="hidden" id="IsEditable" name="IsEditable" value="@Model.IsEditable" />
                </td>
                <td>
                    @Html.TextBoxFor(model => model.Number, Model.IsEditable ? null : (object)new { @readonly = "readonly" }) 
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(m => m.DocumentDate):
                </td>
                <td>
                    @if (Model.IsEditable)
                    {
                        @Html.EditorFor(model => model.DocumentDate)
                    }
                    else
                    {
                        @Html.DisplayFor(model => model.DocumentDate)
                        @Html.HiddenFor(model => model.DocumentDate)
                    } 
                 </td>
            </tr>
             <tr>
                <td>
                    @Html.LabelFor(m => m.ContractorId):
                </td>
                <td>
                    @Html.DropDownListFor(model => model.ContractorId, new SelectList(Model.Contractors, "ID", "Name"), Model.IsEditable ? (object)new { onchange = "ContractorChange();" } : (object)new { disabled = "disabled" }) 
                    <input type="hidden" id="ContractorIdHidden" name="ContractorIdHidden" value="@Model.ContractorIdHidden" />
                    &nbsp;@Html.TextBoxFor(model => model.ContractorAccount,new { disabled = "disabled"  })
                </td>
            </tr>
            <tr>
                <td colspan="2">
                    <input type="submit" value="Записать" name="SaveBtn" id="SaveBtn" onclick="return Validate();" 
                    @if(!Model.IsEditable){<text>style="display:none"</text> } />
                </td>
            </tr>
            <tr>
                <td colspan="2">
                    <hr />
                </td>
            </tr>
            <tr>
                <td colspan="2">
                    <input type="button" value="Добавить" name="AddRecordBtn" id="AddRecordBtn" onclick="addRecord()" 
                    @if (!Model.IsEditable || Model.Id == 0) {<text>style="display:none"</text> } />
                </td>
            </tr>
            <tr>
            <td colspan="2">
                <div id="RecordsModelContext">@Html.Partial("MissionPdRecordPartial", Model.RecordsModel)</div>
            </td>
        </tr>
        </table>
    </div>
     <script type="text/javascript">
       var  actionGetContractorAccountUrl = "@Url.Action("GetContractorAccount", "MissionOrder")";
       var  actionEditRecordDialogUrl = "@Url.Action("EditRecordDialog", "MissionOrder")";
       var  actionGetCostTypesUrl = "@Url.Action("GetCostTypes", "MissionOrder")";
       var  actionGetRequestNumberForCostTypeUrl = "@Url.Action("GetRequestNumberForCostType", "MissionOrder")";
       var  actionGetReportsUrl = "@Url.Action("GetReports", "MissionOrder")";
        $(document).ready(function () {
            setActiveMenuItem("moAllPurchaseBookDoc");
            $("#DocumentDate").datepicker();
            $(".hasDatepicker").width("75px");
        });
        function RenderRecords() {
            var actionUrl="@Url.Action("RenderRecords", "MissionOrder")";
            var documentId = $("#DocumentId").val();
            var url = actionUrl + "?id=" + documentId+"&dummy=" + new Date().getTime();
            $("#RecordsModelContext").load(url);
        }
        function Validate()
        {
            return true;
        }
        function addRecord()
        {
            createRecordDialog(actionEditRecordDialogUrl,"id=0&documentId="+$("#Id").val());
        }
        function editRecord(id)
        {
            createRecordDialog(actionEditRecordDialogUrl,"id="+id+"&documentId="+$("#Id").val());
            return false;
        }
        function deleteRecord(id)
        {
          DeleteRecord(id);
          return false;
        }
        function disableSaveButton() {
            $(".ui-dialog-buttonpane button:contains('Сохранить')").button("disable");
        }
        function createRecordDialog(url,params) {
            var elem = document.createElement('div');
            elem.id = "divRecordDialog";
            var newDiv = $(elem);
            var title = "Редактирование записи книги покупок";
            $(newDiv).text('Подождите, идет загрузка данных ...');
            $(newDiv).load(url + "?"+ params+ " #recordDialogTable"
             , function (response, status, xhr) {
                 if (status == "error") {
                     var msg = "Произошла ошибка: ";
                     $(newDiv).html("<div style='color:Red'>" + msg + xhr.status + " " + xhr.statusText + "</div>");
                      disableSaveButton();
                 } else if (status == "success") {
                     if ($('#DialogTableLoadError').val() != undefined)
                         disableSaveButton();
                     else
                     {
                        if($("#RecordId").val() != 0)
                            validateSums();
                     }
                 }
             }
            );
            $(newDiv).dialog(
            {
                // initialize dialog box
                autoOpen: true,
                modal: true,
                title: title,
                width: 1160,
                height: 380,
                // fix IE6  
                bgiframe: true,
                close: function (event, ui) {
                    $(this).dialog("destroy").remove();
                },
                buttons:
                {
                    "Сохранить": function () {
                        if(!validateRecord())
                            return;
                        SaveRecord();
                        //RenderRecords();
                        //$(this).dialog("close");
                       
                        //setTargetBtnState();
                    },
                    "Отмена": function () {
                        $(this).dialog("close");
                    }
                }
            });
        }
        function DeleteRecord(id)
        {
        var url="@Url.Action("DeletePbRecord", "MissionOrder")";
            /*+"?id="+ $("#RequestId").val() + "&typeId="+ $("#RequestTypeId").val()
                +"&comment="+escapeJson($("#Comment").val());*/
            var jqxhr = $.ajax({
                type: "POST",
                datatype: "json",
                url: url,
                data: {
                    'Id': id
                },
                success:function (jsonResult) {
                                            if (!this.JSON) {
                                                    this.JSON = {};
                                            }
                                            if(jsonResult == "")
                                            {
                                                addError("Ошибка асинхронного запроса - не был получен ответ.");
                                                return;
                                            }
                                            var result = JSON.parse(jsonResult);  
                                            if(result.Error != '')
                                            {
                                                addError(result.Error);
                                                RenderRecords();
                                                //Render();
                                            }
                                            else
                                            {
                                                clearErrors();
                                                RenderRecords();
                                            }    
                                  }});
        }
        function SaveRecord()
        {
            var sum = $("#Sum").val();
            var sumNds = $("#SumNds").val();
            var allSum = $("#AllSum").val();
            var url="@Url.Action("SavePbRecord", "MissionOrder")";
            /*+"?id="+ $("#RequestId").val() + "&typeId="+ $("#RequestTypeId").val()
                +"&comment="+escapeJson($("#Comment").val());*/
            var jqxhr = $.ajax({
                type: "POST",
                datatype: "json",
                url: url,
                data: {
                    'DocumentId': $("#DocumentId").val(),
                    'RecordId': $("#RecordId").val(),
                    'UserId': $("#RecordUserId").val(),
                    'ReportId': $("#ReportId").val(),
                    'CostTypeId': $("#CostTypeId").val(),
                    'Sum':sum.toString(),
                    'SumNds':sumNds.toString(),
                    'AllSum':allSum.toString(),
                    'RequestNumber': $("#RequestNumber").val()
                },
                success:function (jsonResult) {
                                            if (!this.JSON) {
                                                    this.JSON = {};
                                            }
                                            if(jsonResult == "")
                                            {
                                                addRecordDlgError("Ошибка асинхронного запроса - не был получен ответ.");
                                                return;
                                            }
                                            var result = JSON.parse(jsonResult);  
                                            if(result.Error != '')
                                            {
                                                addRecordDlgError(result.Error);
                                                //Render();
                                            }
                                            else
                                            {
                                                clearDlgErrors($("#recordDialogTable"));
                                                RenderRecords();
                                                $("#divRecordDialog").dialog("close");
                                            }    
                                  }});
        }
        function validateRecord()
        {
            clearDlgErrors($("#recordDialogTable"));
            var res = true;
              if(!validateFieldIsNotNull($("#RecordUserId")))
                res = false;
            if(!validateFieldIsNotNull($("#ReportId")))
                res = false;
            if(!validateFieldIsNotNull($("#CostTypeId")))
                res = false;
            if(!validateSums())
                res = false;
            return res;
        }
        function validateSum()
        {
            clearDlgErrors($("#recordDialogTable"));
            validateSums();
        }
        function validateSums()
        {
            var result = true;
            var sum = undefined;
            var sumNds = undefined;
            if(!validateFieldIsNotEmptyAddError($("#Sum")))
                result =  false;
            else
            { 
                sum = ValidateSumC($("#Sum")); 
                if(sum == undefined)
                    result = false;
            }
            if(!validateFieldIsNotEmptyAddError($("#SumNds")))
                result =  false;
            else
            {
                sumNds = ValidateSumC($("#SumNds"));
                if(sumNds == undefined)
                    result = false;
            }
            if(sum != undefined && sumNds != undefined)
                $("#AllSum").val(FormatFloat(sum+sumNds));
            else
                $("#AllSum").val('');
            //result =  false;
            return result;
        }
        function addRecordDlgError(value) {
            $("#EditRecordDlgError").text(value);
            $("#EditRecordDlgError").show();
        }
        function clearRecordDlgError() {
            $("#EditRecordDlgError").text("");
            $("#EditRecordDlgError").hide();
        }
        function RecordUserIdChange()
        {
            GetReports();
        }
        function GetReports() {
            clearRecordDlgError();
            var url = actionGetReportsUrl + '?userId='+ $("#RecordUserId").val();
            $.getJSON(url,
                function (result) {
                    if (result.Error != "") {
                        addRecordDlgError(result.Error);
                    }
                    else {
                        setValuesToDropdown("ReportId", result.Children);
                        ReportIdChange();
                    }
            });
        }
        function CostTypeIdChange()
        {
            if( $("#RecordId").val() == 0)
            {
                GetRequestNumberForCostType();
            }
        }
         function GetRequestNumberForCostType() {
            clearRecordDlgError();
            var url = actionGetRequestNumberForCostTypeUrl + '?reportId='+ $("#ReportId").val()+"&costTypeId="+$("#CostTypeId").val();
            $.getJSON(url,
                function (result) {
                    if (result.Error != "") {
                        addRecordDlgError(result.Error);
                    }
                    else {
                            $("#RequestNumber").val(result.Account);
                    }
            });
        }
        function ReportIdChange()
        {
            GetCostTypes();
        }
        function GetCostTypes() {
            clearRecordDlgError();
            var url = actionGetCostTypesUrl + '?reportId='+ $("#ReportId").val()+"&isNew=" + ($("#RecordId").val() > 0?"false":"true");
            $.getJSON(url,
                function (result) {
                    if (result.Error != "") {
                        addRecordDlgError(result.Error);
                    }
                    else {
                        setValuesToDropdown("CostTypeId", result.Children);
                        if($("#RecordId").val() == 0)
                            $("#RequestNumber").val(result.RequestNumber);
                    }
            });
        }
        function setValuesToDropdown(controlName,data)
        {
            var optionsValues = '<select onchange = "' + controlName + 'Change();" id="' + controlName + '" name="' + controlName + '">';
            //optionsValues += '<option value="0"></option>';
            $.each(data, function (item, data) {
                optionsValues += '<option value="' + data.Id + '">' + data.Name + '</option>';
            })
            optionsValues += '</select>';
            var options = $('#' + controlName );
            options.replaceWith(optionsValues);
        }
        function ContractorChange()
        {
            GetContractorAccount();
        }
        function GetContractorAccount() {
            clearErrors();
            var id =  $("#ContractorId").val();
            var url = actionGetContractorAccountUrl + '?id=' + id;
            $.getJSON(url,
        function (result) {
            if (result.Error != "") {
                addError(result.Error);
            }
            else {
                $("#ContractorAccount").val(result.Account);
            }
        });

        }
     </script>
}
       
   
