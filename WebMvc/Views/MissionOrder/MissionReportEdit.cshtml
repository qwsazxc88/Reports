@model Reports.Presenters.UI.ViewModel.MissionReportEditModel
@using Reports.Presenters.Services.Impl
@using Reports.Core
@{
    var dto = UserDto.Deserialize(((FormsIdentity)(HttpContext.Current.User.Identity)).Ticket.UserData);
    Layout = "~/Views/Shared/_LayoutMissionOrder.cshtml";
    ViewBag.Title = "Редактирование авансового отчета";
}
<div style="visibility:hidden">
<div id="SurchargeDialog" title="Создать доплату" >
 @if (Model.DeductionDocNumber == 0)
 {
 <p>Введите номер удержания</p>
 <input type="text" id="deductionNumber" />
 }
 else
 {
  <input type="hidden" id="deductionNumber" value='@Model.DeductionDocNumber' />   
 }
 <p>Введите сумму доплаты</p>
 <input type="text" id="SurchargeSum" />
 <input type="button" value="Создать" onclick="AddSurcharge();" />
</div>
<div id="StornoDialog" title="Ручное удержание" > 
     <div>
     <p>Введите сумму:</p>
     <input type="text" id="StornoSum" />
     </div>
     <br />
     <div>
     <p>Номер удержания:</p>
     <input type="text" id="StornoDeductionNumber" />
     </div>
     <br />
     <div>
     <p>Причина :</p>
     <input type="text" id="StornoComment" />   
     </div>
     <hr />
     <input type="button" id='AddStornoBtn' value="Создать" onclick="AddStorno();" />
</div>
</div>
@using (Html.BeginForm("MissionReportEdit", "MissionOrder", FormMethod.Post, new { onkeydown = "return event.keyCode!=13" }))
{
    <div class="doc-wrap">
    <table style="width:100%">
    <tr>
            <td colspan="2" style="font-weight:bold;text-align:center">
                @Model.DocumentTitle
             </td>
        </tr>
        <tr>
            <td colspan="2">
                @Html.ValidationSummary(false)
                <div id="Error" style="color:Red;display:none;"></div>
                @*<div id="Success" style="color:Green;display:none;">Письмо успешно отправлено в биллинг.</div>*@
            </td>
        </tr>
        <tr>
            <td colspan="2">
                @{
                    ViewBag.HidePersonnel = true;
                    ViewBag.ShowManagers = true;                  
                }
                @Html.Partial("../UserInfoView", Model)
            </td>
        </tr>
        @if (Model.IsDeleted)
        { 
            <tr>
                <td colspan="2" style="color:Red">Отчет отклонен</td>
            </tr>
        }
        <tr>
            <td style="width:18%">
                @Html.LabelFor(m => m.OrderDates):
            </td>
             <td>
                @Model.OrderDates
                <input type="hidden" id="OrderDates" name="OrderDates" value="@Model.OrderDates" />
            </td>
        </tr>
        @if (!string.IsNullOrEmpty(@Model.AdditionalOrderDates))
        {
            <tr>
                <td>
                    @Html.LabelFor(m => m.AdditionalOrderDates):
                </td>
                 <td>
                    @Model.AdditionalOrderDates
                    <input type="hidden" id="AdditionalOrderDates" name="AdditionalOrderDates" value="@Model.OrderDates" />
                </td>
            </tr>
        }
        <tr>
            <td colspan="2">
                <input type="hidden" id="IsCreateAdditionalOrderAvailable" name="IsCreateAdditionalOrderAvailable" value="@Model.IsCreateAdditionalOrderAvailable" />
                @if (Model.IsCreateAdditionalOrderAvailable)
                {
                    <div style="float:right;">
                        <button type="button" onclick="window.location.href='@Url.Action("CreateAdditionalOrder", "MissionOrder", new { id = Model.Id })';">
                            Создать изменение приказа на командировки<br />
                            (Только  для  изменения  по  факту  дат и маршрута)
                        </button>
                        <p>Изменение приказа на командировку<br />при несовпадении фактических дат<br />командировки с датами из приказа</p>
                    </div>                    
                }
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <input type="hidden" id="Id" name="Id" value="@Model.Id" />
                <input type="hidden" id="IsDeleted" name="IsDeleted" value="@Model.IsDeleted" />
                <input type="hidden" id="UserId" name="UserId" value="@Model.UserId" />
                <input type="hidden" id="Version" name="Version" value="@Model.Version" />
                <input type="button" value="Добавить расход" name="AddCostBtn" id="AddCostBtn" class="costBtn" onclick="addCost();" 
                @if(!Model.IsEditable){<text>style="display:none"</text> } />
            </td>
        </tr>
        <tr>
            <td colspan="2">
               <input type="hidden" id="Costs" name="Costs" value="@Model.Costs" />
                <div id="costsTable"></div>
                <br/>
            </td>
        </tr>
        @if (Model.StornoAddedDate.HasValue)
        {
            <tr style="color:Red"><td>Ручное удержание:</td>
            <td>
            @Html.HiddenFor(m=>m.StornoAddedDate)
            @Html.HiddenFor(m=>m.StornoSum)
            @Html.HiddenFor(m=>m.StornoAddedBy)
            @Html.HiddenFor(m=>m.StornoComment)
            @Model.StornoSum &nbsp;@Model.StornoAddedDate &nbsp;@Model.StornoAddedBy &nbsp;@Model.StornoComment
            </td>
            </tr>
        }
        @if (Model.ManualDeductions != null)
        {
        <tr>
        <td>
        Удержано (Авто)
        </td>
        <td>
        <table>
        
        <tr>
        <th>Сумма</th>
        <th>Дата</th>
        </tr>
        
        <tbody>
        
            @foreach (var el in Model.ManualDeductions)
            {
                <tr>
                <td>@el.AllSum</td>
                <td>@el.SendTo1C</td>
                </tr>
            }
        
        </tbody>
        </table>
        </td>
        </tr>
        }
        <tr>
            <td style="vertical-align:top">
                @Html.LabelFor(m => m.Hotels):
            </td>
             <td>
               @Html.TextBoxFor(model => model.Hotels, Model.IsEditable ? (object)new { maxlength = 1024, style = "width:400px" } : (object)new { @readonly = "read-only",maxlength = 1024, style = "width:400px" }) 
            </td>
        </tr>
        <tr>
            <td>
            </td>
            <td>
                (если оплачено организацией за сотрудника - указать название гостиницы, если самостоятельно - указать "нет")
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <hr/>
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <div id="AttachmentModelContext">@Html.Partial("RequestAttachmentsPartial", Model.AttachmentsModel)</div>
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <hr/>
            </td>
        </tr>        
        <tr>
            <td>@Model.UserFio</td>
            <td>
                <input type="hidden" id="IsEditable" name="IsEditable" value="@Model.IsEditable" />
                <input type="hidden" id="IsUserApprovedAvailable" name="IsUserApprovedAvailable" value="@Model.IsUserApprovedAvailable" />
                @Html.CheckBox("IsUserApproved", Model.IsUserApproved, Model.IsUserApprovedAvailable ? null : (object)new { disabled = "disabled" }) 
              @*  @Html.LabelFor(model => model.IsUserApproved)*@
                @if (!Model.IsUserApprovedAvailable)
                {
                    <input type="hidden" id="IsUserApprovedHidden" name="IsUserApprovedHidden" value="@Model.IsUserApprovedHidden" />
                }
            </td>
        </tr>
        <tr>
            <td>Руководитель</td>
            <td>
                <div  style="float:left">
                <input type="hidden" id="IsManagerApproveAvailable" name="IsManagerApproveAvailable" value="@Model.IsManagerApproveAvailable" />
                @Html.CheckBox("IsManagerApproved", Model.IsManagerApproved, Model.IsManagerApproveAvailable ? null : (object)new { disabled = "disabled" }) 
                @Html.LabelFor(model => model.IsManagerApproved)
                @if (!Model.IsManagerApproveAvailable)
                {
                    <input type="hidden" id="IsManagerApprovedHidden" name="IsManagerApprovedHidden" value="@Model.IsManagerApprovedHidden" />
                }
                </div>
                <div style="text-align: right;float:left;width:200px">
                    <input type="submit" value="Отклонить" onclick="return ManagerReject();" @if (!Model.IsManagerRejectAvailable) {<text>style="display:none"</text>}/>
                    <input type="hidden" id="IsManagerReject" name="IsManagerReject" value="@Model.IsManagerReject" />
                    <input type="hidden" id="IsManagerRejectAvailable" name="IsManagerRejectAvailable" value="@Model.IsManagerRejectAvailable" />
                </div>
               
            </td>
        </tr>
         <tr>
            <td>ФИО руководителя</td>
            <td>@Model.ManagerFio</td>
        </tr>
        <tr>
            <td>@Html.LabelFor(model => model.AccountantFio)</td>
            <td>
                <div  style="float:left;width:533px">
                <input type="hidden" id="IsAccountantEditable" name="IsAccountantEditable" value="@Model.IsAccountantEditable" />
                <input type="hidden" id="IsAccountantApproveAvailable" name="IsAccountantApproveAvailable" value="@Model.IsAccountantApproveAvailable" />
                @Html.CheckBox("IsAccountantApproved", Model.IsAccountantApproved, Model.IsAccountantApproveAvailable ? null : (object)new { disabled = "disabled" }) 
                @Html.LabelFor(model => model.IsAccountantApproved)
                @if (!Model.IsAccountantApproveAvailable)
                {
                    <input type="hidden" id="IsAccountantApprovedHidden" name="IsAccountantApprovedHidden" value="@Model.IsAccountantApprovedHidden" />
                }
                </div>
                <div style="text-align: right;float:left;width:200px">
                    <input type="submit" value="Отменить согласование" onclick="return AccountantReject();" @if (!Model.IsAccountantRejectAvailable){<text>style="display:none"</text>}/>
                    <input type="hidden" id="IsAccountantReject" name="IsAccountantReject" value="@Model.IsAccountantReject" />
                    <input type="hidden" id="IsAccountantRejectAvailable" name="IsAccountantRejectAvailable" value="@Model.IsAccountantRejectAvailable" />
                </div>
                @if (!Model.IsAccountantRejectAvailable && !Model.IsSend1C && (dto.UserRole & UserRole.Accountant) > 0)
                {
                <input style="float:right;" type="submit" value="Отменить согласование бухгалтера" onclick="return AccountantApproveCancel();" @*@if (!Model.IsAccountantApprovedHidden)
                                                                                                                                               {<text>style="display:none"</text>}*@/>
                }
                <input type="hidden" id="IsAccountantApprovedCancel" name="IsAccountantApprovedCancel" value="@Model.IsAccountantApprovedCancel" />
                <input type="hidden" id="IsSend1C" name="IsSend1C" value="@Model.IsSend1C" />
            </td>
        </tr>
        <tr>
            <td>ФИО бухгалтера</td>
            <td>@Model.AccountantFio</td>
        </tr>
        <tr>
            <td>
                <input type="hidden" id="IsArchivistEditable" name="IsArchivistEditable" value="@Model.IsArchivistEditable" />
                @Html.LabelFor(m => m.ArchiveDate):
            </td>
            <td>
                @if (Model.IsArchivistEditable)
                {
                    @Html.EditorFor(model => model.ArchiveDate)
                }
                else
                {
                    @Html.DisplayFor(model => model.ArchiveDate)
                    @Html.HiddenFor(model => model.ArchiveDate)
                } 
            </td>
        </tr>
        <tr>
            <td colspan="2">
                @Html.LabelFor(m => m.ArchiveNumber):&nbsp;&nbsp;
           @* </td>
            <td>*@
                @Html.TextBoxFor(model => model.ArchiveNumber, Model.IsArchivistEditable ? (object)new { maxlength = 100 } : (object)new { @readonly = "read-only" }) 
            </td>
        </tr>
        <tr>
            <td> @Html.LabelFor(m => m.ArchivistFio)</td>
            <td>@Model.ArchivistFio</td>
        </tr>
        <tr>
            <td colspan="2">
            <input type="hidden" id="IsSaveAvailable" name="IsSaveAvailable" value="@Model.IsSaveAvailable" />
            <input type="submit" value="Сохранить" onclick="return ValidateForm();" @if (!Model.IsSaveAvailable) {<text>style="display:none"</text>}/>
            @if (Model.IsSurchargeAvailable && Model.IsAccountantApproved && (dto.UserRole & UserRole.Accountant) > 0)
            {
                @*<input type="button" value="Создать удержание" onclick="" />*@
                <input type="button" value="Создать доплату" onclick="$('#SurchargeDialog').dialog('open');" /> 
            }
            @if ((dto.UserRole & UserRole.Accountant) > 0 && !Model.StornoAddedDate.HasValue && !(Model.ManualDeductions!=null && Model.ManualDeductions.Any()))
            {
                <input type="button" id="StornoButton" value="Ручное удержание" onclick="$('#StornoDialog').dialog('open');" /> 
            }
            @if (Model.Id > 0)
            {
                <input type="button" value="Печать авансового отчета" onclick="window.location.href='@Url.Action("GetReportPrintForm", "MissionOrder", new { id = Model.Id })';"/>   
            }
            <input type="hidden" id="IsDocumentsSaveToArchiveAvailable" name="IsDocumentsSaveToArchiveAvailable" value="@Model.IsDocumentsSaveToArchiveAvailable" />
            <input type="button" id="IsDocumentsSaveToArchiveBtn" value="Оригиналы переданы в архив" onclick="return DocumentsSaveToArchive();" @if (!Model.IsDocumentsSaveToArchiveAvailable)
                                                                                                                                                {<text>style="display:none"</text>}/>
            <input type="hidden" id="IsPrintArchivistAddressAvailable" name="IsPrintArchivistAddressAvailable" value="@Model.IsPrintArchivistAddressAvailable" />
            <input type="button" value="Документы для архивариуса" onclick="return PrintArchivistAddress();" @if (!Model.IsPrintArchivistAddressAvailable)
                                                                                                             {<text>style="display:none"</text>}/>
            @if ((dto.UserRole & UserRole.Accountant) > 0
                && Model.IsUserDismissal
                && Model.DeductionDocNumber == 0
                && DateTime.Now >= new DateTime(2015, 4, 1)
                )
            {
                    <input type="button" id="ExportButton" value="Выгрузить в удержания" onclick=" UploadToDeduction(2, 3, 2, 'true');" />
            }
            @if ((dto.UserRole & UserRole.Accountant) > 0)
            {
                <input type="button" id="SendNotifyButton" value="Отправить сотруднику уведомление об удержании" onclick="SendNotify();"/>
            }
            <span id="LoadingIndicator" ></span>
            </td>
        </tr>
    </table>
    </div>
    <br />
    <div class="comment-wrap">
        <table style="width:100%">
             <tr>
                <td colspan="2">
                    <div id="CommentModelContext">@Html.Partial("RequestCommentPartial", Model.CommentsModel)</div>
                </td>
            </tr>
        </table>
    </div>
     <script type="template/html" id="costTemplate">
                    <table id="costsTable" class="grid">
                            <thead>
                                <tr>
                                   <td>№ пп</td>
                                   <td style='width:400px'>Наименование расходов</td>
                                   <td>Оплачено фактически <br/>сотрудником (сумма, руб)</td>
                                   <td style='text-align:center'>Документ</td>
                                   <td>Оплачено организацией <br/>за сотрудника</td>
                                   <td>Принято к учету</td>
                                   <td style='width:57px'></td>
                                    {{^IsTransactionsHidden}}
                                   <td>Дебет бух. Счета</td>
                                   <td>Кредит бух. Счета</td>
                                   {{/IsTransactionsHidden}}
                                </tr>
                            </thead>
                            <tbody>
                                {{#List}}
                                <tr>
                                    <td>
                                        {{#IsEditable}}
                                            <a href="#" onclick = "editCost({{CostId}});return false;">{{Number}}</a>
                                        {{/IsEditable}}
                                        {{^IsEditable}}
                                            {{Number}}
                                        {{/IsEditable}}
                                    </td>
                                    <td>{{Name}}</td>
                                    <td>
                                        {{^IsHidden}}
                                            {{UserSum}}
                                        {{/IsHidden}}
                                    </td>
                                    <td> 
                                        {{#AddScanAvailable}}
                                                <a href="#" onclick = "addAttachment({{CostId}});return false;">Прикрепить</a>
                                        {{/AddScanAvailable}}
                                        {{#ScanId}}
                                            <a href="#" onclick = "viewAttachment({{ScanId}});return false;">Просмотр</a>
                                        {{/ScanId}}
                                        {{#DeleteScanAvailable}}
                                            <a href="#" onclick = "deleteAttachment({{CostId}},{{ScanId}});return false;">Удалить</a>
                                        {{/DeleteScanAvailable}}
                                    </td>
                                    <td>{{PurchaseBookSum}}</td>
                                    <td>{{AccountantSum}}</td>
                                    <td>
                                        {{#IsDeleteAvailable}}
                                           <a href="#" onclick = "deleteCost({{CostId}});return false;">Удалить</a>
                                        {{/IsDeleteAvailable}}
                                        {{#IsTransactionAvailable}}
                                            <input type="button" value="Добавить проводку" name="AddTranBtn" id="AddTranBtn" onclick="addTran({{CostId}});" 
                                        {{/IsTransactionAvailable}}
                                    </td>
                                    {{^IsTransactionsHidden}}
                                    <td></td>
                                    <td></td>
                                    {{/IsTransactionsHidden}}
                                </tr>
                                 {{^IsTransactionsHidden}}
                                {{#Trans}}
                                <tr>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                     <td></td>
                                    <td>{{Sum}}</td>
                                    <td>
                                        {{#IsEditable}}
                                           <a href="#" onclick = "deleteTran({{CostId}},{{TranId}});return false;">Удалить</a>
                                        {{/IsEditable}}
                                    </td>
                                    <td>
                                        {{#IsEditable}}
                                            <a href="#" onclick = "editTran({{CostId}},{{TranId}});return false;">{{Debit}}</a>
                                        {{/IsEditable}}
                                        {{^IsEditable}}
                                            {{Debit}}
                                        {{/IsEditable}}
                                    </td>
                                    <td>{{Credit}}</td>
                                </tr>
                                {{/Trans}}
                                {{/IsTransactionsHidden}}
                               {{/List}}
                            </tbody>
                    </table>
     </script>
     <script type="text/javascript">
        var  actionEditCostDialogUrl = "@Url.Action("EditCostDialog", "MissionOrder")";
        var  actionEditTranDialogUrl = "@Url.Action("EditTranDialog", "MissionOrder")";
        var  actionPrintArchivistAddressDialogUrl = "@Url.Action("PrintArchivistAddressDialog", "MissionOrder")";
        $(document).ready(function () {
            $("#SurchargeDialog").dialog({ autoOpen: false });
            $("#StornoDialog").dialog({ autoOpen: false });
            $("#ArchiveDate").datepicker({changeMonth: true, changeYear: true});
            $(".hasDatepicker").width("75px");
            /*$("#BeginDate").datepicker({changeMonth: true, changeYear: true});
            $("#EndDate").datepicker({changeMonth: true, changeYear: true});
            $(".hasDatepicker").width("75px");
            $("#DaysCount").width("50px");*/
            setActiveMenuItem("moAllReports");
            var targets = JSON.parse($("#Costs").val());
            renderCostsTable(targets);
//            setTargetBtnState();
//            IsResidencePaidChange();
//            IsAirTicketsPaidChange();
//            IsTrainTicketsPaidChange();
        });
        function ValidateForm()
        {
            clearControlErrors($("#Hotels"));
            if($("#Hotels").val() == '' )
            {
                addControlError($("#Hotels"),'Обязательное поле');
                return false;
            }
            if($("#IsArchivistEditable").val() == 'True')
            {
                var result = true;
                //clearControlErrors($("#ArchiveNumber"));
                //clearControlErrors($("#ArchiveDate"));
                if(!IsFieldNotEmpty($("#ArchiveNumber")))
                    result = false;
                if(!IsFieldNotEmpty($("#ArchiveDate")))
                    result = false;
                else
                {
                    try {
                        beginDate = $.datepicker.parseDate("dd.mm.yy", $('#ArchiveDate').val());
                    }
                    catch (error) {
                        addControlError($("#ArchiveDate"), "Неверная дата");
                        result = false;
                    }
                }
                return result;
            }
            return true;
        }
        function ManagerReject()
        {
            if(!ValidateForm())
                return false;
            $("#IsManagerReject").val('True');
            return true;
        }
        function AccountantReject()
        {
            if(!ValidateForm())
                return false;
            $("#IsAccountantReject").val('True');
            return true;
        }
        function AccountantApproveCancel()
        {
            if(!ValidateForm())
                return false;
            $("#IsAccountantApprovedCancel").val('True');
            return true;
        }
        function renderCostsTable(costs) {
            var template = $("#costTemplate").html();
//            var html = Mustache.to_html(template, costs/*, partials*/);
//            $("#costsTable").html(html);

            var html = Mustache.render(template, costs);
            $("#costsTable").html(html);
//            $("#costsTable").attr("class","grid");
            /*if ($("#IsReadOnly").val() == 'True') {
                $(".deleteLink").hide();
            }*/
        }
         function addCost() {
            createCostDialog(actionEditCostDialogUrl,"id=0");
        }
        function editCost(id){
            clearErrors();
            var targets = JSON.parse($("#Costs").val());
            var obj = findByCostId(targets.List,id);
            if(obj == undefined)
            {
                addError("Не найден расход для редактирования");
                return;
            }
            var params = "id="+id+"&json="+escapeJson(JSON.stringify(obj));
            createCostDialog(actionEditCostDialogUrl,params);
        }
        function deleteCost(id){
            clearErrors();
            var targets = JSON.parse($("#Costs").val());
            targets.List = jQuery.grep(targets.List, function (value, i) {
                return value.CostId != id;
            });
            renumberCosts(targets.List);
            if(!recalcTotal(targets.List))
            {
                addError("Ошибка при подсчете итогов");
                return false;
            }
            renderCostsTable(targets);
            $("#Costs").val(JSON.stringify(targets));
        }
         function createCostDialog(url,params) {
            var elem = document.createElement('div');
            elem.id = "divCostDialog";
            var newDiv = $(elem);
            var title = "Редактирование расхода";
            $(newDiv).text('Подождите, идет загрузка данных ...');
            $(newDiv).load(url + "?"+ params+ " #costDialogTable"
             , function (response, status, xhr) {
                 if (status == "error") {
                     var msg = "Произошла ошибка: ";
                     $(newDiv).html("<div style='color:Red'>" + msg + xhr.status + " " + xhr.statusText + "</div>");
                 } else if (status == "success") {
                     if ($('#DialogTableLoadError').val() != undefined)
                         disableSaveButton();
                     else
                     {
//                        $("#BeginDate").datepicker({changeMonth: true, changeYear: true});
//                        $("#EndDate").datepicker({changeMonth: true, changeYear: true});
//                        $(".hasDatepicker").width("85px"); 
//                        $("#RealDays").width("85px"); 
//                        $("#AllDays").width("85px"); 
//                        $("#BeginDate").change(function(){getDateDiff();});
//                        $("#EndDate").change(function(){getDateDiff();});
                     }
                 }
             }
            );
            $(newDiv).dialog(
            {
                // initialize dialog box
                autoOpen: true,
                modal: true,
                title: title,
                width: 780,
                height: 340,
                // fix IE6  
                bgiframe: true,
                /*open: function (event, ui) {
                    $("#BeginDate").datepicker({changeMonth: true, changeYear: true});
                    $("#EndDate").datepicker({changeMonth: true, changeYear: true});
                    $(".hasDatepicker").width("75px"); 
                },*/
                close: function (event, ui) {
                    $(this).dialog("destroy").remove();
                },
                buttons:
                {
                    "Сохранить": function () {
                        if(!validateCost())
                            return;
                        if(!addCostToTemplate())
                             return;
                        $(this).dialog("close");
                        //setTargetBtnState();
                    },
                    "Отмена": function () {
                        $(this).dialog("close");
                    }
                }
            });
        }
        function disableSaveButton() {
            $(".ui-dialog-buttonpane button:contains('Сохранить')").button("disable");
        }
        
        function validateCost()
        {
            clearDlgErrors($("#costDialogTable"));
            var result = true;
            if(!validateFieldIsNotEmptyAddError($("#UserSum")))
                result =  false;
            else
            {
             if(/*($("#UserSum").val()!='') &&*/(ValidateSumC($("#UserSum")) == undefined))
                result = false;
            }
            /*if(!validateFieldIsNotEmptyAddError($("#Count")))
                result = false;
            else
            {
                if(ValidateInt($("#Count")) == undefined)
                    result = false;
            }*/
            return result;
        }
        function addCostToTemplate()
        {
            clearEditCostCommonErrors();
            var targets = JSON.parse($("#Costs").val());
            var costId = $("#CostId").val();
            var costTypeId = parseInt($("#CostTypeId").val(),10);
            var costType = $("#CostTypeId option:selected").text();
            var userSum = ValidateSumC($("#UserSum"));
            //var count = ValidateInt($("#Count"));

//            var city = $("#City").val();
//            var organization = $("#Organization").val();
//            var dateFrom = $("#BeginDate").val();
//            var dateTo = $("#EndDate").val();
//            var allDaysCount = parseInt($("#AllDays").val(),10);
//            var targetDaysCount = parseInt($("#RealDays").val(),10);
//            var dailyAllowanceId = parseInt($("#DailyAllowanceId").val(),10);
//            var dailyAllowanceName = $("#DailyAllowanceId option:selected").text();
//            var residenceId = parseInt($("#ResidenceId").val(),10);
//            var residenceName = $("#ResidenceId option:selected").text();
//            var airTicketTypeId = parseInt($("#AirTicketTypeId").val(),10);
//            var airTicketTypeName = $("#AirTicketTypeId option:selected").text();
//            var trainTicketTypeId = parseInt($("#TrainTicketTypeId").val(),10);
//            var trainTicketTypeName = $("#TrainTicketTypeId option:selected").text();
            if(costId == 0)
            {
                var costId = findMinId(targets.List);
                var newObj = { Number:null,CostTypeId:costTypeId,Name:costType,/*Count:count,*/GradeSum:null,UserSum:userSum,
                PurchaseBookSum:null,AccountantSum:null,CostId:costId,IsEditable:true,IsHidden:false,IsDeleteAvailable:true,
                IsTransactionAvailable:false,TransactionDto:null,SortOrder:getSortOrder(costTypeId),
                ScanId:0,AddScanAvailable:false,DeleteScanAvailable:false};
                if(!AddToTemplate(targets,newObj))
                {
                    addEditCostCommonError("Не найден индекс для сохранения");
                    return false;
                }
                renumberCosts(targets.List);
                //targets.List.push(newObj);
            }
            else
            {
                var obj = findByCostId(targets.List,costId);
                var needToMove = false;
                 if(obj == undefined)
                 {
                    addEditCostCommonError("Не найден расход для сохранения");
                    return false;
                 }
                 if(obj.CostTypeId != costTypeId)
                    needToMove = true;
                 obj.CostTypeId = costTypeId; 
                 obj.Name = costType; 
                 //obj.Count = count; 
                 obj.UserSum = userSum;
                 if(needToMove)
                 {
                    obj.SortOrder = getSortOrder(costTypeId);
                    targets.List = jQuery.grep(targets.List, function (value, i) {
                        return value.CostId != costId;
                    }); 
                    if(!AddToTemplate(targets,obj))
                    {
                        addEditCostCommonError("Не найден индекс для сохранения");
                        return false;
                    }
                    renumberCosts(targets.List);
                 }
            }
            if(!recalcTotal(targets.List))
            {
                addEditCostCommonError("Ошибка при подсчете итогов");
                return false;
            }
            renderCostsTable(targets);
            $("#Costs").val(JSON.stringify(targets));
            return true; //calculateSums(targets.List);
        }
        function AddToTemplate(targets,newObj)
        {
            var index = findPositionUsingSortOrder(targets.List,newObj.SortOrder);
            if(index == undefined)
                return false;
            targets.List.splice(index, 0, newObj);
            return true;
        }
        function addEditCostCommonError(value) {
            $("#EditCostDlgError").text(value);
            $("#EditCostDlgError").show();
        }
       
        function clearEditCostCommonErrors() {
            $("#EditCostDlgError").text("");
            $("#EditCostDlgError").hide();
        }
        function findByCostId(list,costId)
        {
            var obj = undefined;
            jQuery.each( list, function( i, val ) {
                if(val.CostId == costId)
                {
                   obj = val;
                   //return obj;
                }
            });
            return obj;
        }
        function recalcTotal(list)
        {
            var total = undefined;
            var userReceiveSum = undefined;
            var diffSum = undefined;
            var totalGradeSum = 0;
            var totalUserSum = 0;
            var totalPbSum = 0;
            var totalAccountantSum = 0;
            jQuery.each( list, function( i, val ) {
                if(val.SortOrder == -1)
                   total = val;
                else if(val.SortOrder == -2)
                   userReceiveSum = val;
                else if(val.SortOrder == -3)
                   diffSum = val;
                else if(val.SortOrder > 0)
                {
                    if(val.GradeSum != null)
                        totalGradeSum = totalGradeSum + val.GradeSum;
                    if(val.UserSum != null)
                        totalUserSum = totalUserSum + val.UserSum;
                    if(val.PurchaseBookSum != null)
                        totalPbSum = totalPbSum + val.PurchaseBookSum;
                    if(val.AccountantSum != null)
                        totalAccountantSum = totalAccountantSum + val.AccountantSum;
                }
            });
            if(total == undefined)
                return undefined;
            if(userReceiveSum == undefined)
                return undefined;
            if(diffSum == undefined)
                return undefined;
            total.GradeSum = totalGradeSum;
            total.UserSum = 1*totalUserSum.toFixed(2);
            total.PurchaseBookSum = 1*totalPbSum.toFixed(2);
            total.AccountantSum = 1*totalAccountantSum.toFixed(2);
            if(userReceiveSum.UserSum != null)
                diffSum.UserSum = totalAccountantSum - totalPbSum - userReceiveSum.UserSum;
            else    
                diffSum.UserSum = totalAccountantSum - totalPbSum;
            return total;
        }
        function getSortOrder(costTypeId)
        {
            return costTypeId;
        }
        function findMinId(list) {
            var minId = 0;
            jQuery.each(list, function (i, val) {
                if (val.CostId < minId)
                    minId = val.CostId;
            });
            return minId - 1;
        }
        function findPositionUsingSortOrder(list,sortOrder) {
            var found = -1;
            jQuery.each(list, function (i, val) {
                if(found == -1)
                {
                    if ((val.SortOrder > sortOrder) || (val.SortOrder < 0))
                        found = i;
                }
            });
            if(found == -1)
                return undefined;
            return found;
        }  
        function renumberCosts(list) {
            var number = 1;
            jQuery.each(list, function (i, val) {
                if (val.SortOrder >= 0)
                {
                    val.Number = number;
                    number = number + 1
                }
            });
        } 
         

        function addTran(costId) {
            createTranDialog(actionEditTranDialogUrl,"id=0&costId="+costId);
        }
        function editTran(costId,id){
            clearErrors();
            var targets = JSON.parse($("#Costs").val());
            var obj = findByCostId(targets.List,costId);
            if(obj == undefined)
            {
                addError("Не найден расход при редактировании проодки");
                return;
            }
            var trans = obj.Trans;
            var tran = findByTranId(trans,id);
             if(tran == undefined)
            {
                addError("Не найдена проводка для редактирования");
                return;
            }
            var params = "id="+id+"&costId="+costId+"&json="+escapeJson(JSON.stringify(tran));
            createTranDialog(actionEditTranDialogUrl,params);
        }
        function deleteTran(costId,id){
            clearErrors();
            var targets = JSON.parse($("#Costs").val());
            var obj = findByCostId(targets.List,costId);
            if(obj == undefined)
            {
                addError("Не найден расход при редактировании проводки");
                return;
            }
            var trans = obj.Trans;
            trans = jQuery.grep(trans, function (value, i) {
                return value.TranId != id;
            });
            obj.Trans = trans;
            obj.AccountantSum = recalcTranSum(obj.Trans);
            if(!recalcTotal(targets.List))
            {
                addError("Ошибка при подсчете итогов");
                return false;
            }
            renderCostsTable(targets);
            $("#Costs").val(JSON.stringify(targets));
        }
          function createTranDialog(url,params) {
            var elem = document.createElement('div');
            elem.id = "divTranDialog";
            var newDiv = $(elem);
            var title = "Редактирование проводки";
            $(newDiv).text('Подождите, идет загрузка данных ...');
            $(newDiv).load(url + "?"+ params+ " #tranDialogTable"
             , function (response, status, xhr) {
                 if (status == "error") {
                     var msg = "Произошла ошибка: ";
                     $(newDiv).html("<div style='color:Red'>" + msg + xhr.status + " " + xhr.statusText + "</div>");
                 } else if (status == "success") {
                     if ($('#DialogTableLoadError').val() != undefined)
                         disableSaveButton();
                 }
             }
            );
            $(newDiv).dialog(
            {
                // initialize dialog box
                autoOpen: true,
                modal: true,
                title: title,
                width: 480,
                height: 250,
                // fix IE6  
                bgiframe: true,
                close: function (event, ui) {
                    $(this).dialog("destroy").remove();
                },
                buttons:
                {
                    "Сохранить": function () {
                        if(!validateTran())
                            return;
                        if(!addTranToTemplate())
                             return;
                        $(this).dialog("close");
                        //setTargetBtnState();
                    },
                    "Отмена": function () {
                        $(this).dialog("close");
                    }
                }
            });
        }
        function validateTran()
        {
            clearDlgErrors($("#tranDialogTable"));
            var result = true;
            if(!validateFieldIsNotEmptyAddError($("#Sum")))
                result =  false;
            else
            {
             if(ValidateSumC($("#Sum")) == undefined)
                result = false;
            }
            return result;
        }
        function addTranToTemplate()
        {
            addEditTranCommonError();
             var targets = JSON.parse($("#Costs").val());
            var costId = $("#CostId").val();
            var tranId = $("#TranId").val();
            var debitAccountId = parseInt($("#DebitAccountId").val(),10);
            var debitAccount = $("#DebitAccountId option:selected").text();
            var creditAccountId = parseInt($("#CreditAccountId").val(),10);
            var creditAccount = $("#CreditAccountId option:selected").text();
            var sum = ValidateSumC($("#Sum"));
            var obj = findByCostId(targets.List,costId);
            if(obj == undefined)
            {
                addEditTranCommonError("Не найден расход при сохранении проводки");
                return false;
            }
            var trans = obj.Trans;
            if(tranId == 0)
            {
                
                tranId = findTransMinId(trans);
                var newObj = { TranId:tranId,DebitId:debitAccountId,Debit:debitAccount,CreditId:creditAccountId,
                                Credit:creditAccount,Sum:sum,IsEditable:true};
                trans.push(newObj);
                
            }
            else
            {
                var tran = findByTranId(trans,tranId);
                if(tran == undefined)
                {
                    addEditTranCommonError("Не найден проводка при сохранении проводки");
                    return false;
                }
                tran.DebitId = debitAccountId;
                tran.Debit = debitAccount;
                tran.CreditId = creditAccountId;
                tran.Credit = creditAccount;
                tran.Sum = sum;
            }
            obj.AccountantSum = recalcTranSum(obj.Trans);
            if(!recalcTotal(targets.List))
            {
                addEditCostCommonError("Ошибка при подсчете итогов");
                return false;
            }
            renderCostsTable(targets);
            $("#Costs").val(JSON.stringify(targets));
            return true;
        }
        function addEditTranCommonError(value) {
            $("#EditTranDlgError").text(value);
            $("#EditTranDlgError").show();
        }
       
        function clearEditTranCommonErrors() {
            $("#EditTranDlgError").text("");
            $("#EditTranDlgError").hide();
        }
        function findTransMinId(list) {
            var minId = 0;
            jQuery.each(list, function (i, val) {
                if (val.TranId < minId)
                    minId = val.TranId;
            });
            return minId - 1;
        }
        function recalcTranSum(list)
        {
            var totalSum = 0;
            jQuery.each( list, function( i, val ) {
                   if(val.Sum != null)
                        totalSum = totalSum + val.Sum;
            });
            return totalSum;
        }
        function findByTranId(list,tranId)
        {
            var obj = undefined;
            jQuery.each( list, function( i, val ) {
                if(val.TranId == tranId)
                {
                   obj = val;
                }
            });
            return obj;
        }


        function DocumentsSaveToArchive()
        {
            var id = $("#Id").val();
            var url="@Url.Action("SaveDocumentsToArchive", "MissionOrder")";
            var jqxhr = $.ajax({
                type: "POST",
                datatype: "json",
                url: url,
                data: {
                    'Id': id
                },
                success:function (jsonResult) {
                                            if (!this.JSON) {
                                                    this.JSON = {};
                                            }
                                            if(jsonResult == "")
                                            {
                                                alert("Ошибка асинхронного запроса - не был получен ответ.");
                                                return;
                                            }
                                            var result = JSON.parse(jsonResult);  
                                            if(result.Error != '')
                                            {
                                                alert("Ошибка:"+result.Error);
                                               
                                            }
                                            else
                                            {
                                                 $("#IsDocumentsSaveToArchiveBtn").hide();
                                                 $("#IsDocumentsSaveToArchiveAvailable").val('False');
                                            }    
                                  }});
        }
 
     function PrintArchivistAddress()
     {
            var elem = document.createElement('div');
            elem.id = "archivistAddressDialog";
            var newDiv = $(elem);
            var title = "Печать адреса архивариуса";
            $(newDiv).text('Подождите, идет загрузка данных ...');
            $(newDiv).load(actionPrintArchivistAddressDialogUrl + "? #archivistAddressDialogTable"
             , function (response, status, xhr) {
                 if (status == "error") {
                     var msg = "Произошла ошибка: ";
                     $(newDiv).html("<div style='color:Red'>" + msg + xhr.status + " " + xhr.statusText + "</div>");
                     disablePrintButton();
                 } else if (status == "success") {
                     //$('#PrintDlgError').val($('#Error').val());
                     if ($('#PrintDlgErrorTr').val() != undefined)
                     {
                        //$('#PrintDlgError').show();
                         disablePrintButton();
                     }
                 }
             }
            );
            $(newDiv).dialog(
            {
                // initialize dialog box
                autoOpen: true,
                modal: true,
                title: title,
                width: 680,
                height: 220,
                // fix IE6  
                bgiframe: true,
                close: function (event, ui) {
                    $(this).dialog("destroy").remove();
                },
                /* open: function (event, ui) {
                     $('#PrintDlgError').val($('#Error').val());
                     if ($('#PrintDlgError').val() != '')
                     {
                        $('#PrintDlgError').show();
                         disablePrintButton();
                     }
                },*/
                buttons:
                {
                    "Печать конверта": function () {
                     var id = $('#ArchivistId').val();
                     window.location.href='@Url.Action("GetPrintArchivistAddress", "MissionOrder")'+'?id='+id;

                    },
                    "Печать описи": function () {
                     var id = $('#ArchivistId').val();
                     var reportId = $('#Id').val();
                     window.location.href='@Url.Action("GetReportListPrintForm", "MissionOrder")'+'?id='+id+"&reportId="+reportId;

                    },
                    "Отмена": function () {
                        $(this).dialog("close");
                    }
                }
            });
     } 
     function disablePrintButton() {
            $(".ui-dialog-buttonpane button:contains('Печать конверта')").button("disable");
            $(".ui-dialog-buttonpane button:contains('Печать описи')").button("disable");
     }
     function archivistChange()
     {
        var id = $('#ArchivistId').val();
        var addresses = JSON.parse($("#AddressList").val());
        var address = findById(addresses,id);
        if(address == undefined)
        {
              $('#PrintDlgError').val('Не найден адрес архивариуса');
              $('#PrintDlgError').show();
              return;
        }
        $('#PrintDlgError').hide();
        $('#Address').val(address.Name);
     }
    function findById(list,id)
    {
        var obj = undefined;
        jQuery.each( list, function( i, val ) {
            if(val.Id == id)
            {
                obj = val;
            }
        });
        return obj;
    }
    function addAttachment(costId)
    {
        var elem = document.createElement('div');
        elem.id = "divCostAttachmentDialog";
        var newDiv = $(elem);
        //var documentId = $("#AttachmentRequestId").val();
        
        var title =  "Прикрепление нового документа";
        $(newDiv).text('Подождите, идет загрузка данных ...'); 
        $.ajaxSetup({cache: false});
        $(newDiv).load("@Url.Action("AddCostAttachmentDialog", "MissionOrder")?id=" + costId + " #CostAttachmentDialogTable");
        $(newDiv).dialog(
        {
            // initialize dialog box
            autoOpen: true,
            modal: true,
            title: title,
            // fix IE6  
            bgiframe: true, 
            draggable: false,
            resizable: false,
            width: 350,
	        height: 200,
            close: function (event, ui) {
                $(this).dialog("destroy").remove();
            },
            open: function(event, ui) {
                timedSetupCostUploader(); 
            },

            buttons:
            {
                "Отмена": function () {
                    $(this).dialog("close");
                }
            }
        });
    }
    function timedSetupCostUploader()
    {
            elem = document.getElementById('file-uploader');
            if(elem == null)
            {
                setTimeout(function()   {
                    timedSetupCostUploader();
                }, 100);    
            }
            else
                setupCostUploader();
    }
    function setupCostUploader()
    {
    //var id = $('#DocumentId').val();
    var uploader = new qq.FileUploader(
    {
        // pass the dom node (ex. $(selector)[0] for jQuery users)
        element: document.getElementById('file-uploader'),
        // path to server-side upload script      
        action: "@Url.Action("SaveCostAttachment", "MissionOrder")",
        sizeLimit: 2097152,
//        params: {
//            id: id
//        },
        onSubmit: function (id, fileName) {
            clearCostAttachmentErrors();
            $('.qq-upload-list').hide();
            //var description = $('#Description').val();
            var id = $('#CostId').val();
            uploader.setParams({
                id: id
                //,Description: description
            });
        },
        onProgress: function (id, fileName, loaded, total) {
            $('.qq-upload-list').hide();
        },
        onComplete: function (id, fileName, responseJSON) {
            $('.qq-upload-list').hide();
            if(responseJSON == "")
            {
                addCostAttachmentError("Ошибка асинхронного запроса - не был получен ответ.");
                return;
            }
            var result = responseJSON; //JSON.parse("{"+responseJSON+"}"); 
             
            if(((result.success != undefined) && (!result.success)) || !result.Result)
            {
                if((result.success != undefined) && (!result.success))
                    addCostAttachmentError("Ошибка - не получен ответ сервера.");
                else
                    addCostAttachmentError(result.Error);
            }
            else
            {
                clearCostAttachmentErrors();
                var id = result.Id;
                var costId = $('#CostId').val();
                var targets = JSON.parse($("#Costs").val());
                var obj = findByCostId(targets.List,costId);
                if(obj == undefined)
                {
                    addCostAttachmentError("Не найден расход для добавления документа");
                    return;
                }
                obj.ScanId = id;
                obj.DeleteScanAvailable = true;
                $("#Costs").val(JSON.stringify(targets));
                renderCostsTable(targets);
                $("#divCostAttachmentDialog").dialog("close");
            }    
        },
        debug: true
    });
    }
        function addCostAttachmentError(value) {
            $("#CostAddAttachmentError").text(value);
            $("#CostAddAttachmentError").show();
        }
        function clearCostAttachmentErrors() {
            $("#CostAddAttachmentError").text("");
            $("#CostAddAttachmentError").hide();
        }
        function viewAttachment(id)
        {
             window.location.href='@Url.Action("ViewAttachment", "MissionOrder")'+'?id='+id;
        }
        function deleteAttachment(costId,id)
        {
            var actionUrl="@Url.Action("DeleteAttachment", "MissionOrder")";
            var url = actionUrl + "?Id=" + id;
            $.getJSON(url,
                            function (result) {
                                if(!result.Result){
                                    /*$("#AttachmentError").text(result.Error);
                                    $("#AttachmentError").show(); */
                                    alert(result.Error);
                                }
                                else {
                                    var targets = JSON.parse($("#Costs").val());
                                    var obj = findByCostId(targets.List,costId);
                                    if(obj == undefined)
                                    {
                                        alert("Не найден расход для удаления документа");
                                        return;
                                    }
                                    obj.ScanId = 0;
                                    obj.DeleteScanAvailable = false;
                                    $("#Costs").val(JSON.stringify(targets));
                                    renderCostsTable(targets);           
                                }
                                //RenderAttachments();
                            }
            );
            return false;
        }
        function UploadToDeduction(typeId, kindId, exportType, isFast)
    {
        $("#LoadingIndicator").addClass("loading");
        var a=[];
        a.push($("#Id").val());
        
        jQuery.ajaxSettings.traditional = true;
        $.ajax({
        url: '@Url.Action("ExportDocuments")',
        type: 'POST',
        data: {mas:a,typeId:typeId,kindId:kindId,exportType:exportType,isFast:isFast},
        success: function(result){
            $(".loading").removeClass("loading");
            if(result.Status=='Ok') $("#ExportButton").hide();
            else
            { 
                alert(result.Message);
            }
            },
        error: function(){
            $(".loading").removeClass("loading");
            alert("При отправке данных произошла ошибка.");
            }
        });
    }
    function AddSurcharge()
    {
        $("#LoadingIndicator").addClass("loading");
        var b= @Model.Id;
        var a= @Model.UserId;
        var c=$("#SurchargeSum").val();
        var d=$("#deductionNumber").val();
        jQuery.ajaxSettings.traditional = true;
        $.ajax({
        url: '@Url.Action("AddSurcharge", "Surcharge")',
        type: 'POST',
        data: {userId:a,missionReportId:b,sum:c,deductionNumber:d},
        success: function(result){
            $(".loading").removeClass("loading");
            if(result.status=='Ok') 
            {
                $("#ExportButton").hide();
                $("#SurchargeDialog").dialog( "close" );
            }
            else
            { 
                console.log(result);
                alert(result.message);
                $("#SurchargeDialog").dialog( "close" );
            }
            },
        error: function(){
            $(".loading").removeClass("loading");
            alert("При отправке данных произошла ошибка.");
            $("#SurchargeDialog").dialog( "close" );
            }
        });
    }
    function AddStorno()
    {
        clearControlErrors($("#StornoSum"));
        clearControlErrors($("#StornoComment"));
        clearControlErrors($("#StornoDeductionNumber"));
        var b= @Model.Id;
        var c=$.trim($("#StornoSum").val());
        var d=$.trim($("#StornoComment").val());
        var e=$.trim($("#StornoDeductionNumber").val());
        $("#AddStornoBtn").hide();
        if(c == '' )
            {
                addControlError($("#StornoSum"),'Обязательное поле');
                addControlError($("#StornoComment"),'Обязательное поле');
                $("#AddStornoBtn").show();
                return false;
            }
        if(d == '' )
            {
                addControlError($("#StornoComment"),'Обязательное поле');
                $("#AddStornoBtn").show();
                return false;
            }
        if(e == '' )
        {
            addControlError($("#StornoDeductionNumber"),'Обязательное поле');
            $("#AddStornoBtn").show();
            return false;
        }
        $("#LoadingIndicator").addClass("loading");
        
        jQuery.ajaxSettings.traditional = true;
        $.ajax({
        url: '@Url.Action("AddStorno", "MissionOrder")',
        type: 'POST',
        data: {missionReportId:b,StornoSum:c,StornoComment:d, StornoDeductionNumber:e},
        success: function(result){
            $(".loading").removeClass("loading");
            if(result.status=='Ok') 
            {
                $("#AddStornoBtn").show();
                $("#StornoButton").hide();
                $("#StornoDialog").dialog( "close" );
            }
            else
            { 
                $("#AddStornoBtn").show();
                console.log(result);
                alert("При добавлении данных произошла ошибка.");
                $("#StornoDialog").dialog( "close" );
            }
            },
        error: function(){
            $("#AddStornoBtn").show();
            $(".loading").removeClass("loading");
            alert("При отправке данных произошла ошибка.");
            $("#StornoDialog").dialog( "close" );
            }
        });
    }
    function SendNotify()
    {
        $("#SendNotifyButton").attr('disabled','disabled');
        jQuery.ajaxSettings.traditional = true;
        $.ajax({
        url: '@Url.Action("SendNotifyEmailToUser", "MissionOrder")',
        type: 'POST',
        data: {id:@Model.Id},
        success: function(result){
            $(".loading").removeClass("loading");
            if(result.status=='Ok') 
            {
                $("#SendNotifyButton").removeAttr('disabled');
            }
            else
            {
                alert('При отправке сообщения произошла ошибка.');
                $("#SendNotifyButton").removeAttr('disabled');
            }
            },
        error: function(){
            $("#SendNotifyButton").removeAttr('disabled');
            alert("При отправке сообщения произошла ошибка!");
            }
        });
    }
    </script>
    <script src="@Url.Content("~/Scripts/mustache.js")" type="text/javascript"></script>
}