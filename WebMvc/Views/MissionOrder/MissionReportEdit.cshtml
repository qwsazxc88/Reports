@model Reports.Presenters.UI.ViewModel.MissionReportEditModel
@{
    Layout = "~/Views/Shared/_LayoutMissionOrder.cshtml";
    ViewBag.Title = "Редактирование авансового отчета";
}
@using (Html.BeginForm())
{
    <div class="doc-wrap">
    <table style="width:100%">
        <tr>
            <td colspan="2">
                @Html.ValidationSummary(false)
                <div id="Error" style="color:Red;display:none;"></div>
                @*<div id="Success" style="color:Green;display:none;">Письмо успешно отправлено в биллинг.</div>*@
            </td>
        </tr>
        <tr>
            <td colspan="2">
                @Html.Partial("../UserInfoView", Model)
            </td>
        </tr>
        <tr>
            <td colspan="2">
             <input type="hidden" id="Id" name="Id" value="@Model.Id" />
                <input type="hidden" id="UserId" name="UserId" value="@Model.UserId" />
                <input type="hidden" id="Version" name="Version" value="@Model.Version" />
                <input type="button" value="Добавить расход" name="AddCostBtn" id="AddCostBtn" class="costBtn" onclick="addCost();"/>
            </td>
        </tr>
        <tr>
            <td colspan="2">
               <input type="hidden" id="Costs" name="Costs" value="@Model.Costs" />
                <div id="costsTable"></div>
                <br/>
            </td>
        </tr>
        <tr>
            <td>@Model.UserFio</td>
            <td>
                <input type="hidden" id="IsEditable" name="IsEditable" value="@Model.IsEditable" />
                <input type="hidden" id="IsUserApprovedAvailable" name="IsUserApprovedAvailable" value="@Model.IsUserApprovedAvailable" />
                @Html.CheckBox("IsUserApproved", Model.IsUserApproved, Model.IsUserApprovedAvailable ? null : (object)new { disabled = "disabled" }) 
              @*  @Html.LabelFor(model => model.IsUserApproved)*@
                @if (!Model.IsUserApprovedAvailable)
                {
                    <input type="hidden" id="IsUserApprovedHidden" name="IsUserApprovedHidden" value="@Model.IsUserApprovedHidden" />
                }
            </td>
        </tr>
        <tr>
            <td>Руководитель</td>
            <td>
                <input type="hidden" id="IsManagerApprovedAvailable" name="IsManagerApprovedAvailable" value="@Model.IsManagerApprovedAvailable" />
                @Html.CheckBox("IsManagerApproved", Model.IsManagerApproved, Model.IsManagerApprovedAvailable ? null : (object)new { disabled = "disabled" }) 
                @Html.LabelFor(model => model.IsManagerApproved)
                @if (!Model.IsManagerApprovedAvailable)
                {
                    <input type="hidden" id="IsManagerApprovedHidden" name="IsManagerApprovedHidden" value="@Model.IsManagerApprovedHidden" />
                }
            </td>
        </tr>
        <tr>
            <td>@Html.LabelFor(model => model.AccountantFio)</td>
            <td>
                <input type="hidden" id="IsAccountantEditable" name="IsAccountantEditable" value="@Model.IsAccountantEditable" />
                <input type="hidden" id="IsAccountantApproveAvailable" name="IsAccountantApproveAvailable" value="@Model.IsAccountantApproveAvailable" />
                @Html.CheckBox("IsAccountantApproved", Model.IsAccountantApproved, Model.IsAccountantApproveAvailable ? null : (object)new { disabled = "disabled" }) 
                @Html.LabelFor(model => model.IsAccountantApproved)
                @if (!Model.IsAccountantApproveAvailable)
                {
                    <input type="hidden" id="IsAccountantApprovedHidden" name="IsAccountantApprovedHidden" value="@Model.IsAccountantApprovedHidden" />
                }
            </td>
        </tr>
        <tr>
            <td></td>
            <td>@Model.AccountantFio</td>
        </tr>
        <tr>
            <td colspan="2">
            <input type="hidden" id="IsSaveAvailable" name="IsSaveAvailable" value="@Model.IsSaveAvailable" />
               <input type="submit" value="Сохранить" onclick="return ValidateForm();" 
                        @if (!Model.IsSaveAvailable) {<text>style="display:none"</text>}/>
               @if (Model.Id > 0)
               {
                    <input type="button" value="Печать авансового отчета" onclick="window.location.href='@Url.Action("GetReportPrintForm", "MissionOrder", new { id = Model.Id })';"/>   
                   @* <input type="button" value="Печать командировочного удостоверения" onclick="window.location.href='@Url.Action("GetDocumentPrintForm", "MissionOrder", new { id = Model.Id })';"/>   
                    <input type="button" value="Печать путевого листа" onclick="window.location.href='@Url.Action("GetPathListPrintForm", "MissionOrder", new { id = Model.Id })';"/>   *@
               }
               @*<div style="text-align: right;"><input type="submit" value="Отклонить" onclick="return Delete();" 
                        @if (!Model.IsDeleteAvailable)
                        {<text>style="display:none"</text>}/>
                </div>*@
            </td>
        </tr>
    </table>
    </div>
    <br />
    <div class="comment-wrap">
        <table style="width:100%">
             <tr>
                <td colspan="2">
                    <div id="CommentModelContext">@Html.Partial("RequestCommentPartial", Model.CommentsModel)</div>
                </td>
            </tr>
        </table>
    </div>
     <script type="template/html" id="costTemplate">
                    <table id="costsTable" class="grid">
                            <thead>
                                <tr>
                                   <td>№ пп</td>
                                   <td style='width:400px'>Наименование расходов</td>
                                   <td>Кол-во</td>
                                   <td>Норма по грейду</td>
                                   <td>Оплачено фактически сотрудником (сумма, руб)</td>
                                   <td>Оплачено организацией за сотрудника</td>
                                   <td>Принято к учету</td>
                                </tr>
                            </thead>
                            <tbody>
                                {{#List}}
                                <tr>
                                    <td>{{Number}}</td>
                                    <td>{{Name}}</td>
                                    <td>{{Count}}</td>
                                    <td>{{GradeSum}}</td>
                                    <td>{{UserSum}}</td>
                                    <td>{{PurchaseBookSum}}</td>
                                    <td>{{AccountantSum}}</td>
                                </tr>
                                {{#Trans}}
                                <tr>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td>{{Debit}}</td>
                                    <td>{{Credit}}</td>
                                    <td></td>
                                    <td>{{Sum}}</td>
                                </tr>
                                {{/Trans}}
                               {{/List}}
                            </tbody>
                    </table>
     </script>
     <script type="text/javascript">
        var  actionEditCostDialogUrl = "@Url.Action("EditCostDialog", "MissionOrder")";
        $(document).ready(function () {
            /*$("#BeginDate").datepicker();
            $("#EndDate").datepicker();
            $(".hasDatepicker").width("75px");
            $("#DaysCount").width("50px");*/
            setActiveMenuItem("moAllReports");
            var targets = JSON.parse($("#Costs").val());
            renderCostsTable(targets);
//            setTargetBtnState();
//            IsResidencePaidChange();
//            IsAirTicketsPaidChange();
//            IsTrainTicketsPaidChange();
        });
        function renderCostsTable(costs) {
            var template = $("#costTemplate").html();
//            var html = Mustache.to_html(template, costs/*, partials*/);
//            $("#costsTable").html(html);

            var html = Mustache.render(template, costs);
            $("#costsTable").html(html);
//            $("#costsTable").attr("class","grid");
            /*if ($("#IsReadOnly").val() == 'True') {
                $(".deleteLink").hide();
            }*/
        }
         function addCost() {
            createCostDialog(actionEditCostDialogUrl,"id=0");
        }
         function createCostDialog(url,params) {
            var elem = document.createElement('div');
            elem.id = "divCostDialog";
            var newDiv = $(elem);
            var title = "Редактирование расхода";
            $(newDiv).text('Подождите, идет загрузка данных ...');
            $(newDiv).load(url + "?"+ params+ " #costDialogTable"
             , function (response, status, xhr) {
                 if (status == "error") {
                     var msg = "Произошла ошибка: ";
                     $(newDiv).html("<div style='color:Red'>" + msg + xhr.status + " " + xhr.statusText + "</div>");
                 } else if (status == "success") {
                     if ($('#DialogTableLoadError').val() != undefined)
                         disableSaveButton();
                     else
                     {
//                        $("#BeginDate").datepicker();
//                        $("#EndDate").datepicker();
//                        $(".hasDatepicker").width("85px"); 
//                        $("#RealDays").width("85px"); 
//                        $("#AllDays").width("85px"); 
//                        $("#BeginDate").change(function(){getDateDiff();});
//                        $("#EndDate").change(function(){getDateDiff();});
                     }
                 }
             }
            );
            $(newDiv).dialog(
            {
                // initialize dialog box
                autoOpen: true,
                modal: true,
                title: title,
                width: 750,
                height: 330,
                // fix IE6  
                bgiframe: true,
                /*open: function (event, ui) {
                    $("#BeginDate").datepicker();
                    $("#EndDate").datepicker();
                    $(".hasDatepicker").width("75px"); 
                },*/
                close: function (event, ui) {
                    $(this).dialog("destroy").remove();
                },
                buttons:
                {
                    "Сохранить": function () {
                        if(!validateCost())
                            return;
                        if(!addCostToTemplate())
                             return;
                        $(this).dialog("close");
                        //setTargetBtnState();
                    },
                    "Отмена": function () {
                        $(this).dialog("close");
                    }
                }
            });
        }
        function disableSaveButton() {
            $(".ui-dialog-buttonpane button:contains('Сохранить')").button("disable");
        }
        function validateCost()
        {
            clearDlgErrors($("#costDialogTable"));
            var result = true;
            if(!validateFieldIsNotEmptyAddError($("#UserSum")))
                result =  false;
            else
            {
             if(ValidateSumC($("#UserSum")) == undefined)
                result = false;
            }
            if(!validateFieldIsNotEmptyAddError($("#Count")))
                result = false;
            else
            {
                if(ValidateInt($("#Count")) == undefined)
                    result = false;
            }
            return result;
        }
        function addCostToTemplate()
        {
            clearEditCostCommonErrors();
            var targets = JSON.parse($("#Costs").val());
            var costId = $("#CostId").val();
            var costTypeId = parseInt($("#CostTypeId").val(),10);
            var costType = $("#CostTypeId option:selected").text();
            var userSum = ValidateSumC($("#UserSum"));
            var count = ValidateInt($("#Count"));

//            var city = $("#City").val();
//            var organization = $("#Organization").val();
//            var dateFrom = $("#BeginDate").val();
//            var dateTo = $("#EndDate").val();
//            var allDaysCount = parseInt($("#AllDays").val(),10);
//            var targetDaysCount = parseInt($("#RealDays").val(),10);
//            var dailyAllowanceId = parseInt($("#DailyAllowanceId").val(),10);
//            var dailyAllowanceName = $("#DailyAllowanceId option:selected").text();
//            var residenceId = parseInt($("#ResidenceId").val(),10);
//            var residenceName = $("#ResidenceId option:selected").text();
//            var airTicketTypeId = parseInt($("#AirTicketTypeId").val(),10);
//            var airTicketTypeName = $("#AirTicketTypeId option:selected").text();
//            var trainTicketTypeId = parseInt($("#TrainTicketTypeId").val(),10);
//            var trainTicketTypeName = $("#TrainTicketTypeId option:selected").text();
            if(costId == 0)
            {
                var costId = findMinId(targets.List);
                var newObj = { Number:null,CostTypeId:costTypeId,Name:costType,Count:count,GradeSum:null,UserSum:userSum,
                PurchaseBookSum:null,AccountantSum:null,CostId:costId,IsReadOnly:false,
                IsTransactionAvailable:false,TransactionDto:null,SortOrder:getSortOrder(costTypeId)};
                if(!AddToTemplate(targets,newObj))
                {
                    addEditCostCommonError("Не найден индекс для сохранения");
                    return false;
                }
                renumberCosts(targets.List);
                //targets.List.push(newObj);
            }
            else
            {
                var obj = findByCostId(targets.List,targetId);
                 if(obj == undefined)
                 {
                    addEditCostCommonError("Не найден объект для сохранения");
                    return false;
                 }
                 obj.CountryId = countryId; 
                 obj.Country = country; 
                 obj.City = city;
                 obj.Organization = organization; 
                 obj.DateFrom = dateFrom;
                 obj.DateTo = dateTo;
                 obj.AllDaysCount = allDaysCount;
                 obj.TargetDaysCount = targetDaysCount;
                 obj.DailyAllowanceId = dailyAllowanceId;
                 obj.DailyAllowanceName = dailyAllowanceName;
                 obj.ResidenceId = residenceId;
                 obj.ResidenceName = residenceName;
                 obj.AirTicketTypeId = airTicketTypeId;
                 obj.AirTicketTypeName = airTicketTypeName;
                 obj.TrainTicketTypeId = trainTicketTypeId;
                 obj.TrainTicketTypeName = trainTicketTypeName;
            }
            if(!recalcTotal(targets.List))
            {
                addEditCostCommonError("Ошибка при подсчете итогов");
                return false;
            }
            renderCostsTable(targets);
            $("#Costs").val(JSON.stringify(targets));
            return true; //calculateSums(targets.List);
        }
        function AddToTemplate(targets,newObj)
        {
            var index = findPositionUsingSortOrder(targets.List,newObj.SortOrder);
            if(index == undefined)
                return false;
            targets.List.splice(index, 0, newObj);
            return true;
        }
        function addEditCostCommonError(value) {
            $("#EditCostDlgError").text(value);
            $("#EditCostDlgError").show();
        }
       
        function clearEditCostCommonErrors() {
            $("#EditCostDlgError").text("");
            $("#EditCostDlgError").hide();
        }
        function findByCostId(list,costId)
        {
            var obj = undefined;
            jQuery.each( list, function( i, val ) {
                if(val.CostId == costId)
                {
                   obj = val;
                   //return obj;
                }
            });
            return obj;
        }
        function recalcTotal(list)
        {
            var total = undefined;
            var userReceiveSum = undefined;
            var diffSum = undefined;
            var totalUserSum = 0;
            var totalAccountantSum = 0;
            jQuery.each( list, function( i, val ) {
                if(val.SortOrder == -1)
                   total = val;
                else if(val.SortOrder == -2)
                   userReceiveSum = val;
                else if(val.SortOrder == -3)
                   diffSum = val;
                else if(val.SortOrder > 0)
                {
                    if(val.UserSum != null)
                        totalUserSum = totalUserSum + val.UserSum;
                    if(val.AccountantSum != null)
                        totalAccountantSum = totalAccountantSum + val.AccountantSum;
                }
            });
            if(total == undefined)
                return undefined;
            if(userReceiveSum == undefined)
                return undefined;
            if(diffSum == undefined)
                return undefined;
            total.UserSum = totalUserSum;
            total.AccountantSum = totalAccountantSum;
            if(userReceiveSum.UserSum != null)
                diffSum.UserSum = total.UserSum - userReceiveSum.UserSum;
            else    
                diffSum.UserSum = total.UserSum;
            return total;
        }
        function getSortOrder(costTypeId)
        {
            return costTypeId;
        }
        function findMinId(list) {
            var minId = 0;
            jQuery.each(list, function (i, val) {
                if (val.CostId < minId)
                    minId = val.CostId;
            });
            return minId - 1;
        }
         function findPositionUsingSortOrder(list,sortOrder) {
            var found = -1;
            jQuery.each(list, function (i, val) {
                if(found == -1)
                {
                    if ((val.SortOrder > sortOrder) || (val.SortOrder < 0))
                        found = i;
                }
            });
            if(found == -1)
                return undefined;
            return found;
        }  
        function renumberCosts(list) {
            var number = 1;
            jQuery.each(list, function (i, val) {
                if (val.SortOrder >= 0)
                {
                    val.Number = number;
                    number = number + 1
                }
            });
        } 
         
      
    </script>
    <script src="@Url.Content("~/Scripts/mustache.js")" type="text/javascript"></script>
}