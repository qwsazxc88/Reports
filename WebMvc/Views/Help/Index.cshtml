@using Reports.Core
@using Reports.Presenters.Services.Impl
@using Reports.Presenters.UI.Bl.Impl;
@model Reports.Presenters.UI.ViewModel.HelpServiceRequestsListModel
@{
    Layout = "~/Views/Shared/_HelpInfo.cshtml";
    ViewBag.Title = "Заказать услугу";
}

@using (Html.BeginForm())
{
    <table style="width:100%">
     <tr>
        <td colspan="2">
          <div class="filter-wrap">
            <table style="width:100%">
                <tr>
                    <td colspan="2">
                        <div id="accordion">
                            <a id="ainfo" href="#">ИНФОРМАЦИЯ</a>
                            <div id="Info" style="font-size: 11px">
                                 Программа "ИнфоУслуги" имеет  следующие разделы:
                                 <br /><br />
                                 <b>1) </b><b style="text-decoration:underline">ЗАКАЗАТЬ УСЛУГУ</b> - с  помощью данной  услуги  предоставляется  возможность   получения Сотрудником копий документов и справок.<br />
                                 <b>2) </b><b style="text-decoration:underline">ЗАДАТЬ ВОПРОС</b>  - данный  раздел позволяет задать вопрос специалисту  по расчету  заработной платы по  начислениям  и удержаниям,  специалисту отдела кадров по кадровому оформлению, специалисту IT-службы  по  технической  поддержке программ WEB-табеля.<br />
                                 <b>3) </b><b style="text-decoration:underline">ШАБЛОНЫ</b> - в  данном разделе  размещены  образцы заявлений для оформления  кадровых операций.<br />
                                 <b>4) </b><b style="text-decoration:underline">ИНФОЗАРПЛАТА</b> -  из данного раздела  можно просмотреть и/или распечатать расчетный  лист, справку 2-НДФЛ.<br /><br />
 
                                 <b>1. </b><b style="text-decoration:underline">ЗАКАЗАТЬ УСЛУГУ:</b><br />
                                 - заказанная  услуга формируется в течение 5 рабочих дней;<br />
                                 - справки по образцу формируются на  основании  скана образца, приложенного сотрудником; <br />
                                 - пакеты документов  на  вычеты, пособия  выкладываются одним файлом, в  случае неверного пакета  документов услуга Исполнителем закрывается - состояние услуги обозначается "Услуга не может быть сформирована",  при данном состояния заявки,  услуга создается сотрудником заново.  <br />
                                 - поле "Требования к документам" обязательно к заполнению;<br />
                                 - комментарии можно получить и оставить через  подраздел "Комментарии";<br />
                                 - заказать услугу за  Сотрудника  может Руководитель;<br />
                                 - если справка нужна  уволенному  Сотруднику ( и уже прошло пять дней и Сотрудник  отключен  от  WEB-табеля), Руководитель в  комментарии указывает фамилию уволенного сотрудника, которому  необходима  справка; <br />
                                 - документы выкладываются Исполнителем в ИнфоУслуги, Сотрудник распечатывает документ и подписывает его у своего Руководителя.<br />
                                 - список документов, которые можно заказать :<br />
                                    2.1. <label style="text-decoration:underline">Анкета для загранпаспорта</label> - сотрудник вкладывает скан заполненной анкеты на загранпаспорт, исполнитель осуществляет проверку. Исполнитель - специалист отдела кадров.<br />
                                    2.2. <label style="text-decoration:underline">Выписка из кадрового приказа</label> - Исполнитель - специалист отдела кадров. <br />
                                    2.3. <label style="text-decoration:underline">Заявление на налоговый вычет</label> (стандартный) с пакетом подтверждающих документов. <label style="font-style:italic">Перечень документов: 1. Заявление на предоставление стандартного налогового вычета, 2. Свидетельство о рождении ребенка/детей,  3. Справка  с места  учебы ребенка, если он проходит обучение в ВУЗе, техникуме, колледже, лицее, 4. Справка 2-НДФЛ с предыдущего места работы, если принят на работу в банк в  течение текущего года.</label> Исполнитель - специалист расчетного отдела. <br />
                                    2.4. <label style="text-decoration:underline">Копия ТК</label> - Исполнитель - специалист отдела кадров.<br />
                                    2.5. <label style="text-decoration:underline">Пакет документов для кассира.</label> <label style="font-style:italic">Перечень документов: 1. Трудовой договор, 2. Приказа о приеме, 3. Договор материальной ответственности.</label> Исполнитель - специалист отдела кадров. <br />
                                    2.6. <label style="text-decoration:underline">Пакет документов для оформления пособия на ребенка сотруднику Банка</label> с пакетом подтверждающих документов. <label style="font-style:italic">Перечень документов: 1. Справка с места работы супруга/супруги о том, что пособие на ребенка не выплачивалось и отпуск по уходу за ребенком не оформлялся, 2. Свидетельство о рождении ребенка/детей.</label> Исполнитель - специалист отдела кадров.<br />
                                    2.7. <label style="text-decoration:underline">Расчетный лист.</label> Исполнитель - специалист расчетного отдела.<br />
                                    2.8. <label style="text-decoration:underline">Справка 2- НДФЛ.</label> Исполнитель - специалист расчетного отдела. <br />
                                    2.9. <label style="text-decoration:underline">Справка для визы</label> с места работы по прикладываемому образцу сотрудника. Исполнитель - специалист отдела кадров.<br />
                                    2.10. <label style="text-decoration:underline">Справка для центра занятости</label> по прикладываемому образцу сотрудника. Исполнитель -  специалист отдела кадров.<br />
                                    2.11. <label style="text-decoration:underline">Справка о заработке для расчета пособия (182Н).</label> Исполнитель - специалист расчетного отдела. <br />
                                    2.12. <label style="text-decoration:underline">Справка о невыплате единовременного пособия при рождении ребенка.</label> <label style="font-style:italic">Перечень документов: 1. Свидетельство о рождении  ребенка.</label> Исполнитель - специалист отдела кадров. <br />
                                    2.13. <label style="text-decoration:underline">Справка о ненахождении в отпуске по уходу за ребенком до 1,5 лет</label> и о неначислении ежемесячного пособия до 1,5 лет. Исполнитель - специалист отдела кадров. <br />
                                    2.14. <label style="text-decoration:underline">Справка о ненахождении в отпуске по уходу за ребенком до 3 лет и</label> о неначислении ежемесячного пособия до 3 лет. Исполнитель - специалист отдела кадров.  <br />
                                    2.15. <label style="text-decoration:underline">Справка о среднем заработке за последние 3 месяца работы.</label> Исполнитель - специалист расчетного отдела. <br />
                                    2.16. <label style="text-decoration:underline">Справка о среднем заработке за последние 6 месяца работы.</label> Исполнитель - специалист расчетного отдела. <br />
                                    2.17. <label style="text-decoration:underline">Справка с места работы по образцу Клиента.</label> Исполнитель - специалист расчетного отдела / отдела кадров. <br />
                                    2.18. <label style="text-decoration:underline">Справка с места работы с указанием должности</label> (без указания оклада) по прикладываемому образцу сотрудника. Исполнитель - специалист отдела кадров.   <br />
                                    2.19. <label style="text-decoration:underline">Справка с места работы с указанием должности и оклада</label> по прикладываемому образцу сотрудника. Исполнитель - специалист отдела кадров.  <br />
                                    2.20. <label style="text-decoration:underline">Материальная помощь</label> с пакетом подтверждающих документов. Исполнитель - специалист отдела кадров.<br />
                                    2.20.1. Пакет документов для оформления материальной помощи в связи со смертью близких родственников (супруг(а), ребенок, родители, брат/сестра): <label style="font-style:italic">1. Заявление на выплату материальной помощи, 2. Свидетельство о смерти, 3. Свидетельство о рождении сотрудника, подтверждающего родство с родителями, 4. Свидетельство о браке в отношении супруга(и), 5. Свидетельство о рождении ребенка.</label><br />
                                    2.20.2. Пакет документов для оформления материальной помощи при рождении ребенка: <label style="font-style:italic">1. Заявление на выплату материальной помощи, 2. Свидетельство о рождении ребенка.</label><br />
                                    2.20.3. Пакет документов для оформления материальной помощи при заключении сотрудником брака: <label style="font-style:italic">1. Заявление на выплату материальной помощи, 2. Свидетельство о браке.</label><br />
                                    2.20.4. Пакет документов для оформления материальной помощи при чрезвычайных обстоятельствах и стихийных бедствиях: <label style="font-style:italic">1. Заявление на выплату материальной помощи, 2. Документ подтверждающий возникшую ситуацию в результате чрезвычайных обстоятельств и стихийных бедствий.</label><br />
                                    2.20.5. Пакет документов для оформления материальной помощи при непредвиденных обстоятельствах (болезнь, тяжелое материальное положение и иные обстоятельства, в том числе помощь многодетным семьям) (при обязательном согласовании с Финансовым Директором Банка): <label style="font-style:italic">1. Заявление на выплату материальной помощи, 2. Свидетельства о рождении всех детей для многодетных семей, 3. Подтверждающие болезнь документы с места лечения, 4. Документы подтверждающие тяжелые материальные обстоятельства.</label><br /><br />

                                  <b>2. ЗАДАТЬ ВОПРОС</b><br />
                                 - вопросы  первоначально обрабатывает аудитор и , при необходимости, перенаправляет нужному специалисту. Ответы на вопросы предоставляются  в течение 5 рабочих дней.<br /><br />
                                  <b>3. ШАБЛОНЫ - </b><br />
                                 - в данном разделе размещены основные  виды   заявлений по кадровым процедурам, оформлению пособий, материальной помощи и др.<br /><br />
                                 <b>4. ИНФОЗАРПЛАТА -</b> расчетные   листы размещаются в данном разделе в течение трех рабочих дней  после выплаты заработной платы,   справки 2 НДФЛ  размещаются  в течение 5 рабочих после выплаты заработной платы. Справки 2 НДФЛ за год  размещаются после сдачи отчетности в налоговую инспекцию , в течение 5 рабочих дней, срок сдачи отчетности до 1 апреля года, следующего за отчетным. Для первичного  входа в  ИнфоЗарплату  необходимо  использовать  в качестве и логина, и пароля серию и номер паспорта ( десять цифр, без пробелов), после первого  входа пароль подлежит обязательно смене.

                            </div>
                        </div>
                        
                    </td>
                </tr>
                <tr>
                    <td colspan="2">
                    <b>Выбор параметров</b>
                            </td>
                        </tr>
                        <tr>
                            <td colspan="2">
                                @Html.ValidationSummary(false)
                                <div id="Error" style="color:Red;display:none;"></div>
                                @Html.HiddenFor(m => m.UserId)
                            </td>
                        </tr>
                        <tr>
                            <td style="width:220px">
                                @Html.LabelFor(m => m.DepartmentName):
                            </td>
                            <td>
                                <label id="DepartmentNameLabel">@Model.DepartmentName</label>
                                <input type="hidden" id="DepartmentName" name="DepartmentName" value="@Model.DepartmentName" />
                                <input type="hidden" id="DepartmentId" name="DepartmentId" value="@Model.DepartmentId" />
                            </td>
                        </tr>
                        <tr>
                            <td colspan="2">
                                <input type="hidden" id="DepartmentReadOnly" name="DepartmentReadOnly" value="@Model.DepartmentReadOnly" />
                                @if (!Model.DepartmentReadOnly)
                                {
                                    <input type="button" value="Выбрать" onclick="changeDepartment();"/>
                                }            
                            </td>
                        </tr>
                         <tr>
                             <td>
                                @Html.LabelFor(m => m.StatusId):
                            </td>
                            <td>
                                @Html.DropDownListFor(model => model.StatusId, new SelectList(Model.Statuses, "ID", "Name")) 
                             </td>
                        </tr>
                          @if (((ReportPrincipal)HttpContext.Current.User).UserRole != UserRole.Employee)
                          {
                            <tr>
                                    <td>
                                        @Html.LabelFor(m => m.UserName):
                                    </td>
                                    <td>
                                        @Html.TextBoxFor(model => model.UserName)
                                    </td>
                             </tr>
                          }
                          <tr>
                                <td>
                                    @Html.LabelFor(m => m.Number):
                                </td>
                                <td>
                                    @Html.TextBoxFor(model => model.Number)
                                </td>
                         </tr>
                         <tr>
                            <td colspan="2">
                                @Html.LabelFor(m => m.BeginDate):
                                @Html.EditorFor(model => model.BeginDate) 
                                @Html.LabelFor(m => m.EndDate):
                                @Html.EditorFor(model => model.EndDate) 
                             </td>
                        </tr>
                        <tr>
                          <td colspan="2">
                            <input type="submit" value="Выбрать"/>
                            <input type="button" value="Очистить" onclick="resetFilter();"/>
                          </td>
                        </tr>
            </table>
        </div>
    </td>
    </tr>
     <tr>
        <td colspan="2">
          <div class="action-wrap">
            <table style="width:100%">
                    <tr>
                            <td>
                                @if ((((ReportPrincipal)HttpContext.Current.User).UserRole == UserRole.Employee) || (((ReportPrincipal)HttpContext.Current.User).UserRole == UserRole.DismissedEmployee))
                                {
                                    <input type="button" value="Создать новую заявку на услугу" onclick="location.href='@Url.Action("ServiceRequestEdit", "Help", new { id = 0 })'"/>   
                                }
                                <input type="hidden" id="IsAddAvailable" name="IsAddAvailable" value="@Model.IsAddAvailable" />
                                @if (Model.IsAddAvailable)
                                {
                                    <input type="button" value="Создать новую заявку на услугу за сотрудника" onclick="location.href='@Url.Action("CreateServiceRequest", "Help")'"/>
                                }                                                                                     
                            </td>
                            @*<td style = "text-align:right">
                                <input type="hidden" id="IsApproveClick" name="IsApproveClick" value="@Model.IsApproveClick" />
                                @if (Model.IsApproveAvailable)
                                {
                                    <input type="submit" value="Записать" onclick="return approveClick();"/>
                                }
                            </td>*@
                   </tr>
              </table>  
           </div>
        </td>
    </tr>   
     <tr>
        <td colspan="2">
            <input type="hidden" id="NotVisibleMessage" name="NotVisibleMessage" value="@Model.NotVisibleMessage" />
            <input type="hidden" id="SortBy" name="SortBy" value="@Model.SortBy" />
            <input type="hidden" id="SortDescending" name="SortDescending" value="@Model.SortDescending" />
            <table class="grid" style="width:100%;border-bottom:0px;border-right:0px">
                <tr>
                     <th>
                        № п/п
                    </th>
                    <th>
                        <div id="sort1" style="min-width:130px"><a href="#" onclick = "SortChanged(1);">ФИО</a></div>
                    </th>
                    <th>
                        <div id="sort2" style="min-width:130px"><a href="#" onclick = "SortChanged(2);">Должность</a></div>
                    </th>
                     <th>
                        <div id="sort3" style="min-width:130px"><a href="#"  onclick = "SortChanged(3);">Руководитель<br/> за сотрудника</a></div>
                    </th>
                    <th>
                        <div id="sort11" style="min-width:130px"><a href="#"  onclick = "SortChanged(11);">Подразделение<br/> 3 уровня</a></div>
                    </th>
                    <th>
                        <div id="sort4"  style="min-width:210px"><a href="#"  onclick = "SortChanged(4);">Подразделение</a></div>
                    </th>
                    <th>
                        <div id="sort5"  style="min-width:70px"><a href="#"  onclick = "SortChanged(5);">Номер<br/> заявки</a></div>
                    </th>
                    <th>
                        <div id="sort6"  style="min-width:70px"><a href="#"  onclick = "SortChanged(6);">Дата<br/> запроса</a></div>
                    </th>                    
                    <th>
                        <div id="sort7"  style="min-width:110px"><a href="#"  onclick = "SortChanged(7);">Дата<br/> выполнения<br/> услуги</a></div>
                    </th>
                    <th>
                        <div id="sort8"  style="min-width:130px"><a href="#"  onclick = "SortChanged(8);">Вид услуги</a></div>
                    </th>
                    <th>
                        <div id="sort12"  style="min-width:130px"><a href="#"  onclick = "SortChanged(12);">Срок<br /> изготовления</a></div>
                    </th>
                    <th>
                        <div id="sort9"  style="min-width:130px"><a href="#"  onclick = "SortChanged(9);">Способ<br/> передачи</a></div>
                    </th>
                    <th>
                        <div id="sort10"  style="min-width:130px"><a href="#"  onclick = "SortChanged(10);">Состояние</a></div>
                    </th>
                </tr>
                @if (Model.Documents != null && Model.Documents.Count > 0)
                {
                    foreach (var doc in Model.Documents)
                    {
                        string color = "white";
                        switch (doc.StatusNumber)
                        {
                            case 2:
                                color = "orange";
                                break;
                            case 3:
                                color = "yellow";
                                break;
                            case 4:
                                color = "LightGreen";
                                break;
                            case 5:
                                color = "green";
                                break;
                            case 6:
                                color = "red";
                                break;
                        }
                        <tr>
                            <td>@doc.Number</td>
                            <td>@doc.UserName</td>
                            <td>@doc.Position</td>
                            <td>@doc.ManagerName</td>
                            <td>@doc.Dep3Name</td>
                            <td>@doc.Dep7Name</td>
                            <td style="text-align:left">
                                <a class="ui-notify-close" href='@Url.Action("ServiceRequestEdit", new { id = doc.Id })' style="cursor:hand">@doc.RequestNumber</a>
                            </td>
                            @*
                            <td>@BaseBl.FormatDate(@doc.CreateDate)</td>                            
                            <td>@BaseBl.FormatDate(@doc.ConfirmWorkDate)</td>
                            *@
                            <td>@doc.CreateDate.ToShortDateString() @doc.CreateDate.ToShortTimeString()</td>                            
                            @if (@doc.ConfirmWorkDate == null)
                            {
                                <td></td>
                            }
                            else
                            {
                                <td>@doc.ConfirmWorkDate.Value.ToShortDateString() @doc.ConfirmWorkDate.Value.ToShortTimeString()</td>
                            }
                            <td>@doc.RequestType</td>
                            <td>@doc.ProdTimeName</td>
                            <td>@doc.RequestTransferType</td>
                            <td style="background-color:@color">
                                @doc.Status
                            </td>
                        </tr>
                    }
                }
            </table>
        </td>
     </tr>
    </table>
}
<script src="@Url.Content("~/Scripts/TableSort.js")" type="text/javascript"></script>
<script type="text/javascript">
    var actionDepUrl = "@Url.Action("GetChildren", "Home")";
    var actionDepDialogUrl = "@Url.Action("DepartmentDialog", "Home")";
    $(document).ready(function () {
        $("#BeginDate").datepicker();
        $("#EndDate").datepicker();
        $(".hasDatepicker").width("75px");
        setSortFields();
        setActiveMenuItem("helpAllRequests");
        $("#accordion").accordion();
        $("#ainfo").click(function(){$("#Info").toggle();});
        if ($("#NotVisibleMessage").val() == 'True'){$("#Info").hide();}
    });
    function resetFilter() {
        $("#BeginDate").val('');
        $("#EndDate").val('');
        if ($("#DepartmentReadOnly").val() == "False") {
            $("#DepartmentId").val('0');
            $("#DepartmentNameLabel").text('');
            $("#DepartmentName").val('');
        }
        //$("#TypeId").val('0');
         $("#StatusId").val('0');
         $("#UserName").val('');
         $("#Number").val('');
    }
</script>

