@model Reports.Presenters.UI.ViewModel.StaffMovementsEditModel
@{
    ViewBag.Title = "Редактирование заявки на перемещение";
    Layout = "~/Views/Shared/_LayoutStaffMovements.cshtml";
    ViewBag.PlaceId = Model.Id;
    ViewBag.PlaceTypeId = (int)Reports.Core.Enum.CommentsPlaceTypes.StaffMovements; 
}
@using (Html.BeginForm("Edit", "StaffMovements", FormMethod.Post, new { enctype = "multipart/form-data" }))
{   
    <div style="display:none">
    @Html.HiddenFor(m=>m.Id)
    @Html.HiddenFor(m => m.RequestType)
    @Html.HiddenFor(m => m.StatusId)
    @Html.HiddenFor(m => m.IsAcceptButtonPressed)
    @Html.HiddenFor(m => m.IsCancelAvailable)
    @Html.HiddenFor(m => m.IsCancelButtonPressed)
    @Html.HiddenFor(m => m.IsChiefAcceptAvailable)
    @Html.HiddenFor(m => m.IsConfirmButtonAvailable)
    @Html.HiddenFor(m => m.IsConfirmButtonPressed)
    @Html.HiddenFor(m => m.IsDepartmentEditable)
    @Html.HiddenFor(m => m.IsDocsAddAvailable)
    @Html.HiddenFor(m => m.IsDocsEditable)
    @Html.HiddenFor(m => m.IsEditable)
    @Html.HiddenFor(m => m.IsManagerEditable)
    @Html.HiddenFor(m => m.IsPersonnelManagerAcceptAvailable)
    @Html.HiddenFor(m => m.IsPersonnelManagerBankAcceptAvailable)
    @Html.HiddenFor(m => m.IsPersonnelManagerEditable)
    @Html.HiddenFor(m => m.IsPositionEditable)
    @Html.HiddenFor(m => m.ISRejectAvailable)
    @Html.HiddenFor(m => m.IsRejectButtonPressed)
    @Html.HiddenFor(m => m.IsRejected)
    @Html.HiddenFor(m => m.IsSaveAvailable)
    @Html.HiddenFor(m => m.IsSourceManagerAcceptAvailable)
    @Html.HiddenFor(m => m.IsStopButtonAvailable)
    @Html.HiddenFor(m => m.IsStopButtonPressed)
    @Html.HiddenFor(m => m.IsTargetManagerAcceptAvailable)
    @Html.HiddenFor(m => m.IsUserAcceptAvailable)
    </div>
    <table style="width:100%">
    <tr>
        <td colspan="2">
          <div class="filter-wrap">
          <h2>@Model.RequestTypes.Where(x => x.Id == Model.RequestType).First().Name</h2>
            <table width="100%">
                <tr>
                    <td colspan="2">
                    @Html.ValidationSummary(false, "")
                    <div id="Error" visible="false" style="color:Red"/>
                    <div id="JSError" visible="false" style="color:Red;display:none;"/>
                    </td>
                </tr> 
                <tr>
                    <td width="200px">@Html.LabelFor(m => m.CreateDate)</td>
                    <td>
                        @Html.HiddenFor(m => m.CreateDate)
                        @Html.DisplayFor(m => m.CreateDate)
                    </td>
                </tr>
                <tr>
                    <td>@Html.LabelFor(m => m.Number)</td>
                    <td>
                        @Html.HiddenFor(m => m.Number)
                        @Html.DisplayFor(m => m.Number)
                    </td>
                </tr>
                <tr>
                    <td>
                        @Html.LabelFor(m => m.TargetDepartmentName):
                    </td>
                    <td>
                        <label id="TargetDepartmentNameLabel">@Model.TargetDepartmentName</label>
                        <input type="hidden" id="TargetDepartmentName" name="TargetDepartmentName" value="@Model.TargetDepartmentName" />
                        <input type="hidden" id="TargetDepartmentId" name="TargetDepartmentId" value="@Model.TargetDepartmentId" />
                        <input type="hidden" id="DepartmentRequiredLevel" name="DepartmentRequiredLevel" value="7" />
                    </td>
                </tr>
                <tr>
                    <td colspan="2">
                        @if (Model.IsDepartmentEditable)
                        {
                            <input type="button" id="SelectDepartmentBtn" value="Выбрать" onclick="changeDepartment(5);"/>
                        }            
                    </td>
                </tr>
                <tr>
                <td>
                @Html.LabelFor(m => m.TargetPositionName)
                </td>
                <td>
                @if (!Model.IsPositionEditable)
                {
                  @Html.HiddenFor(m=>m.TargetPositionId)   
                }
                <select width="300px" name="TargetPositionId" id="TargetPositionId"  @(Model.IsPositionEditable ? "" : "disabled=\"disabled\"")}>
                @if (Model.TargetPositions != null)
                {
                    foreach (var el in Model.TargetPositions)
                    { 
                    <option value="@el.Id">@el.Name</option>
                    }
                }
                </select>
                @Html.HiddenFor(m => m.User.StaffEstablishedPostId)
                </td>
                </tr>
                <tr>
                    <td>
                    @Html.LabelFor(m => m.MovementDate)
                    </td>
                    <td>@Html.EditorFor(m => m.MovementDate, Model.IsEditable ? null : (object)new { disabled = "disabled" })</td>
                </tr>
                <tr>
                    <td>@Html.LabelFor(m => m.MovementReason)</td>
                    <td>@Html.TextBoxFor(m => m.MovementReason, Model.IsEditable ? null : (object)new { disabled = "disabled" })</td>
                </tr>
                <tr class="TempMovingContainer">
                    <td>
                    @Html.LabelFor(m => m.MovementTempTo)
                    </td>
                    <td>@Html.EditorFor(m => m.MovementTempTo, Model.IsEditable ? null : (object)new { disabled = "disabled" })</td>
                </tr>
                <tr class="TempMovingContainer">
                    <td>
                    @Html.LabelFor(m => m.MovementTempReason)
                    </td>
                    <td>@Html.EditorFor(m => m.MovementTempReason, Model.IsEditable ? null : (object)new { disabled = "disabled" })</td>
                </tr>
                <tr>
                <td colspan="2">
                    <div id="tabs" width="100%">
                          <ul>
                            <li><a href="#tabs-1">Данные по переводу</a></li>
                            @if (Model.IsManagerVisible)
                            {
                            <li><a href="#tabs-2">Руководитель</a></li>
                            }
                            @if (Model.IsPersonnelVisible)
                            {
                            <li><a href="#tabs-3">Кадры</a></li>
                            }
                            @if (Model.IsDocsVisible)
                            {
                            <li><a href="#tabs-4">Документы</a></li>
                            }
                          </ul>
                          <div id="tabs-1">
                            <fieldset class="bordered doc-wrap-blue panel" >
                            <legend title='Реквизиты инициатора(автора) заявки' class="bordered">Реквизиты инициатора(автора) заявки</legend>
                            <table>
                                
                                <tr>
                                    <td>@Html.LabelFor(m => m.Creator.Name)</td>
                                    <td>
                                        @Html.HiddenFor(m => m.Creator.Name)
                                        @Html.HiddenFor(m => m.Creator.Id)
                                        @Html.DisplayFor(m => m.Creator.Name)
                                    </td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.Creator.PositionName)</td>
                                    <td>
                                        @Html.HiddenFor(m => m.Creator.PositionName)
                                        @Html.HiddenFor(m => m.Creator.PositionId)
                                        @Html.DisplayFor(m => m.Creator.PositionName)
                                    </td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.Creator.Dep3Name)</td>
                                    <td>
                                        @Html.HiddenFor(m => m.Creator.Dep3Name)
                                        @Html.HiddenFor(m => m.Creator.Dep3Id)
                                        @Html.DisplayFor(m => m.Creator.Dep3Name)
                                    </td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.Creator.Dep7Name)</td>
                                    <td>
                                        @Html.HiddenFor(m => m.Creator.Dep7Name)
                                        @Html.HiddenFor(m => m.Creator.Dep7Id)
                                        @Html.DisplayFor(m => m.Creator.Dep7Name)
                                    </td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.Creator.Chiefs)</td>
                                    <td>
                                        @(Model.Creator.Chiefs != null ? Model.Creator.Chiefs.Aggregate("", (all, next) => all + (all.Length > 0 ? ", " : "") + next) : "")
                                    </td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.Creator.Personnels)</td>
                                    <td>
                                        @(Model.Creator.Personnels != null ? Model.Creator.Personnels.Aggregate("", (all, next) => all + (all.Length > 0 ? ", " : "") + next) : "")
                                    </td>
                                </tr>
                            </table>
                            </fieldset>
                            <fieldset class="bordered doc-wrap-blue panel" >
                            <legend title='Место работы сотрудника в настоящее время' class="bordered">Место работы сотрудника в настоящее время</legend>
                            <table>
                                <tr>
                                    <td>@Html.LabelFor(m => m.User.Name)</td>
                                    <td>
                                        @Html.HiddenFor(m => m.User.Name)
                                        @Html.HiddenFor(m => m.User.Id)
                                        @Html.DisplayFor(m => m.User.Name)
                                    </td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.User.PositionName)</td>
                                    <td>
                                        @Html.HiddenFor(m => m.User.PositionName)
                                        @Html.HiddenFor(m => m.User.PositionId)
                                        @Html.DisplayFor(m => m.User.PositionName)
                                    </td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.User.Dep3Name)</td>
                                    <td>
                                        @Html.HiddenFor(m => m.User.Dep3Name)
                                        @Html.HiddenFor(m => m.User.Dep3Id)
                                        @Html.DisplayFor(m => m.User.Dep3Name)
                                    </td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.User.Dep7Name)</td>
                                    <td>
                                        @Html.HiddenFor(m => m.User.Dep7Name)
                                        @Html.HiddenFor(m => m.User.Dep7Id)
                                        @Html.DisplayFor(m => m.User.Dep7Name)
                                    </td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.User.Chiefs)</td>
                                    <td>
                                        @(Model.User.Chiefs != null ? Model.User.Chiefs.Aggregate("", (all, next) => all + (all.Length > 0 ? ", " : "") + next) : "")
                                    </td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.User.Personnels)</td>
                                    <td>
                                        @(Model.User.Personnels!=null?Model.User.Personnels.Aggregate("", (all, next) => all + (all.Length > 0 ? ", " : "") + next):"")
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2">
                                      @* <div class="portlet">
                                            <div class="portlet-header">@Html.LabelFor(m => m.User.Charges)</div>
                                            <div class="portlet-content">
                                                <table class="grid">
                                                    <thead>
                                                        <tr>
                                                            <th>Надбавка</th>
                                                            <th>Сумма</th>
                                                            <th>%</th>
                                                        </tr>
                                                    <//thead>
                                                    @{ int i = 1; }
                                                    @foreach (var item in Model.User.Charges)
                                                    {
                                                        <tr>
                                                            <td>
                                                                @Html.HiddenFor(m => m.User.Charges[i - 1].Id)
                                                                @Html.HiddenFor(m => m.User.Charges[i - 1].ChargeId)
                                                                @Html.HiddenFor(m => m.User.Charges[i - 1].SEPRequestId)
                                                                @Html.HiddenFor(m => m.User.Charges[i - 1].SEPId)
                                                                @Html.HiddenFor(m => m.User.Charges[i - 1].ChargeName)
                                                                @item.ChargeName
                                                    
                                                            </td>
                                                            <td style="text-align:center;">@Html.TextBoxFor(m => m.User.Charges[i - 1].Amount, new { style = "width:70px;" }) @Html.ValidationMessageFor(m => m.User.Charges[i - 1].Amount)</td>
                                                            <td style="text-align:center;">@Html.TextBoxFor(m => m.User.Charges[i - 1].AmountProc, new { style = "width:70px;" }) @Html.ValidationMessageFor(m => m.User.Charges[i - 1].AmountProc)</td>
                                                        </tr>
                                                        { i++; }
                                                    }
                                                </table>
                                            </div>
                                        </div>*@
                                    </td>
                                </tr>
                            </table>
                            </fieldset>
                          </div>
                          @if (Model.IsManagerVisible)
                          {
                          <div id="tabs-2">
                          <fieldset class="bordered doc-wrap-blue panel">
                          <table>                            
                            <tr>
                                    <td>
                                    <div id="IsTempMovingContainer" class="formfield clear">
                                        
                                        @Html.RadioButtonFor(m => m.IsTempMoving, false, new { @id = "IsTempMovingFalse" })<label for="IsTempMovingFalse" id="lblIsTempMovingFalse" @if (!Model.IsTempMoving)
                                                                                                                                                                  {<text>style="border-color:#248BAD;"</text>}
                                                                                                                                                                  else
                                                                                                                                                                  {<text> style="border-color:none;"</text>}>Постоянно</label>
                                        @Html.RadioButtonFor(m => m.IsTempMoving, true, new { @id = "IsTempMovingTrue" })<label for="IsTempMovingTrue" id="lblIsTempMovingTrue" @if (Model.IsTempMoving)
                                                                                                                                                              {<text>style="border-color:#248BAD;"</text>}
                                                                                                                                                              else
                                                                                                                                                              {<text> style="border-color:none;"</text>}>Временно</label>
                                    </div>
                                    </td>
                                </tr>
                            <tr class="TempMovingContainer">
                                <td>@Html.LabelFor(m => m.MovementCondition)</td>
                                <td>@Html.TextBoxFor(m => m.MovementCondition, Model.IsManagerEditable ? null : (object)new { disabled = "disabled" })</td>
                            </tr>
                            <tr>
                                <td>@Html.LabelFor(m => m.TargetSalary)</td>
                                <td>@Html.TextBoxFor(m => m.TargetSalary, Model.IsManagerEditable ? null : (object)new { disabled = "disabled" })</td>
                            </tr>
                            <tr>
                                <td>@Html.LabelFor(m => m.TargetCasing)</td>
                                <td>@Html.TextBoxFor(m => m.TargetCasing, Model.IsManagerEditable ? null : (object)new { disabled = "disabled" })</td>
                            </tr>
                            <tr>
                                <td>@Html.LabelFor(m => m.AdditionPersonnel)</td>
                                <td><div class="formfield">@Html.TextBoxFor(m => m.AdditionPersonnel, Model.IsManagerEditable ? null : (object)new { disabled = "disabled" })</div>
                                <div class="TempMovingContainer formfield">
                                 @Html.LabelFor(m => m.AdditionPersonnelTo)
                                 @Html.TextBoxFor(m => m.AdditionPersonnelTo, Model.IsManagerEditable ? null : (object)new { disabled = "disabled" })
                                 </div>
                              </td>
                            </tr>
                            <tr>
                                <td>@Html.LabelFor(m => m.AdditionPosition)</td>
                                <td><div class="formfield">@Html.TextBoxFor(m => m.AdditionPosition, Model.IsManagerEditable ? null : (object)new { disabled = "disabled" })</div>
                                <div class="TempMovingContainer formfield">
                                @Html.LabelFor(m => m.AdditionPositionTo)
                                @Html.TextBoxFor(m => m.AdditionPositionTo, Model.IsManagerEditable ? null : (object)new { disabled = "disabled" })
                                </div>
                              </td>
                            </tr>
                            <tr>
                                <td>@Html.LabelFor(m => m.AdditionQuality)</td>
                                <td><div class="formfield">@Html.TextBoxFor(m => m.AdditionQuality, Model.IsManagerEditable ? null : (object)new { disabled = "disabled" })</div>
                                <div class="TempMovingContainer formfield">
                                @Html.LabelFor(m => m.AdditionQualityTo)
                                @Html.TextBoxFor(m => m.AdditionQualityTo, Model.IsManagerEditable ? null : (object)new { disabled = "disabled" })
                                </div>
                                </td>
                            </tr>
                          </table>
                          </fieldset>
                          </div>
                          }
                          @if (Model.IsPersonnelVisible)
                          {
                          <div id="tabs-3">
                             <fieldset class="bordered doc-wrap-blue panel">
                            <table>
                                <tr>
                                    <td> 
                                    <table>
                                        <tr>
                                        <td>@Html.LabelFor(m => m.OrderDate)</td>
                                        <td>@Html.TextBoxFor(m => m.OrderDate, Model.IsPersonnelManagerEditable ? null : (object)new { disabled = "disabled" })</td>
                                        </tr>
                                        <tr>
                                        <td>@Html.LabelFor(m => m.AdditionalAgreementDate)</td>
                                        <td>@Html.TextBoxFor(m => m.AdditionalAgreementDate, Model.IsPersonnelManagerEditable ? null : (object)new { disabled = "disabled" })</td>
                                        </tr>
                                    </table>
                                    </td>
                                    <td>
                                    <table>
                                        <tr>
                                        <td>@Html.LabelFor(m => m.OrderNumber)</td>
                                        <td>@Html.TextBoxFor(m => m.OrderNumber, Model.IsPersonnelManagerEditable ? null : (object)new { disabled = "disabled" })</td>
                                        </tr>
                                        <tr>
                                        <td>@Html.LabelFor(m => m.AdditionalAgreementNumber)</td>
                                        <td>@Html.TextBoxFor(m => m.AdditionalAgreementNumber, Model.IsPersonnelManagerEditable ? null : (object)new { disabled = "disabled" })</td>
                                        </tr>
                                    </table>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                    <div id="IsHourlyContainer" class="formfield clear">
                                        
                                        @Html.RadioButtonFor(m => m.IsHourly, false, new { @id = "IsHourlyFalse" })<label for="IsHourlyFalse" id="lblHourlyFalse" @if (!Model.IsHourly)
                                                                                                                                                                  {<text>style="border-color:#248BAD;"</text>}
                                                                                                                                                                  else
                                                                                                                                                                  {<text> style="border-color:none;"</text>}>Оклад по дням</label>
                                        @Html.RadioButtonFor(m => m.IsHourly, true, new { @id = "IsHourlyTrue" })<label for="IsHourlyTrue" id="lblHourlyTrue" @if (Model.IsHourly)
                                                                                                                                                              {<text>style="border-color:#248BAD;"</text>}
                                                                                                                                                              else
                                                                                                                                                              {<text> style="border-color:none;"</text>}>Оклад по часам</label>
                                    </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.RegionCoefficient)</td>
                                    <td>@Html.TextBoxFor(m => m.RegionCoefficient, Model.IsPersonnelManagerEditable ? null : (object)new { disabled = "disabled" })</td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.AdditionTerritory)</td>
                                    <td>@Html.TextBoxFor(m => m.AdditionTerritory, Model.IsPersonnelManagerEditable ? null : (object)new { disabled = "disabled" })</td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.AdditionTraveling)</td>
                                    <td>@Html.TextBoxFor(m => m.AdditionTraveling, Model.IsPersonnelManagerEditable ? null : (object)new { disabled = "disabled" })</td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.AdditionFront)</td>
                                    <td><div class="formfield">@Html.TextBoxFor(m => m.AdditionFront, Model.IsPersonnelManagerEditable ? null : (object)new { disabled = "disabled" })</div>
                                
                                    <div class="TempMovingContainer formfield">
                                        @Html.LabelFor(m => m.AdditionFrontTo)
                                        @Html.TextBoxFor(m => m.AdditionFrontTo, Model.IsPersonnelManagerEditable ? null : (object)new { disabled = "disabled" })
                                    </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.Grade)</td>
                                    <td>@Html.TextBoxFor(m => m.Grade, Model.IsPersonnelManagerEditable ? null : (object)new { disabled = "disabled" })</td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.HoursType)</td>
                                    <td>@Html.DropDownListFor(m => m.HoursType, new SelectList(Model.HoursTypes, "Id", "Name"), Model.IsPersonnelManagerEditable ? null : (object)new { disabled = "disabled" })</td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.NorthFactor)</td>
                                    <td>
                                       <div class="formfield"> @Html.DropDownListFor(m => m.NorthFactor, new SelectList(Model.NorthFactors, "Id", "Name"), Model.IsPersonnelManagerEditable ? null : (object)new { disabled = "disabled" })</div>
                                        <div id="NorthFactor_2" class = "formfield">
                                            @Html.LabelFor(m => m.NorthFactorOrder)
                                            @Html.DropDownListFor(m => m.NorthFactorOrder, new SelectList(Model.NorthFactorOrders, "Id", "Name"), Model.IsPersonnelManagerEditable ? null : (object)new { disabled = "disabled" })
                                        </div>
                                        <div id="NorthFactor_3" class = "formfield">
                                            @Html.LabelFor(m => m.NorthFactorYear)
                                            @Html.TextBoxFor(m => m.NorthFactorYear)
                                            @Html.LabelFor(m => m.NorthFactorMonth)
                                            @Html.TextBoxFor(m => m.NorthFactorMonth)
                                            @Html.LabelFor(m => m.NorthFactorDay)
                                            @Html.TextBoxFor(m => m.NorthFactorDay)
                                            @Html.LabelFor(m => m.NorthFactorAddition)
                                            @Html.TextBoxFor(m => m.NorthFactorAddition)
                                        </div>
                                     </td>
                                    
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.ChangesToAgreementEnties)</td>
                                    <td>@Html.TextBoxFor(m => m.ChangesToAgreementEnties, Model.IsPersonnelManagerEditable ? null : (object)new { disabled = "disabled" })</td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.ChangesToAgreement)</td>
                                    <td>@Html.TextBoxFor(m => m.ChangesToAgreement, Model.IsPersonnelManagerEditable ? null : (object)new { disabled = "disabled" })</td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.AgreementDate)</td>
                                    <td>@Html.TextBoxFor(m => m.AgreementDate, Model.IsPersonnelManagerEditable ? null : (object)new { disabled = "disabled" })</td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.AdditionalAgreementEnties)</td>
                                    <td>@Html.TextBoxFor(m => m.AdditionalAgreementEnties, Model.IsPersonnelManagerEditable ? null : (object)new { disabled = "disabled" })</td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.MovementReasonOrder)</td>
                                    <td>@Html.TextBoxFor(m => m.MovementReasonOrder, Model.IsPersonnelManagerEditable ? null : (object)new { disabled = "disabled" })</td>
                                </tr>                                
                                <tr>
                                    <td>@Html.LabelFor(m => m.AccessGroup)</td>
                                    <td>@Html.DropDownListFor(m => m.AccessGroup, new SelectList(Model.AccessGroupsList, "Id", "Name"), Model.IsPersonnelManagerEditable ? null : (object)new { disabled = "disabled" })</td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.SignatoryName)</td>
                                    <td>@Html.DropDownListFor(m => m.SignatoryId, new SelectList(Model.SignatoryList, "Id", "Name"), Model.IsPersonnelManagerEditable ? null : (object)new { disabled = "disabled" })</td>
                                </tr>
                            </table>
                            </fieldset>
                          </div>
                          }
                          @if (Model.IsDocsVisible)
                          {
                          <div id="tabs-4">
                          <fieldset class="bordered doc-wrap-blue panel">
                          <table class="grid">
                          <thead>
                              <tr>
                                <th>Название документа</th><th>Образец</th><th>Скан</th><th>Для перевода требуется</th>
                              </tr>
                          </thead>
                          <tr>
                              <td>
                              Заявление о переводе
                              </td>
                              <td><input type="button" value="Печать" /></td>
                              <td>
                                @if (Model.MovementNoteDto != null && !string.IsNullOrEmpty(Model.MovementNoteDto.FileName))
                                {
                                    <a class="ui-notify-close" href='@Url.Action("ViewAttachment", new { Id = Model.MovementNoteAttachmentId })' style="cursor:hand" target="_blank" >@Model.MovementNoteDto.FileName</a>
                                }
                                @if (Model.IsDocsAddAvailable && Model.MovementNoteIsRequired)
                                {
                                    <input type="file" name="MovementNote" />
                                }
                              </td>
                              <td>@Html.CheckBoxFor(m => m.MovementNoteIsRequired, (object)new { disabled = "disabled" })</td>
                            </tr>
                            <tr>
                              <td>
                              Дополнительное соглашение
                              </td>
                              <td><input type="button" value="Печать" /></td>
                              <td>
                               @if (Model.AdditionalAgreementDocDto != null && !string.IsNullOrEmpty(Model.AdditionalAgreementDocDto.FileName))
                               {
                                    <a class="ui-notify-close" href='@Url.Action("ViewAttachment", new { Id = Model.AdditionalAgreementDocAttachmentId })' style="cursor:hand" target="_blank" >@Model.AdditionalAgreementDocDto.FileName</a>
                               }
                                @if (Model.IsDocsAddAvailable && Model.AdditionalAgreementDocIsRequired)
                                {
                                    <input type="file" name="AdditionalAgreementDoc" />                               
                                }
                              </td>
                              <td>@Html.CheckBoxFor(m => m.AdditionalAgreementDocIsRequired, Model.IsPersonnelManagerEditable ? null : (object)new { disabled = "disabled" })</td>
                            </tr>
                            <tr>
                              <td>
                              Приказ о переводе
                              </td>
                              <td><input type="button" value="Печать" /></td>
                              <td>
                                @if (Model.MovementOrderDocDto != null && !string.IsNullOrEmpty(Model.MovementOrderDocDto.FileName))
                                {
                                    <a class="ui-notify-close" href='@Url.Action("ViewAttachment", new { Id = Model.MovementOrderDocAttachmentId })' style="cursor:hand" target="_blank" >@Model.MovementOrderDocDto.FileName</a>
                                }
                                @if (Model.IsDocsAddAvailable && Model.MovementOrderDocIsRequired)
                                {
                                    <input type="file" name="MovementOrderDoc" />
                                }
                              </td>
                              <td>@Html.CheckBoxFor(m => m.MovementOrderDocIsRequired, Model.IsPersonnelManagerEditable ? null : (object)new { disabled = "disabled" })</td>
                            </tr>
                            <tr>
                              <td>
                              Договор мат.ответственность
                              </td>
                              <td><input type="button" value="Печать" /></td>
                              <td>
                                @if (Model.MaterialLiabilityDocDto != null && !string.IsNullOrEmpty(Model.MaterialLiabilityDocDto.FileName))
                                {
                                    <a class="ui-notify-close" href='@Url.Action("ViewAttachment", new { Id = Model.MaterialLiabilityDocAttachmentId })' style="cursor:hand" target="_blank" >@Model.MaterialLiabilityDocDto.FileName</a>
                                }
                                @if (Model.IsDocsAddAvailable && Model.MaterialLiabilityDocIsRequired)
                                {
                                    <input type="file" name="MaterialLiabilityDoc" />
                                }
                              </td>
                              <td>@Html.CheckBoxFor(m => m.MaterialLiabilityDocIsRequired, Model.IsPersonnelManagerEditable ? null : (object)new { disabled = "disabled" })</td>
                          </tr>
                          <tr>
                              <td>
                              Печать порядок по исполнению требований при организации кассовой работы сотрудниками ВСП (Приложение 1)
                              </td>
                              <td><input type="button" value="Печать" /></td>
                              <td>
                                  @if (Model.RequirementsOrderDocDto != null && !string.IsNullOrEmpty(Model.RequirementsOrderDocDto.FileName))
                                  {
                                        <a class="ui-notify-close" href='@Url.Action("ViewAttachment", new { Id = Model.RequirementsOrderDocAttachmentId })' style="cursor:hand" target="_blank" >@Model.RequirementsOrderDocDto.FileName</a>
                                  }
                                  @if (Model.IsDocsAddAvailable && Model.RequirementsOrderDocIsRequired)
                                  {
                                    <input type="file" name="RequirementsOrderDoc" />
                                  }
                              </td>
                              <td>@Html.CheckBoxFor(m => m.RequirementsOrderDocIsRequired, Model.IsPersonnelManagerEditable ? null : (object)new { disabled = "disabled" })</td>
                          </tr>
                          <tr>
                              <td>
                              Печать порядок по обслуживанию клиентов в кассе сотрудниками ВСП (Приложение 2)
                              </td>
                              <td><input type="button" value="Печать" /></td>
                              <td>
                                    @if (Model.ServiceOrderDocDto != null && !string.IsNullOrEmpty(Model.ServiceOrderDocDto.FileName))
                                    {
                                        <a class="ui-notify-close" href='@Url.Action("ViewAttachment", new { Id = Model.ServiceOrderDocAttachmentId })' style="cursor:hand" target="_blank" >@Model.ServiceOrderDocDto.FileName</a>
                                    }
                                    @if (Model.IsDocsAddAvailable && Model.ServiceOrderDocIsRequired)
                                    {
                                        <input type="file" name="ServiceOrderDoc" />
                                    }
                              </td>
                              <td>@Html.CheckBoxFor(m => m.ServiceOrderDocIsRequired, Model.IsPersonnelManagerEditable ? null : (object)new { disabled = "disabled" })</td>
                          </tr>
                          </table>
                          </fieldset>
                          </div>
                          }
                    </div>
                </td>
                </tr>               
        </table>
        </div>                          
      </td>
    </tr>
    <tr>
    <td colspan="2">Согласование:</td>
    </tr>
    <tr>
        <td colspan="2">
            <table>
                <tr>
                    <td>@Html.LabelFor(m => m.SendDate)</td>
                    <td>
                        <input type="checkbox" disabled="disabled" @(Model.SendDate.HasValue ? "checked" : "") />
                        @if (Model.IsUserAcceptAvailable)
                        {
                            <input type="submit"  onclick="return ButtonPressed('Accept');" value="Согласовать" />
                        }
                        @Html.DisplayFor(m => m.SendDate)
                        @Html.DisplayFor(m => m.User.Name)
                    </td>
                </tr>
                @if (Model.RequestType == 2)
                {
                <tr>
                    <td>@Html.LabelFor(m => m.SourceManagerAccept)</td>
                    <td>
                        <input type="checkbox" disabled="disabled" @(Model.SourceManagerAccept.HasValue ? "checked" : "") />
                        @if (Model.IsSourceManagerAcceptAvailable)
                        {
                            <input type="submit"  onclick="return ButtonPressed('Accept');" value="Согласовать" />
                        }
                        @Html.DisplayFor(m => m.SourceManagerAccept)
                        @(Model.SourceManager != null ? Model.SourceManager.Name : "")
                    </td>
                </tr>
                }
                <tr>
                    @if (Model.RequestType != 2)
                    {<td>Руководитель</td> }
                    else
                    {<td>@Html.LabelFor(m => m.TargetManagerAccept)</td>}
                    <td>
                        <input type="checkbox" disabled="disabled" @(Model.TargetManagerAccept.HasValue ? "checked" : "") />
                        @if (Model.IsTargetManagerAcceptAvailable)
                        {
                            <input type="submit"  onclick="return ButtonPressed('Accept');" value="Согласовать" />
                        }
                        @Html.DisplayFor(m => m.TargetManagerAccept)
                        @(Model.TargetManager != null ? Model.TargetManager.Name : "")
                    </td>
                </tr>
                <tr>
                    <td>@Html.LabelFor(m => m.PersonnelManagerBankAccept)</td>
                    <td>
                        <input type="checkbox" disabled="disabled" @(Model.PersonnelManagerBankAccept.HasValue ? "checked" : "") />
                        @if (Model.IsPersonnelManagerBankAcceptAvailable)
                        {
                            <input type="submit"  onclick="return ButtonPressed('Accept');" value="Согласовать" />
                        }
                        @Html.DisplayFor(m => m.PersonnelManagerBankAccept)
                        @(Model.PersonnelManagerBank)
                    </td>
                </tr>
                <tr>
                    <td>@Html.LabelFor(m => m.ChiefAccept)</td>
                    <td>
                        <input type="checkbox" disabled="disabled" @(Model.ChiefAccept.HasValue ? "checked" : "") />
                        @if (Model.IsChiefAcceptAvailable)
                        {
                            <input type="submit"  onclick="return ButtonPressed('Accept');" value="Согласовать" />
                        }
                        @Html.DisplayFor(m => m.ChiefAccept)
                        @(Model.Chief)
                    </td>
                </tr>
                <tr>
                    <td>@Html.LabelFor(m => m.PersonnelManagerAccept)</td>
                    <td>
                        <input type="checkbox" disabled="disabled" @(Model.PersonnelManagerAccept.HasValue ? "checked" : "") />
                        @if (Model.IsPersonnelManagerAcceptAvailable)
                        {
                            <input type="submit"  onclick="return ButtonPressed('Accept');" value="Согласовать" />
                        }
                        @Html.DisplayFor(m => m.PersonnelManagerAccept)
                        @(Model.PersonnelManager)
                    </td>
                </tr>
            </table>
        </td>
    </tr>
    <tr>
        <td colspan="2">
            <div class="action-wrap">
                <table>
                     <tr>
                        <td colspan="2">
                        @if (Model.IsSaveAvailable)
                        {
                            <input type="submit"  onclick="return ValidateForm();" value="Сохранить" />
                        }
                        @if (Model.IsStopButtonAvailable)
                        {
                            <input type="submit"  onclick="return ButtonPressed('Stop');" value="Приостановить согласование" />
                        }
                        @if (Model.IsCancelAvailable)
                        {
                            <input type="submit"  onclick="return ButtonPressed('Cancel');" value="Отменить( вернуть заявку в черновик)" />
                        }
                        @if (Model.ISRejectAvailable)
                        {
                            <input type="submit"  onclick="return ButtonPressed('Reject');" value="Отклонить( заявка будет заблокирована )" />
                        }
                        </td>
                    </tr>
                </table>
            </div> 
        </td>
    </tr> 
    </table>
}
@Html.Partial("~/Views/Info/Comments.cshtml")
<style>
label { font-size:1.1em; }
.field-validation-error
{
    padding:5px;
    background-color: #FADEDE;
     color: #A80707;
        border: 1px solid #D9CACA;
        border-radius: 5px;
        margin:5px;
}
</style>
<script type="text/javascript">
    var actionDepUrl = "@Url.Action("GetChildren", "Home")";
    var actionDepDialogUrl = "@Url.Action("DepartmentDialog", "Home")";
    function ValidateForm()
    {
        var result =true;
          
        clearControlErrors($("#TargteDepartmentId"));
        clearControlErrors($("#JSError"));
        $.ajax({
              type: 'POST',
              url: "/StaffMovements/CheckMovementDate",
              data: { date : $('#MovementDate').val(), UserId: $('#User_Id').val()},
              success: function (data) {
                    console.log(data);
                    if(!data.result)
                    { console.log('lol');result=false; addControlError($("#JSError"),'На данную дату существуюет другая заявка.'); }                    
                },
              async:false
            });    
            console.log('kuku');
        console.log(result);  
        if($("#TargteDepartmentId").val() == 0)
        {
            addControlError($("#SelectDepartmentBtn"),'Необходимо выбрать структурное подразделение');
            result = false;
        }
        clearControlErrors($("#TargtePositionId"));
        if($("#TargtePositionId").val() == 0)
        {
            addControlError($("#TargtePositionId"),'Необходимо выбрать должность');
            result = false;
        }
        
        @if (Model.IsManagerEditable)
        {<text>
            clearControlErrors($("#MovementDate"));
            if($("#MovementDate").val() == '')
            {
                addControlError($("#MovementDate"),'Необходимо выбрать дату перевода');
                addControlError($("#JSError"),'Необходимо выбрать дату перевода');
                result = false;
            }
            clearControlErrors($("#MovementCondition"));
            if($("#MovementCondition").val() == '' && $("IsTempMoving").val()==false)
            {
                addControlError($("#MovementCondition"),'Необходимо заполнить условие перевода');
                addControlError($("#JSError"),'Необходимо заполнить условие перевода');
                result = false;
            }
            clearControlErrors($("#TargetSalary"));
            if($("#TargetSalary").val() == '')
            {
                addControlError($("#TargetSalary"),'Необходимо заполнить ставку');
                addControlError($("#JSError"),'Необходимо заполнить ставку');
                result = false;
            }
            clearControlErrors($("#TargetCasing"));
            if($("#TargetCasing").val() == '')
            {
                addControlError($("#TargetCasing"),'Необходимо заполнить оклад');
                addControlError($("#JSError"),'Необходимо заполнить оклад');
                result = false;
            }
           /*clearControlErrors($("#AdditionPersonnel"));
            if($("#AdditionPersonnel").val() == '')
            {
                addControlError($("#AdditionPersonnel"),'Необходимо заполнить персональную надбавку');
                addControlError($("#JSError"),'Необходимо заполнить персональную надбавку');
                result = false;
            }*/
        </text>
        }
        @if (Model.IsPersonnelManagerEditable)
        {<text>
            clearControlErrors($("#OrderDate"));
            if($("#OrderDate").val() == '')
            {
                addControlError($("#OrderDate"),'Необходимо заполнить дату приказа о переводе');
                addControlError($("#JSError"),'Необходимо заполнить дату приказа о переводе');
                result = false;
            }
            clearControlErrors($("#AdditionalAgreementDate"));
            if($("#AdditionalAgreementDate").val() == '')
            {
                addControlError($("#AdditionalAgreementDate"),'Необходимо заполнить дату дополнительного соглашения');
                addControlError($("#JSError"),'Необходимо заполнить дату дополнительного соглашения');
                result = false;
            }
            clearControlErrors($("#OrderNumber"));
            if($("#OrderNumber").val() == '')
            {
                addControlError($("#OrderNumber"),'Необходимо заполнить номер приказа');
                addControlError($("#JSError"),'Необходимо заполнить номер приказа');
                result = false;
            }
            clearControlErrors($("#AdditionalAgreementNumber"));
            if($("#AdditionalAgreementNumber").val() == '')
            {
                addControlError($("#AdditionalAgreementNumber"),'Необходимо заполнить номер доп. соглашения');
                addControlError($("#JSError"),'Необходимо заполнить номер доп. соглашения');
                result = false;
            }
            clearControlErrors($("#RegionCoefficient"));
            if($("#RegionCoefficient").val() == '')
            {
                addControlError($("#RegionCoefficient"),'Необходимо заполнить региональный коэффициент');
                addControlError($("#JSError"),'Необходимо заполнить региональный коэффициент');
                result = false;
            }
            clearControlErrors($("#AdditionTerritory"));
            if($("#AdditionTerritory").val() == '')
            {
                addControlError($("#AdditionTerritory"),'Необходимо заполнить территориальную надбавку');
                addControlError($("#JSError"),'Необходимо заполнить территориальную надбавку');
                result = false;
            }
            clearControlErrors($("#AdditionTraveling"));
            if($("#AdditionTraveling").val() == '')
            {
                addControlError($("#AdditionTraveling"),'Необходимо заполнить надбавку за разъездной характер работы');
                addControlError($("#JSError"),'Необходимо заполнить надбавку за разъездной характер работы');
                result = false;
            }
            clearControlErrors($("#AdditionFront"));
            if($("#AdditionFront").val() == '')
            {
                addControlError($("#AdditionFront"),'Необходимо заполнить надбавку за стаж работы специалистом фронт-офиса');
                addControlError($("#JSError"),'Необходимо заполнить надбавку за стаж работы специалистом фронт-офиса');
                result = false;
            }
            clearControlErrors($("#Grade"));
            if($("#Grade").val() == '')
            {
                addControlError($("#Grade"),'Необходимо заполнить грейд');
                addControlError($("#JSError"),'Необходимо заполнить грейд');
                result = false;
            }
            clearControlErrors($("#HoursType"));
            if($("#HoursType").val() == '' || $("#HoursType").val() ==0)
            {
                addControlError($("#HoursType"),'Необходимо заполнить график работы');
                addControlError($("#JSError"),'Необходимо заполнить график работы');
                result = false;
            }
            clearControlErrors($("#NorthFactor"));
            if($("#NorthFactor").val() == '' || $("#NorthFactor").val() ==0)
            {
                addControlError($("#NorthFactor"),'Необходимо заполнить северный стаж');
                addControlError($("#JSError"),'Необходимо заполнить северный стаж');
                result = false;
            }
            clearControlErrors($("#ChangesToAgreementEnties"));
            if($("#ChangesToAgreementEnties").val() == '' )
            {
                addControlError($("#ChangesToAgreementEnties"),'Необходимо заполнить Пункты Дополнительного соглашения');
                addControlError($("#JSError"),'Необходимо заполнить Пункты Дополнительного соглашения');
                result = false;
            }
            clearControlErrors($("#ChangesToAgreement"));
            if($("#ChangesToAgreement").val() == '' )
            {
                addControlError($("#ChangesToAgreement"),'Необходимо заполнить Внести изменения в пункты ТД');
                addControlError($("#JSError"),'Необходимо заполнить Внести изменения в пункты ТД');
                result = false;
            }
            clearControlErrors($("#AgreementDate"));
            if($("#AgreementDate").val() == '' )
            {
                addControlError($("#AgreementDate"),'Необходимо заполнить Дату ТД');
                addControlError($("#JSError"),'Необходимо заполнить дату ТД');
                result = false;
            }
            clearControlErrors($("#AdditionalAgreementEnties"));
            if($("#AdditionalAgreementEnties").val() == '' )
            {
                addControlError($("#AdditionalAgreementEnties"),'Необходимо заполнить Пункты Дополнительного соглашения');
                addControlError($("#JSError"),'Необходимо заполнить Пункты Дополнительного соглашения');
                result = false;
            }
            clearControlErrors($("#MovementReasonOrder"));
            if($("#MovementReasonOrder").val() == '' )
            {
                addControlError($("#MovementReasonOrder"),'Необходимо заполнить Основание для приказа о переводе');
                addControlError($("#JSError"),'Необходимо заполнить Основание для приказа о переводе');
                result = false;
            }
            clearControlErrors($("#AccessGroup"));
            if($("#AccessGroup").val() == '' || $("#AccessGroup").val() ==0)
            {
                addControlError($("#AccessGroup"),'Необходимо заполнить группу доступа');
                addControlError($("#JSError"),'Необходимо заполнить группу доступа');
                result = false;
            }
            clearControlErrors($("#SignatoryId"));
            if($("#SignatoryId").val() == '' || $("#SignatoryId").val() ==0)
            {
                addControlError($("#SignatoryId"),'Необходимо выбрать подписанта');
                addControlError($("#JSError"),'Необходимо выбрать подписанта');
                result = false;
            }
        </text>
        }
        return result;
    }
    function ButtonPressed(name)
    {
        var validateResult = ValidateForm();
        if(!validateResult) return false;
        $('#Is'+name+'ButtonPressed').val(true);
        return true;
    }
    function setOptionsToDropdown(controlName,data)
    {
        var optionsValues = '';
        optionsValues += '<option value="0"></option>';
        $.each(data, function (item, data) {
            optionsValues += '<option value="' + data.Id + '">' + data.Name + '</option>';
        })
        optionsValues += '';
        var options = $('#' + controlName );
        options.children().remove();
        options.append(optionsValues);
    }
    function ConfigureFields()
    {
        $("#MovementDate, #AdditionFrontTo, #AdditionQualityTo, #AdditionPositionTo, #AdditionPersonnelTo,  #MovementTempTo, #AdditionalAgreementDate, #OrderDate, #AgreementDate").datepicker({changeMonth: true, changeYear: true});
        $('#IsHourlyContainer').buttonset();
        $('#IsTempMovingContainer').buttonset();
        $(':button, :input[type=button], :input[type=submit]').button();
        $(':input[type=text]').addClass("widget");
        $("#IsTempMovingTrue").click(function(){
            $("#lblIsTempMovingTrue").css("border-color", "#248BAD");
            $("#lblIsTempMovingFalse").css("border-color", "silver");
            $(".TempMovingContainer").show("highlight");
        });
        $("#IsTempMovingFalse").click(function(){
            $("#lblIsTempMovingTrue").css("border-color", "silver");
            $("#lblIsTempMovingFalse").css("border-color", "#248BAD");
            $(".TempMovingContainer").hide();
        });
        $("#IsHourlyTrue").click(function(){
            $("#lblHourlyTrue").css("border-color", "#248BAD");
            $("#lblHourlyFalse").css("border-color", "silver");
        });
        $("#IsHourlyFalse").click(function(){
            $("#lblHourlyTrue").css("border-color", "silver");
            $("#lblHourlyFalse").css("border-color", "#248BAD");
        });
        $("#NorthFactor").change(function()
        {
            $("[id^='NorthFactor_']").hide();
            if($("#NorthFactor").val()==2)
                $("#NorthFactor_2").show("highlight");
            if($("#NorthFactor").val()==3)
            {
                $("#NorthFactor_2").show("highlight");
                $("#NorthFactor_3").show("highlight");
            }
        });
        $("#TargetDepartmentId").change(function ()
        {
            var url = "/StaffMovements/GetPositionsForDepartment/"+$("#TargetDepartmentId").val();
            $.getJSON(url,
                function (result) {
                    setOptionsToDropdown("TargetPositionId", result);                    
                });
        });
        if(@(Model.IsTempMoving?"true":"false"))
        {
            $(".TempMovingContainer").show();
        }
        else
        {
            $(".TempMovingContainer").hide();
        }
        $("#NorthFactor").change();
       var tabs= $("#tabs").tabs();
        tabs.find( ".ui-tabs-nav" ).sortable({
                      axis: "x",
                      stop: function() {
                        tabs.tabs( "refresh" );
                      }
                    });
        $(".portlet")
            .addClass("ui-widget ui-widget-content ui-helper-clearfix ui-corner-all")
            .find(".portlet-header")
            .addClass("ui-state-default ui-corner-all")
            .prepend("<span class='ui-icon ui-icon-minusthick portlet-toggle'></span>");

        $(".portlet-toggle").click(function () {
            var icon = $(this);
            icon.toggleClass("ui-icon-minusthick ui-icon-plusthick");
            icon.closest(".portlet").find(".portlet-content").toggle();
        });
    }
    $(document).ready(function () {
        setActiveMenuItem("StaffMovements");
        ConfigureFields();
    });
</script>


