@model Reports.Presenters.UI.ViewModel.StaffMovementsEditModel
@using Reports.Presenters.Services.Impl
@using Reports.Core
@using WebMvc.Helpers
@{
    ViewBag.Title = "Редактирование заявки на перемещение";
    Layout = "~/Views/Shared/_LayoutStaffMovements.cshtml";
    ViewBag.PlaceId = Model.Id;
    ViewBag.PlaceTypeId = (int)Reports.Core.Enum.CommentsPlaceTypes.StaffMovements;
    DateTime NextDay = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
    var dto =  UserDto.Deserialize(((FormsIdentity)(HttpContext.Current.User.Identity)).Ticket.UserData);
}
<div id="DivErrorsDialog" style="display:none;">
        <div>При сохранении заявки произошли ошибки.</div>
        <div id="JSError2" style="color:Red;"></div>
    </div>
<div id="DivEmal" style="display:none;">
        <table>
            <tr>
                <td>Кому:</td>
                <td>@Html.DropDownListFor(m => m.ToUserId, new SelectList(Model.UsersTo, "Id", "Name"))</td>
            </tr>
            <tr>
                <td>Тема</td>
                <td>@Html.TextBoxFor(m => m.Subject, new { style = "width:600px" })</td>
            </tr>
            <tr>
                <td>Сообщение:</td>
                <td>@Html.TextAreaFor(m => m.EmailMessage, new { style = "width:600px", cols = "60", wrap = "soft" })</td>
            </tr>
        </table>
    </div>
@using (Html.BeginForm("Edit", "StaffMovements", FormMethod.Post, new { enctype = "multipart/form-data" }))
{   
    <div style="display:none">
    <input type="hidden" id="Guid" name="Guid" value="@Model.Guid" />
    @Html.HiddenFor(m=>m.Id)
    @Html.HiddenFor(m => m.RequestType)
    @Html.HiddenFor(m => m.StatusId)
    @Html.HiddenFor(m => m.IsAcceptButtonPressed)
    @Html.HiddenFor(m => m.IsCancelAvailable)
    @Html.HiddenFor(m => m.IsCancelButtonPressed)
    @Html.HiddenFor(m => m.IsChiefAcceptAvailable)
    @Html.HiddenFor(m => m.IsConfirmButtonAvailable)
    @Html.HiddenFor(m => m.IsConfirmButtonPressed)
    @Html.HiddenFor(m => m.IsDepartmentEditable)
    @Html.HiddenFor(m => m.IsDocsAddAvailable)
    @Html.HiddenFor(m => m.IsDocsEditable)
    @Html.HiddenFor(m => m.IsManagerEditable)
    @Html.HiddenFor(m => m.IsPersonnelManagerAcceptAvailable)
    @Html.HiddenFor(m => m.IsPersonnelManagerBankAcceptAvailable)
    @Html.HiddenFor(m => m.IsPersonnelManagerEditable)
    @Html.HiddenFor(m => m.IsPositionEditable)
    @Html.HiddenFor(m => m.ISRejectAvailable)
    @Html.HiddenFor(m => m.IsRejectButtonPressed)
    @Html.HiddenFor(m => m.IsRejected)
    @Html.HiddenFor(m => m.IsSaveAvailable)
    @Html.HiddenFor(m => m.IsSourceManagerAcceptAvailable)
    @Html.HiddenFor(m => m.IsStopButtonAvailable)
    @Html.HiddenFor(m => m.IsStopButtonPressed)
    @Html.HiddenFor(m => m.IsTargetManagerAcceptAvailable)
    @Html.HiddenFor(m => m.IsUserAcceptAvailable)
    @Html.HiddenFor(m => m.Creator.Id)
    <div id="DivIndicator" style="display:none;">
        <table>
            <tr>
                <td><span id="LoadingIndicator2"></span></td>
                <td><label>Идет загрузка данных...</label></td>
            </tr>
        </table>
    </div>
    </div>
    <table style="width:100%">
    <tr>
        <td colspan="2">
          <div class="filter-wrap">
          <h2>@Model.RequestTypes.Where(x => x.Id == Model.RequestType).First().Name</h2>
          @switch (Model.RequestType)
          {
              case 1:
                    <b>Заявкой на изменение надбавок можно изменить: Срок занятости, Вид занятости, Ставку, График работы, Личную надбавку</b>
                  break;
              case 2:
                    <b>Заявкой на перевод в другое подразделение можно изменить: Подразделение, Должность, Срок занятости, Вид занятости, Ставку, График работы, Личную надбавку</b>
                  break;
              case 3:
                    <b>Заявкой на перевод внутри подразделения можно изменить: Должность, Срок занятости, Вид занятости, Ставку, График работы, Личную надбавку</b>
                  break;
          }
          @if (Model.IsRequestBad)
          {
          <h3 style="color:Red">Редактирование заявки в прошлом периоде невозможно</h3>}
            <table width="100%">
                <tr>
                    <td colspan="2">
                    @Html.ValidationSummary(false, "")
                    <div id="Error" visible="false" style="color:Red"/>
                    <div id="JSError" visible="false" style="color:Red;display:none;"/>
                    </td>
                </tr> 
                <tr>
                    <td width="200px">@Html.LabelFor(m => m.CreateDate)</td>
                    <td>
                        @Html.HiddenFor(m => m.CreateDate)
                        @Html.DisplayFor(m => m.CreateDate)
                    </td>
                </tr>
                <tr>
                    <td>@Html.LabelFor(m => m.Number)</td>
                    <td>
                        @Html.HiddenFor(m => m.Number)
                        @Html.DisplayFor(m => m.Number)
                    </td>
                </tr>
                <tr>
                    <td>
                        @Html.LabelFor(m => m.TargetDepartmentName):
                    </td>
                    <td>
                        <label id="TargetDepartmentNameLabel">@Model.TargetDepartmentName</label>
                        <input type="hidden" id="TargetDepartmentName" name="TargetDepartmentName" value="@Model.TargetDepartmentName" />
                        <input type="hidden" id="TargetDepartmentId" name="TargetDepartmentId" value="@Model.TargetDepartmentId" />
                        <input type="hidden" id="DepartmentRequiredLevel" name="DepartmentRequiredLevel" value="7" />
                    </td>
                </tr>
                <tr>
                    <td colspan="2">
                        @if (Model.IsDepartmentEditable)
                        {
                            <input type="button" id="SelectDepartmentBtn" value="Выбрать" onclick="changeDepartment(5);"/>
                        }            
                    </td>
                </tr>
                <tr>
                <td>
                @Html.LabelFor(m => m.TargetPositionName)
                </td>
                <td>
                @if (!Model.IsPositionEditable)
                {
                  @Html.HiddenFor(m => m.TargetPositionId)   
                  @Html.HiddenFor(m => m.UserLinkId)  
                }
                <select width="300px" name="UserLinkId" id="UserLinkId"  @(Model.IsPositionEditable ? "" : "disabled=\"disabled\"")}>
                @if (Model.UserLinks != null)
                {
                    foreach (var el in Model.UserLinks)
                    { 
                    <option value="@el.Id" @(Model.UserLinkId == el.Id ? "selected" : "")>@el.Name</option>
                    }
                }
                </select> <span id="vacationCount"></span>
                @Html.HiddenFor(m => m.User.StaffEstablishedPostId)
                </td>
                </tr>
                <tr>
                    <td>
                    @Html.LabelFor(m => m.MovementDate)
                    </td>
                    <td>@Html.EditorFor(m => m.MovementDate, (Model.StatusId <= 1 || Model.IsPersonnelManagerBankAcceptAvailable || Model.IsManagerEditable || Model.IsPersonnelManagerEditable) ? null : (object)new { disabled = "disabled" })</td>
                </tr>         
                
                <tr>
                <td colspan="2">
                    <div id="tabs" width="100%">
                          <ul>
                            <li><a href="#tabs-1">Данные по переводу</a></li>
                            @if (Model.IsManagerVisible)
                            {
                            <li><a href="#tabs-2">Данные заявки</a></li>
                            }                            
                            @if (Model.IsDocsVisible && Model.RequestType != 1)
                            {
                            <li><a href="#tabs-4">Документы</a></li>
                            }
                          </ul>
                          <div id="tabs-1">
                          @if (Model.SourceManager != null)
                          {
                            <fieldset class="bordered doc-wrap-blue panel" >
                            <legend title='Реквизиты руководителя' class="bordered">Реквизиты @(Model.RequestType == 2 ? "отпускающего" : "") руководителя</legend>
                            <table>
                                
                                <tr>
                                    <td>ФИО @(Model.RequestType == 2 ? "отпускающего" : "") руководителя</td>
                                    <td>
                                        @Html.HiddenFor(m => m.SourceManager.Name)
                                        @Html.HiddenFor(m => m.SourceManager.Id)
                                        @Html.DisplayFor(m => m.SourceManager.Name)
                                    </td>
                                </tr>
                                <tr>
                                    <td>Должность @(Model.RequestType == 2 ? "отпускающего" : "") руководителя</td>
                                    <td>
                                        @Html.HiddenFor(m => m.SourceManager.PositionName)
                                        @Html.HiddenFor(m => m.SourceManager.PositionId)
                                        @Html.DisplayFor(m => m.SourceManager.PositionName)
                                    </td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.SourceManager.Dep3Name)</td>
                                    <td>
                                        @Html.HiddenFor(m => m.SourceManager.Dep3Name)
                                        @Html.HiddenFor(m => m.SourceManager.Dep3Id)
                                        @Html.DisplayFor(m => m.SourceManager.Dep3Name)
                                    </td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.SourceManager.Dep7Name)</td>
                                    <td>
                                        @Html.HiddenFor(m => m.SourceManager.Dep7Name)
                                        @Html.HiddenFor(m => m.SourceManager.Dep7Id)
                                        @Html.DisplayFor(m => m.SourceManager.Dep7Name)
                                    </td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.SourceManager.Managers)</td>
                                    <td>
                                        @(Model.SourceManager.Managers != null ? Model.SourceManager.Managers.Aggregate("", (all, next) => all + (all.Length > 0 ? ", " : "") + next) : "")
                                    </td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.SourceManager.Chiefs)</td>
                                    <td>
                                        @(Model.SourceManager.Chiefs != null ? Model.SourceManager.Chiefs.Aggregate("", (all, next) => all + (all.Length > 0 ? ", " : "") + next) : "")
                                    </td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.SourceManager.Personnels)</td>
                                    <td>
                                        @(Model.SourceManager.Personnels != null ? Model.SourceManager.Personnels.Aggregate("", (all, next) => all + (all.Length > 0 ? ", " : "") + next) : "")
                                    </td>
                                </tr>
                            </table>
                            </fieldset>
                          }
                            @if (Model.RequestType == 2 && Model.TargetManager != null)
                            {
                            <fieldset class="bordered doc-wrap-blue panel" >
                            <legend title='Реквизиты принимающего руководителя' class="bordered">Реквизиты принимающего руководителя</legend>
                            <table>
                                
                                <tr>
                                    <td>ФИО принимающего руководителя</td>
                                    <td>
                                        @Html.HiddenFor(m => m.TargetManager.Name)
                                        @Html.HiddenFor(m => m.TargetManager.Id)
                                        @Html.DisplayFor(m => m.TargetManager.Name)
                                    </td>
                                </tr>
                                <tr>
                                    <td>Должность принимающего руководителя</td>
                                    <td>
                                        @Html.HiddenFor(m => m.TargetManager.PositionName)
                                        @Html.HiddenFor(m => m.TargetManager.PositionId)
                                        @Html.DisplayFor(m => m.TargetManager.PositionName)
                                    </td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.TargetManager.Dep3Name)</td>
                                    <td>
                                        @Html.HiddenFor(m => m.TargetManager.Dep3Name)
                                        @Html.HiddenFor(m => m.TargetManager.Dep3Id)
                                        @Html.DisplayFor(m => m.TargetManager.Dep3Name)
                                    </td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.TargetManager.Dep7Name)</td>
                                    <td>
                                        @Html.HiddenFor(m => m.TargetManager.Dep7Name)
                                        @Html.HiddenFor(m => m.TargetManager.Dep7Id)
                                        @Html.DisplayFor(m => m.TargetManager.Dep7Name)
                                    </td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.TargetManager.Managers)</td>
                                    <td>
                                        @(Model.TargetManager.Managers != null ? Model.TargetManager.Managers.Aggregate("", (all, next) => all + (all.Length > 0 ? ", " : "") + next) : "")
                                    </td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.TargetManager.Chiefs)</td>
                                    <td>
                                        @(Model.TargetManager.Chiefs != null ? Model.TargetManager.Chiefs.Aggregate("", (all, next) => all + (all.Length > 0 ? ", " : "") + next) : "")
                                    </td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.TargetManager.Personnels)</td>
                                    <td>
                                        @(Model.TargetManager.Personnels != null ? Model.TargetManager.Personnels.Aggregate("", (all, next) => all + (all.Length > 0 ? ", " : "") + next) : "")
                                    </td>
                                </tr>
                            </table>
                            </fieldset>
                            }
                            <fieldset class="bordered doc-wrap-blue panel" >
                            <legend title='Место работы сотрудника в настоящее время' class="bordered">Место работы сотрудника в настоящее время</legend>
                            <table>
                                <tr>
                                    <td>@Html.LabelFor(m => m.User.Name)</td>
                                    <td>
                                        @Html.HiddenFor(m => m.User.Name)
                                        @Html.HiddenFor(m => m.User.Id)
                                        @Html.DisplayFor(m => m.User.Name)
                                    </td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.User.PositionName)</td>
                                    <td>
                                        @Html.HiddenFor(m => m.User.PositionName)
                                        @Html.HiddenFor(m => m.User.PositionId)
                                        @Html.DisplayFor(m => m.User.PositionName)
                                    </td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.User.Dep3Name)</td>
                                    <td>
                                        @Html.HiddenFor(m => m.User.Dep3Name)
                                        @Html.HiddenFor(m => m.User.Dep3Id)
                                        @Html.DisplayFor(m => m.User.Dep3Name)
                                    </td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.User.Dep7Name)</td>
                                    <td>
                                        @Html.HiddenFor(m => m.User.Dep7Name)
                                        @Html.HiddenFor(m => m.User.Dep7Id)
                                        @Html.DisplayFor(m => m.User.Dep7Name)
                                    </td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.User.Managers)</td>
                                    <td>
                                        @(Model.User.Managers != null ? Model.User.Managers.Aggregate("", (all, next) => all + (all.Length > 0 ? ", " : "") + next) : "")
                                    </td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.User.Chiefs)</td>
                                    <td>
                                        @(Model.User.Chiefs != null ? Model.User.Chiefs.Aggregate("", (all, next) => all + (all.Length > 0 ? ", " : "") + next) : "")
                                    </td>
                                </tr>
                                <tr>
                                    <td>@Html.LabelFor(m => m.User.Personnels)</td>
                                    <td>
                                        @(Model.User.Personnels != null ? Model.User.Personnels.Aggregate("", (all, next) => all + (all.Length > 0 ? ", " : "") + next) : "")
                                    </td>
                                </tr>
                                <tr>
                                <td>Оклад:</td>
                                <td>@Model.Casing</td>
                                </tr>
                                <tr>
                                <td>Ставка:</td>
                                <td>@Model.Salary</td>
                                </tr>
                                <tr>
                                <td>Районный коэффициент:</td>
                                <td>@Model.RegionCoefficient</td>
                                </tr>
                                <tr>
                                    <td colspan="2">
                                      <table class="grid">
                                      <thead>
                                        <tr>
                                            <th>Надбавка</th><th>Значение</th>
                                        </tr>
                                      </thead>
                                      <tbody>
                                      @for (int i = 0; i < Model.ActiveAdditions.Count; i++)
                                      {
                                          <tr>
                                            <td>@Model.ActiveAdditions[i].Type.Name)
                                            </td>
                                            <td>@Model.ActiveAdditions[i].Value</td>
                                          </tr>
                                      }
                                      </tbody>
                                      </table>
                                    </td>
                                </tr>
                                <tr>
                                <td>Итого:</td>
                                <td>@Model.TotalSalary</td>
                                </tr>
                            </table>
                            </fieldset>
                          </div>
                          @if (Model.IsManagerVisible)
                          {
                          <div id="tabs-2">
                          <fieldset class="bordered doc-wrap-blue panel">
                          <table>            
                           <tr>
                            <td>@Html.LabelFor(m => m.TargetCasing)</td>
                            <td>@Html.TextBoxFor(m => m.TargetCasing, new { disabled = "disabled" })</td>
                           </tr> 
                           <tr>
                            <td>@Html.LabelFor(m => m.TargetRegion)</td>
                            <td>@Html.TextBoxFor(m => m.TargetRegion, new { disabled = "disabled" })</td>
                           </tr>               
                            <tr>
                                <td>Срок занятости:</td>
                                    <td>
                                    <div id="IsTempMovingContainer" class="formfield clear">
                                        
                                        @Html.RadioButtonFor(m => m.IsTempMoving, false, new { @id = "IsTempMovingFalse" })<label for="IsTempMovingFalse" id="lblIsTempMovingFalse" @if (!Model.IsTempMoving)
                                                                                                                                                                                    {<text>style="border-color:#248BAD;"</text>}
                                                                                                                                                                                    else
                                                                                                                                                                                    {<text> style="border-color:none;"</text>}>Постоянно</label>
                                        @Html.RadioButtonFor(m => m.IsTempMoving, true, new { @id = "IsTempMovingTrue" })<label for="IsTempMovingTrue" id="lblIsTempMovingTrue" @if (Model.IsTempMoving)
                                                                                                                                                                                {<text>style="border-color:#248BAD;"</text>}
                                                                                                                                                                                else
                                                                                                                                                                                {<text> style="border-color:none;"</text>}>Временно</label>
                                    </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>Вид занятости:</td>
                                    <td>
                                    <div id="ConjunctionContainer" class="formfield clear">
                                        
                                        @Html.RadioButtonFor(m => m.Conjunction, false, new { @id = "IsConjunctionFalse" })<label for="IsConjunctionFalse" id="lblIsConjunctionFalse" @if (!Model.Conjunction)
                                                                                                                                                                                      {<text>style="border-color:#248BAD;"</text>}
                                                                                                                                                                                      else
                                                                                                                                                                                      {<text> style="border-color:none;"</text>}>Основная</label>
                                        @Html.RadioButtonFor(m => m.Conjunction, true, new { @id = "IsConjunctionTrue" })<label for="IsConjunctionTrue" id="lblIsConjunctionTrue" @if (Model.Conjunction)
                                                                                                                                                                                  {<text>style="border-color:#248BAD;"</text>}
                                                                                                                                                                                  else
                                                                                                                                                                                  {<text> style="border-color:none;"</text>}>По совместительству</label>
                                    </div>
                                    </td>
                                </tr>
                            <tr class="TempMovingContainer">
                                <td>
                                @Html.LabelFor(m => m.MovementTempTo)
                                </td>
                                <td>@Html.EditorFor(m => m.MovementTempTo, Model.IsManagerEditable || Model.IsPersonnelManagerEditable ? null : (object)new { disabled = "disabled" })</td>
                            </tr>                            
                            <tr>
                                <td>@Html.LabelFor(m => m.MovementCondition)</td>
                                <td>@Html.TextBoxFor(m => m.MovementCondition, Model.IsManagerEditable || Model.IsPersonnelManagerEditable ? null : (object)new { disabled = "disabled" })</td>
                            </tr>
                            @if ((dto.UserRole & (UserRole.PersonnelManager)) > 0)
                            {
                            <tr>
                                    <td>Условия оплаты:</td>
                                    <td>
                                    <div id="IsHourlyContainer" class="formfield clear">
                                        
                                        @Html.RadioButtonFor(m => m.TargetCasingType, false, new { @id = "IsHourlyFalse" })<label for="IsHourlyFalse" id="lblHourlyFalse" @if (!Model.TargetCasingType)
                                                                                                                                                                          {<text>style="border-color:#248BAD;"</text>}
                                                                                                                                                                          else
                                                                                                                                                                          {<text> style="border-color:none;"</text>}>Оклад по дням</label>
                                        @Html.RadioButtonFor(m => m.TargetCasingType, true, new { @id = "IsHourlyTrue" })<label for="IsHourlyTrue" id="lblHourlyTrue" @if (Model.TargetCasingType)
                                                                                                                                                                      {<text>style="border-color:#248BAD;"</text>}
                                                                                                                                                                      else
                                                                                                                                                                      {<text> style="border-color:none;"</text>}>Оклад по часам</label>
                                    </div>
                                    </td>
                                </tr>
                            }
                            else
                            {
                                @Html.HiddenFor(m => m.TargetCasingType)
                            }
                                <tr>
                                <td>@Html.LabelFor(m => m.TargetSalaryCount)</td>
                                <td>@Html.TextBoxFor(m => m.TargetSalaryCount, Model.IsManagerEditable || Model.IsPersonnelManagerEditable ? null : (object)new { disabled = "disabled" })</td>
                                </tr>
                                @if ((dto.UserRole & (UserRole.PersonnelManager)) > 0)
                                {
                                <tr>
                                    <td>@Html.LabelFor(m => m.Grade)</td>
                                    @*<td>@Html.TextBoxFor(m => m.Grade, Model.IsManagerEditable || Model.IsPersonnelManagerEditable ? null : (object)new { disabled = "disabled" })</td>*@
                                    <td>@Html.DropDownListFor(m => m.Grade, new SelectList(System.Linq.Enumerable.Range(1, 4), Model.Grade), Model.IsManagerEditable || Model.IsPersonnelManagerEditable ? null : (object)new { disabled = "disabled" })
                                    @if ((!Model.IsManagerEditable || Model.IsPersonnelManagerEditable))
                                    {
                                        @Html.HiddenFor(m => m.Grade)
                                    }
                                    </td>
                                </tr>
                                }
                                else
                                {
                                    @Html.HiddenFor(m => m.Grade)
                                }
                                <tr>
                                    <td>@Html.LabelFor(m => m.HoursType)</td>
                                    <td>@Html.DropDownListFor(m => m.HoursType, new SelectList(Model.HoursTypes, "Id", "Name"), Model.IsManagerEditable || Model.IsPersonnelManagerEditable ? null : (object)new { disabled = "disabled" })</td>
                                    @if ((!Model.IsManagerEditable || Model.IsPersonnelManagerEditable))
                                    {
                                        @Html.HiddenFor(m => m.HoursType)
                                    }
                                </tr>
                                <tr>
                                <td>
                                @Html.LabelFor(m => m.PyrusLink) 
                                </td>
                                <td>
                                @Html.TextBoxFor(m => m.PyrusLink, Model.IsManagerEditable ? null : (object)new { disabled = "disabled" })
                                <a href="https://pyrus.com/" target="_blank">Для создания задачи перейдите по ссылке</a>
                                </td>
                                </tr>
                            <tr>    
                                <td colspan="2">Личные надбавки
                                <table class="grid">
                                      <thead>
                                        <tr>
                                            <th>Надбавка</th><th>Значение</th><th>Действие</th>
                                        </tr>
                                      </thead>
                                      <tbody>
                                      @for (int i = 0; i < Model.AdditionsToEdit.Count; i++)
                                      {
                                          <tr @if (!Model.AdditionsToEdit[i].IsVisible)
                                              { <text>style="display:none;"</text>}>
                                            <td>@Model.AdditionsToEdit[i].Type.Name)
                                                @Html.HiddenFor(m => m.AdditionsToEdit[i].Type.Id)
                                                @Html.HiddenFor(m => m.AdditionsToEdit[i].Type.Name)
                                            </td>
                                            <td>@Html.TextBoxFor(x => x.AdditionsToEdit[i].Value, Model.AdditionsToEdit[i].IsEditable && Model.AdditionsToEdit[i].IsValueEditable ? null : (object)new { disabled = "disabled" })</td>
                                            <td>
                                                @Html.DropDownListFor(x => x.AdditionsToEdit[i].Action, new SelectList(Model.AdditionActions, "Id", "Name", Model.AdditionsToEdit[i].Action), Model.AdditionsToEdit[i].IsEditable ? null : (object)new { disabled = "disabled" })
                                                @if (!Model.AdditionsToEdit[i].IsEditable)
                                                {
                                                    @Html.HiddenFor(m => m.AdditionsToEdit[i].Action)
                                                    @Html.HiddenFor(m => m.AdditionsToEdit[i].Value)
                                                }
                                            </td>
                                          </tr>
                                      }
                                      </tbody>
                                      </table>
                                </td>
                            </tr>
                          </table>
                          </fieldset>
                          </div>
                          }
                          
                          @if (Model.IsDocsVisible && Model.RequestType != 1)
                          {
                          <div id="tabs-4">
                          <fieldset class="bordered doc-wrap-blue panel">
                          <table class="grid">
                          <thead>
                              <tr>
                                <th>Название документа</th><th>Образец</th><th>Скан</th><th>Для перевода требуется</th>
                              </tr>
                          </thead>
                          @if (Model.RequestType != 1)
                          {
                          <tr>
                              <td>
                              Заявление о переводе
                              </td>
                              <td> <a href="https://ruscount.com:8002/Templates/zayavlenie_na_perevod.doc">Образец</a> </td>
                              <td>
                                @if (Model.MovementNoteDto != null && !string.IsNullOrEmpty(Model.MovementNoteDto.FileName))
                                {
                                    <a class="ui-notify-close" href='@Url.Action("ViewAttachment", "Help", new { Id = Model.MovementNoteAttachmentId })' style="cursor:hand" target="_blank" >@Model.MovementNoteDto.FileName</a>
                                }
                                @if (Model.IsDocsAddAvailable && Model.MovementNoteIsRequired)
                                {
                                    <input type="file" name="MovementNote" />
                                }
                              </td>
                              <td>@Html.CheckBoxFor(m => m.MovementNoteIsRequired, (object)new { disabled = "disabled" })</td>
                            </tr>
                          }
                           @* <tr>
                              <td>
                              Договор мат.ответственность
                              </td>
                              <td><a target="_blank" class="button" href="/StaffMovements/GetPrintModel/?Id=@(Model.Id)&Type=1">Печать</a></td>
                              <td>
                                @if (Model.MaterialLiabilityDocDto != null && !string.IsNullOrEmpty(Model.MaterialLiabilityDocDto.FileName))
                                {
                                    <a class="ui-notify-close" href='@Url.Action("ViewAttachment", new { Id = Model.MaterialLiabilityDocAttachmentId })' style="cursor:hand" target="_blank" >@Model.MaterialLiabilityDocDto.FileName</a>
                                }
                                @if (Model.IsDocsAddAvailable && Model.MaterialLiabilityDocIsRequired)
                                {
                                    <input type="file" name="MaterialLiabilityDoc" />
                                }
                              </td>
                              <td>@Html.CheckBoxFor(m => m.MaterialLiabilityDocIsRequired, Model.IsDocsEditable ? null : (object)new { disabled = "disabled" })</td>
                          </tr>
                          <tr>
                              <td>
                              Печать порядок по исполнению требований при организации кассовой работы сотрудниками ВСП (Приложение 1)
                              </td>
                              <td><a target="_blank" class="button" href="/StaffMovements/GetPrintModel/?Id=@(Model.Id)&Type=4">Печать</a> </td>
                              <td>
                                  @if (Model.RequirementsOrderDocDto != null && !string.IsNullOrEmpty(Model.RequirementsOrderDocDto.FileName))
                                  {
                                        <a class="ui-notify-close" href='@Url.Action("ViewAttachment", new { Id = Model.RequirementsOrderDocAttachmentId })' style="cursor:hand" target="_blank" >@Model.RequirementsOrderDocDto.FileName</a>
                                  }
                                  @if (Model.IsDocsAddAvailable && Model.RequirementsOrderDocIsRequired)
                                  {
                                    <input type="file" name="RequirementsOrderDoc" />
                                  }
                              </td>
                              <td>@Html.CheckBoxFor(m => m.RequirementsOrderDocIsRequired, Model.IsDocsEditable ? null : (object)new { disabled = "disabled" })</td>
                          </tr>
                          <tr>
                              <td>
                              Печать порядок по обслуживанию клиентов в кассе сотрудниками ВСП (Приложение 2)
                              </td>
                              <td><a target="_blank" class="button" href="/StaffMovements/GetPrintModel/?Id=@(Model.Id)&Type=5">Печать</a></td>
                              <td>
                                    @if (Model.ServiceOrderDocDto != null && !string.IsNullOrEmpty(Model.ServiceOrderDocDto.FileName))
                                    {
                                        <a class="ui-notify-close" href='@Url.Action("ViewAttachment", new { Id = Model.ServiceOrderDocAttachmentId })' style="cursor:hand" target="_blank" >@Model.ServiceOrderDocDto.FileName</a>
                                    }
                                    @if (Model.IsDocsAddAvailable && Model.ServiceOrderDocIsRequired)
                                    {
                                        <input type="file" name="ServiceOrderDoc" />
                                    }
                              </td>
                              <td>@Html.CheckBoxFor(m => m.ServiceOrderDocIsRequired, Model.IsDocsEditable ? null : (object)new { disabled = "disabled" })</td>
                          </tr>*@
                          </table>                          
                          </fieldset>
                          </div>
                          }
                    </div>
                </td>
                </tr>               
        </table>
        </div>                          
      </td>
    </tr>
    <tr>
    <td colspan="2">Согласование:</td>
    </tr>
    <tr>
        <td colspan="2">
            <table>
                <tr>
                    <td>@Html.LabelFor(m => m.SendDate)</td>
                    <td>
                        <input type="checkbox" disabled="disabled" @(Model.SendDate.HasValue ? "checked" : "") />
                        @if (Model.IsUserAcceptAvailable && !Model.IsRequestBad)
                        {
                            <input type="submit" style="border-color:Green;color:Green;"  onclick="return ButtonPressed('Accept');" value="Согласовать" />
                        }
                        @Html.DisplayFor(m => m.SendDate)
                        @Html.DisplayFor(m => m.User.Name)
                    </td>
                </tr>
                @if (Model.RequestType == 2)
                {
                <tr>
                    <td>@Html.LabelFor(m => m.SourceManagerAccept)</td>
                    <td>
                        <input type="checkbox" disabled="disabled" @(Model.SourceManagerAccept.HasValue ? "checked" : "") />
                        @if (Model.IsSourceManagerAcceptAvailable && !Model.IsRequestBad)
                        {
                            <input type="submit"  style="border-color:Green;color:Green;"   onclick="return ButtonPressed('Accept');" value="Согласовать" />
                        }
                        @Html.DisplayFor(m => m.SourceManagerAccept)
                        @(Model.SourceManager != null ? Model.SourceManager.Name : "")
                    </td>
                </tr>
                }
                <tr>
                    @if (Model.RequestType != 2)
                    {<td>Руководитель</td> }
                    else
                    {<td>@Html.LabelFor(m => m.TargetManagerAccept)</td>}
                    <td>
                        <input type="checkbox" disabled="disabled" @(Model.TargetManagerAccept.HasValue ? "checked" : "") />
                        @if (Model.IsTargetManagerAcceptAvailable && !Model.IsRequestBad)
                        {
                            <input type="submit"  style="border-color:Green;color:Green;"   onclick="return ButtonPressed('Accept');" value="Согласовать" />
                        }
                        @Html.DisplayFor(m => m.TargetManagerAccept)
                        @(Model.TargetManager != null ? Model.TargetManager.Name : "")
                    </td>
                </tr>                
                <tr>
                    <td>@Html.LabelFor(m => m.ChiefAccept)</td>
                    <td>
                        <input type="checkbox" disabled="disabled" @(Model.ChiefAccept.HasValue ? "checked" : "") />
                        @if (Model.IsChiefAcceptAvailable && !Model.IsRequestBad)
                        {
                            <input type="submit"  style="border-color:Green;color:Green;"   onclick="return ButtonPressed('Accept');" value="Согласовать" />
                        }
                        @Html.DisplayFor(m => m.ChiefAccept)
                        @(Model.Chief)
                    </td>
                </tr>
                <tr>
                    <td>@Html.LabelFor(m => m.PersonnelManagerAccept)</td>
                    <td>
                        <input type="checkbox" disabled="disabled" @(Model.PersonnelManagerAccept.HasValue ? "checked" : "") />
                        @if (Model.IsPersonnelManagerAcceptAvailable && !Model.IsRequestBad)
                        {
                            <input type="submit"  style="border-color:Green;color:Green;"   onclick="return ButtonPressed('Accept');" value="Согласовать" />
                        }
                        @Html.DisplayFor(m => m.PersonnelManagerAccept)
                        @(Model.PersonnelManager)
                    </td>
                </tr>
                <tr>
                    <td>@Html.LabelFor(m => m.PersonnelManagerBankAccept)</td>
                    <td>
                        <input type="checkbox" disabled="disabled" @(Model.PersonnelManagerBankAccept.HasValue ? "checked" : "") />
                        @if (Model.IsPersonnelManagerBankAcceptAvailable && !Model.IsRequestBad)
                        {
                            <input type="submit"  style="border-color:Green;color:Green;"   onclick="return ButtonPressed('Accept');" value="Согласовать" />
                        }
                        @Html.DisplayFor(m => m.PersonnelManagerBankAccept)
                        @(Model.PersonnelManagerBank)
                    </td>
                </tr>
            </table>
        </td>
    </tr>
    <tr>
        <td colspan="2">
            <div class="action-wrap">
                <table>
                     <tr>
                        <td colspan="2">
                        <div id="toolbar" class="ui-widget-header ui-corner-all">
                        @if (Model.IsSaveAvailable && !Model.IsRequestBad)
                        {
                            <input type="submit"  onclick="return ValidateForm();" value="Сохранить" />
                        }
                        @if (Model.IsConfirmButtonAvailable && !Model.IsRequestBad)
                        {
                            <input type="submit"  onclick="return ButtonPressed('Confirm');" value="Утвердить" />
                        }
                        @if (Model.IsStopButtonAvailable && !Model.IsRequestBad)
                        {
                            <input type="submit"  onclick="return ButtonPressed('Stop');" value="Приостановить согласование" />
                        }
                        @if (Model.IsCancelAvailable && !Model.IsRequestBad)
                        {
                            <input type="submit"  onclick="return ButtonPressed('Cancel');" value="Отменить( вернуть заявку в черновик)" />
                        }
                        @if (Model.ISRejectAvailable && !Model.IsRequestBad)
                        {
                            <input type="submit"  onclick="return ButtonPressed('Reject');" value="Отклонить( заявка будет заблокирована )" />
                        }
                        @if (Model.IsSendEmailAvailable)
                        {
                            <input type="button" onclick="ShowEmailDiv();" value="Отправить сообщение участнику процесса" />
                        }
                        </div>
                        </td>
                    </tr>
                </table>
            </div> 
        </td>
    </tr> 
    </table>
}
@if (Model.Id > 0)
{
@Html.Partial("~/Views/Info/Comments.cshtml")
}
<style>
label { font-size:1.1em; }
.field-validation-error
{
    padding:5px;
    background-color: #FADEDE;
     color: #A80707;
        border: 1px solid #D9CACA;
        border-radius: 5px;
        margin:5px;
}
</style>


<script type="text/javascript">
    var actionDepUrl = "@Url.Action("GetChildren", "Home")";
    var actionDepDialogUrl = "@Url.Action("DepartmentDialog", "Home")";
    function SaveDocs()
    {
        $.ajax({
              type: 'POST',
              url: "/StaffMovements/SaveDocs",
              data: {   id : $('#Id').val(), 
                        ServiceOrderDocIsRequired: $('#ServiceOrderDocIsRequired').is(':checked'),
                        RequirementsOrderDocIsRequired : $('#RequirementsOrderDocIsRequired').is(':checked'),
                        MaterialLiabilityDocIsRequired : $('#MaterialLiabilityDocIsRequired').is(':checked'),
                        MovementOrderDocIsRequired : $('#MovementOrderDocIsRequired').is(':checked'),
                        AdditionalAgreementDocIsRequired : $('#AdditionalAgreementDocIsRequired').is(':checked')
                        },
              success: function () {
                    alert('Требования к документам успешно сохраненны.');                    
                },
              async:false
            }); 
    }
    function ValidateForm()
    {
        
        var result =true;
          
        clearControlErrors($("#TargteDepartmentId"));
        clearControlErrors($("#JSError"));
        clearControlErrors($("#JSError2"));
        $.ajax({
              type: 'POST',
              url: "/StaffMovements/CheckMovementDate",
              data: { date : $('#MovementDate').val(), UserId: $('#User_Id').val(), id: $('#Id').val()},
              success: function (data) {
                    console.log(data);
                    if(data != "Ok")
                    { console.log(data.result);result=false; addControlError($("#JSError"),'На данную дату существуюет другая заявка.'); addControlError($("#JSError2"),'На данную дату существуюет другая заявка.');}                    
                },
              async:false
            });  
        @if ((Model.MovementNoteDto == null || string.IsNullOrEmpty(Model.MovementNoteDto.FileName)) && Model.RequestType != 1)
        {<text>
        clearControlErrors($("input[name=MovementNote]"));
        var imgVal = $('input[name=MovementNote]').val();
        if(imgVal=='')
        {
           addControlError($("input[name=MovementNote]"),'Необходимо заявление о переводе.');
           addControlError($("#JSError"),'Необходимо заявление о переводе.');
           addControlError($("#JSError2"),'Необходимо заявление о переводе.');
            result = false;
        }
         </text>
        }
        if($("#TargteDepartmentId").val() == 0)
        {
            addControlError($("#SelectDepartmentBtn"),'Необходимо выбрать структурное подразделение');
            result = false;
        }
        clearControlErrors($("#UserLinkId"));
        if($("#UserLinkId").val() == 0)
        {
            addControlError($("#UserLinkId"),'Необходимо выбрать должность');
            result = false;
        }
        clearControlErrors($("#MovementDate"));
        if($("#MovementDate").val() == '')
        {
            addControlError($("#MovementDate"),'Необходимо выбрать дату перевода');
            addControlError($("#JSError"),'Необходимо выбрать дату перевода');
            addControlError($("#JSError2"),'Необходимо выбрать дату перевода');
            result = false;
        }
        
        @if (Model.IsManagerEditable)
        {<text>
            
            clearControlErrors($("#MovementTempTo"));
            if($('[name="IsTempMoving"]:checked').val()=="True")
            {             
                if($("#MovementTempTo").val() == '')
                {
                    addControlError($("#MovementTempTo"),'Необходимо выбрать дату временного перевода');
                    addControlError($("#JSError"),'Необходимо выбрать дату временного перевода');
                    addControlError($("#JSError2"),'Необходимо выбрать дату временного перевода');
                    result = false;
                }   
            }
            clearControlErrors($("#PyrusLink"));
            if($("#PyrusLink").val() == '')
            {
                addControlError($("#PyrusLink"),'Необходимо создать задачу в Pyrus');
                addControlError($("#JSError"),'Необходимо создать задачу в Pyrus');
                addControlError($("#JSError2"),'Необходимо создать задачу в Pyrus');
                result = false;
            }
            
            clearControlErrors($("#MovementCondition"));
            if($("#MovementCondition").val() == '' && $("IsTempMoving").val()==false)
            {
                addControlError($("#MovementCondition"),'Необходимо заполнить условие перевода');
                addControlError($("#JSError"),'Необходимо заполнить условие перевода');
                addControlError($("#JSError2"),'Необходимо заполнить условие перевода');
                result = false;
            }          
           
        </text>
        }
        @if (Model.IsPersonnelManagerEditable)
        {<text>  
        clearControlErrors($("#IsHourlyContainer"));
            if($('[name="TargetCasingType"]:checked').val() == 'False' && ( parseFloat($("#TargetSalaryCount").val().replace(',','.'))<1) )
            {
                addControlError($("#IsHourlyContainer"),'если ставка <1, то оклад  может быть  ТОЛЬКО  по  часам');
                addControlError($("#JSError"),'если ставка <1, то оклад  может быть  ТОЛЬКО  по  часам');
                addControlError($("#JSError2"),'если ставка <1, то оклад  может быть  ТОЛЬКО  по  часам');
                result = false;
            }
        clearControlErrors($("#MovementTempTo"));
            if($('[name="IsTempMoving"]:checked').val()=="True")
            {             
                if($("#MovementTempTo").val() == '')
                {
                    addControlError($("#MovementTempTo"),'Необходимо выбрать дату временного перевода');
                    addControlError($("#JSError"),'Необходимо выбрать дату временного перевода');
                    addControlError($("#JSError2"),'Необходимо выбрать дату временного перевода');
                    result = false;
                }   
            }
            clearControlErrors($("#TargetSalaryCount"));
            if($("#TargetSalaryCount").val() >0 && $("#TargetSalaryCount").val()<100)
            {
                addControlError($("#TargetSalaryCount"),'Необходимо заполнить ставку');
                addControlError($("#JSError"),'Необходимо заполнить грейд');
                addControlError($("#JSError2"),'Необходимо заполнить грейд');
                result = false;
            }
                      
            clearControlErrors($("#Grade"));
            if($("#Grade").val() == '')
            {
                addControlError($("#Grade"),'Необходимо заполнить грейд');
                addControlError($("#JSError"),'Необходимо заполнить грейд');
                addControlError($("#JSError2"),'Необходимо заполнить грейд');
                result = false;
            }
            clearControlErrors($("#HoursType"));
            if($("#HoursType").val() == '' || $("#HoursType").val() ==0)
            {
                addControlError($("#HoursType"),'Необходимо заполнить график работы');
                addControlError($("#JSError"),'Необходимо заполнить график работы');
                addControlError($("#JSError2"),'Необходимо заполнить график работы');
                result = false;
            }
        </text>
        }
        if(result==false)
             $('#DivErrorsDialog').dialog("open");
        return result;
    }
    function ButtonPressed(name)
    {        
        var validateResult = ValidateForm();
        if(!validateResult) return false;
        $('#Is'+name+'ButtonPressed').val(true);
        return true;
    }
    function setOptionsToDropdown(controlName,data)
    {
        var optionsValues = '';
        optionsValues += '<option value="0"></option>';
        $.each(data, function (item, data) {
            optionsValues += '<option value="' + data.Id + '">' + data.Name + '</option>';
        })
        optionsValues += '';
        var options = $('#' + controlName );
        options.children().remove();
        options.append(optionsValues);
    }
    function ShowFlash(IsShow)  //показываем индикатор загрузки
    {
        if (!IsShow) {
            $("#LoadingIndicator2").removeClass("loading2");
            $("#DivIndicator").dialog("close");
            $("#DivIndicator").hide();
        }
        else {
            $("#LoadingIndicator2").addClass("loading2");
            $("#DivIndicator").show();
            $("#DivIndicator").dialog(
            { // initialize dialog box
                autoOpen: true,
                modal: true,
                // fix IE6  
                bgiframe: true,
                draggable: false,
                resizable: false,
                width: 300,
                height: 100,
                closeOnEscape: false,
                close: function (event, ui) {
                    //$(this).dialog("destroy").remove();
                }
            });
            $(".ui-dialog-titlebar").hide();
            $(".ui-dialog-titlebar-close").hide();
        }
    }
    function ShowEmailDiv()  
    {
        $("#DivEmal").dialog(
        { // initialize dialog box
            autoOpen: true,
            modal: true,
            width: "auto",
            draggable: false,
            resizable: false,
            close: function (event, ui) {
                //$(this).dialog("destroy").remove();
            },
            buttons:
            {
                "OK": function () {
                    SendEmail();
                    $(this).dialog("close");
                },
                "Отмена": function () {
                    $(this).dialog("close");
                }
            }
        });
    }
    function SendEmail(){
        var actionUrl="@Url.Action("SendEmailToUser", "StaffMovements")";
        var dataToSend = {ToUserId:$("#ToUserId").val(),Subject:$("#Subject").val(),EmailMessage:$("#EmailMessage").val() };
        ShowFlash(true);

        jQuery.ajax({
            url: actionUrl,
            type: 'POST',
            dataType: 'json',
            data: dataToSend,
            async: true,
            success: function(data){
                if (data.ok == true)
                {
                    $("#Subject").val("");
                    $("#EmailMessage").val(data.EmailMessageStr);
                    alert("Сообщение отправлено!");
                }
                else{
                    alert(data.msg);
                }
                    
                ShowFlash(false);
            },
            error: function(e, str1){
                if(str1 == "parsererror")
                    alert("Доступ запрещен!");
                else
                    alert("При загрузке данных произошла ошибка.");

                ShowFlash(false);
            }
        });
    }
    function ConfigureFields()
    {
        $('#DivErrorsDialog').dialog({ // initialize dialog box
            autoOpen: false,
            modal: true,
            width: "auto",                       
            
        });
        $(" #AdditionFrontTo, #AdditionQualityTo, #AdditionPositionTo, #AdditionPersonnelTo,  #MovementTempTo, #AdditionalAgreementDate, #OrderDate, #AgreementDate").datepicker({changeMonth: true, changeYear: true});
        $("#MovementDate").datepicker({
            showButtonPanel: true,
            changeMonth: true,
            changeYear: true,
            yearRange: '@NextDay.Year:@(NextDay.Year + 30)',
            minDate: new Date(@NextDay.Year, @NextDay.Month - 1, @NextDay.Day)
        });
        $("#MovementDate").change(function(){$('.M_MovementDate').text($(this).val());});
        $("#TargetDepartmentId").change(function(){$('.M_TargetDepartment').text($('#TargetDepartmentNameLabel').text());});
        $( "select[name^='UserLinkId']" ).change(function()
        {
            $('.M_TargetPositionName').text($("select[name^='UserLinkId'] option:selected").text());
        });
        $('#UserLinkId').change(function(){
        ShowFlash(true);
            $.ajax({
              type: "POST",
              url: '/Employment/GetStaffEstablishmentPostDetails',
              data: { IsSP:false, DepartmentId:$('#TargetDepartmentId').val(),UserLinkId:$('#UserLinkId').val(),UserId:0},
              success: function(data){ShowFlash(false); $('#TargetCasing').val(data.SalaryBasis);$('#TargetRegion').val(data.AreaMultiplier);},
              error: function(){ ShowFlash(false); alert('Ошибка при получении данных');}
            });
        });
        $('#IsHourlyContainer').buttonset(@if (!(Model.IsPersonnelManagerEditable || Model.IsManagerEditable))
                                          {<text>{disabled: true}</text>});
        $('#IsTempMovingContainer').buttonset(@if (!(Model.IsPersonnelManagerEditable || Model.IsManagerEditable))
                                              {<text>{disabled: true}</text>});
        $('#ConjunctionContainer').buttonset(@if (!(Model.IsPersonnelManagerEditable || Model.IsManagerEditable))
                                             {<text>{disabled: true}</text>});
        $(':button, :input[type=button], :input[type=submit], .button').button();
        $(':input[type=text]').addClass("widget");
        @if (Model.IsManagerEditable || Model.IsPersonnelManagerEditable)
        {<text>
        $("#IsConjunctionTrue").click(function(){
            $("#lblIsConjunctionTrue").css("border-color", "#248BAD");
            $("#lblIsConjunctionFalse").css("border-color", "silver");
        });
        $("#IsConjunctionFalse").click(function(){
            $("#lblIsConjunctionTrue").css("border-color", "silver");
            $("#lblIsConjunctionFalse").css("border-color", "#248BAD");
        });
        $("#IsTempMovingTrue").click(function(){
            $("#lblIsTempMovingTrue").css("border-color", "#248BAD");
            $("#lblIsTempMovingFalse").css("border-color", "silver");
            $(".TempMovingContainer").show("highlight");
        });
        $("#IsTempMovingFalse").click(function(){
            $("#lblIsTempMovingTrue").css("border-color", "silver");
            $("#lblIsTempMovingFalse").css("border-color", "#248BAD");
            $(".TempMovingContainer").hide();
        });
        
        $("#IsHourlyTrue").click(function(){
            $("#lblHourlyTrue").css("border-color", "#248BAD");
            $("#lblHourlyFalse").css("border-color", "silver");
        });
        $("#IsHourlyFalse").click(function(){
            $("#lblHourlyTrue").css("border-color", "silver");
            $("#lblHourlyFalse").css("border-color", "#248BAD");
        });
        </text>}        
        $("#TargetDepartmentId").change(function ()
        {
            var url = "/StaffMovements/GetPositionsForDepartment/"+$("#TargetDepartmentId").val();
            $('#vacationCount').text('');
            ShowFlash(true);
            $.getJSON(url,
                function (result) {
                if(result == undefined || result.length==0) $('#vacationCount').text('Нет вакансий');
                    setOptionsToDropdown("UserLinkId", result);    
                    ShowFlash(false);
                });
        });
        if(@(Model.IsTempMoving ? "true" : "false"))
        {
            $(".TempMovingContainer").show();
        }
        else
        {
            $(".TempMovingContainer").hide();
        }        
       var tabs= $("#tabs").tabs();       
    }
    function GetAgreementDoc()
    {
    var newForm = jQuery('<form>', {
        'action': '/StaffMovements/GetAgreementDoc',
        'target': '_blank'
    }).append(jQuery('<input>', {
        'name': 'AgreementNumber',
        'value': $('#AdditionalAgreementNumber').val(),
        'type': 'hidden'
    })).append(jQuery('<input>', {
        'name': 'AgreementDate',
        'value': $('#AdditionalAgreementDate').val(),
        'type': 'hidden'
    })).append(jQuery('<input>', {
        'name': 'UserName',
        'value': '@Model.User.Name',
        'type': 'hidden'
    })).append(jQuery('<input>', {
        'name': 'TargetPosition',
        'value': $("select[name^='UserLinkId'] option:selected").text(),
        'type': 'hidden'
    })).append(jQuery('<input>', {
        'name': 'TargetDepartment',
        'value': $('#TargetDepartmentNameLabel').text(),
        'type': 'hidden'
    })).append(jQuery('<input>', {
        'name': 'SignerName',
        'value': $("select[name^='SignatoryId'] option:selected").text(),
        'type': 'hidden'
    })).append(jQuery('<input>', {
        'name': 'SignerShortName',
        'value': $("select[name^='SignatoryId'] option:selected").text(),
        'type': 'hidden'
    })).append(jQuery('<input>', {
        'name': 'SignerPositionWithDepartment',
        'value': '',
        'type': 'hidden'
    })).append(jQuery('<input>', {
        'name': 'UserShortName',
        'value': '@Model.User.Name',
        'type': 'hidden'
    }));
    newForm.appendTo('body').submit();
    
    }
    $(document).ready(function () {
        setActiveMenuItem("StaffMovements");
        ConfigureFields();
    });
</script>


