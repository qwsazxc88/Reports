@model Reports.Presenters.UI.ViewModel.VacationEditModel
@{
    ViewBag.Title = "Редактирование отпуска";
}

@using (Html.BeginForm("VacationEdit", "UserRequest", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    <div class="doc-wrap">
    <table style="width:100%">
    <tr>
        <td colspan="2">
            @Html.ValidationSummary(false)
            <div id="Error" style="color:Red;display:none;"></div>
            @*<div id="Success" style="color:Green;display:none;">Письмо успешно отправлено в биллинг.</div>*@
        </td>
    </tr>
    <tr>
        <td colspan="2">
            @{
                ViewBag.ShowManagers = true;                  
            }
            @Html.Partial("../UserInfoView", Model)
        </td>
    </tr>
    @if (Model.IsDeleted)
    { 
        <tr>
            <td colspan="2" style="color:Red;">Заявка отклонена</td>
        </tr>
    }
    
    @* Вид отпуска *@
    <tr>
        <td>
            <input type="hidden" id="Id" name="Id" value="@Model.Id" />
            <input type="hidden" id="UserId" name="UserId" value="@Model.UserId" />
            <input type="hidden" id="Version" name="Version" value="@Model.Version" />
            <input type="hidden" id="IsSaveAvailable" name="IsSaveAvailable" value="@Model.IsSaveAvailable" />
            <input type="hidden" id="IsDeleteAvailable" name="IsDeleteAvailable" value="@Model.IsDeleteAvailable" />
            <input type="hidden" id="IsDelete" name="IsDelete" value="@Model.IsDelete" />
            <input type="hidden" id="IsVacationTypeEditable" name="IsVacationTypeEditable" value="@Model.IsVacationTypeEditable" />
            <input type="hidden" id="IsTimesheetStatusEditable" name="IsTimesheetStatusEditable" value="@Model.IsTimesheetStatusEditable" />
            <input type="hidden" id="TimesheetStatusIdHidden" name="TimesheetStatusIdHidden" value="@Model.TimesheetStatusIdHidden" />
            <input type="hidden" id="VacationTypeIdHidden" name="VacationTypeIdHidden" value="@Model.VacationTypeIdHidden" />
            <input type="hidden" id="DaysCountHidden" name="DaysCountHidden" value="@Model.DaysCountHidden" />
            @Html.LabelFor(m => m.VacationTypeId):
        </td>
        <td>
            @Html.DropDownListFor(model => model.VacationTypeId, new SelectList(Model.VacationTypes, "ID", "Name"), Model.IsVacationTypeEditable ? null : (object)new { disabled = "disabled" }) 
        </td>
    </tr>

    @* Дата начала отпуска *@
    <tr>
        <td style="width:300px">
            @Html.LabelFor(m => m.BeginDate):
        </td>
        <td>
            @if (Model.IsVacationTypeEditable)
            {
                @Html.EditorFor(model => model.BeginDate) 
            }
            else
            {
                @Html.DisplayFor(model => model.BeginDate)
                @Html.HiddenFor(model => model.BeginDate)
            } 
        </td>
     </tr>

     @* Дата окончания отпуска *@
     <tr>
        <td>
            @Html.LabelFor(m => m.EndDate):
        </td>
        <td>
            @if (Model.IsVacationTypeEditable)
            {
                @Html.EditorFor(model => model.EndDate)
            }
            else
            {
                @Html.DisplayFor(model => model.EndDate)
                @Html.HiddenFor(model => model.EndDate)
            } 
         </td>
    </tr>

    @* Длительность отпуска *@
    <tr>
        <td>
            @Html.LabelFor(m => m.DaysCount):
        </td>
        <td>
            @Html.DisplayFor(model => model.DaysCount)  
         </td>
    </tr>
    @*
    <tr>
        <td>
            @Html.LabelFor(m => m.IsAdditionalVacationPresent):
        </td>
        <td>
            @Html.CheckBoxFor(model => model.IsAdditionalVacationPresent)
        </td>
    </tr>
    *@
    <tr class="additional-vacation">
        <td colspan="2">
            В т.ч. дополнительный отпуск:
        </td>
    </tr>

    @* Вид доп. отпуска *@
    <tr class="additional-vacation">
        <td>
            @Html.LabelFor(m => m.AdditionalVacationTypeId):
        </td>
        <td>
            @Html.DropDownListFor(model => model.AdditionalVacationTypeId, new SelectList(Model.AdditionalVacationTypes, "ID", "Name"), Model.IsAdditionalVacationTypeEditable ? null : (object)new { disabled = "disabled" })
        </td>
    </tr>

    @* Дата начала доп. отпуска *@
    <tr class="additional-vacation">
        <td>
            @Html.LabelFor(m => m.AdditionalVacationBeginDate):
        </td>
        <td>
            @if (Model.IsVacationTypeEditable)
            {
                @Html.EditorFor(model => model.AdditionalVacationBeginDate)
                <button id="resetAdditionalVacationBeginDate">Сбросить</button>
            }
            else
            {
                @Html.DisplayFor(model => model.AdditionalVacationBeginDate)                
                @Html.HiddenFor(model => model.AdditionalVacationBeginDate)
            }
        </td>
     </tr>

     @* Длительность доп. отпуска *@
    <tr class="additional-vacation">
        <td>
            @Html.LabelFor(m => m.AdditionalVacationDaysCount)
        </td>
        <td>
            @Html.DisplayFor(model => model.AdditionalVacationDaysCount)
        </td>
    </tr>

    <tr>
        <td>
            @Html.LabelFor(m => m.TimesheetStatusId):
        </td>
        <td>
            @Html.DropDownListFor(model => model.TimesheetStatusId, new SelectList(Model.TimesheetStatuses, "ID", "Name"), Model.IsTimesheetStatusEditable ? null : (object)new { disabled = "disabled" }) 
        </td>
    </tr>
    <tr>
        <td colspan="2">
           
        </td>
    </tr>
    <tr>
        <td colspan="2">
            @Html.LabelFor(m => m.CreatorLogin):
       @* </td>
        <td>*@
            @Html.DisplayFor(model => model.CreatorLogin) 
         </td>
    </tr>
        <tr>
        <td colspan="2" style="height:5px">
        </td>
    </tr>
    <tr>
        <td>@Html.LabelFor(model => model.Attachment):</td>
        <td>
            @if (!string.IsNullOrEmpty(Model.Attachment))
            {
                <a class="ui-notify-close" href='@Url.Action("ViewAttachment", new { Id = Model.AttachmentId })' style="cursor:hand" target="_blank" >@Model.Attachment</a>
                <input type="hidden" id="Attachment" name="Attachment" value="@Model.Attachment" />
                <input type="hidden" id="AttachmentId" name="AttachmentId" value="@Model.AttachmentId" />
               @* <input type="hidden" id="AttachmentTypeId" name="AttachmentTypeId" value="@Model.AttachmentTypeId" />*@
            }
        </td>
    </tr>
    <tr @if ((!Model.IsTimesheetStatusEditable && !Model.IsVacationTypeEditable) || (Model.Id == 0))
        {<text>style="display:none"</text>}>    
        <td>Прикрепить скан документа </td>
        <td><input id="FileContext" type="file" name="file"/>&nbsp;<span style="color:Red">размер файла - не более 2 Мб</span></td>
    </tr>

    <tr>
        <td colspan="2">
            На дату окончания отпуска:
        </td>
    </tr>
    
    <tr>
        <td>
            @Html.LabelFor(m => m.PrincipalVacationDaysLeft) на 1 число текущего месяца
        </td>
        <td>
            @if (Model.IsDaysLeftEditable)
            {
                @Html.EditorFor(m => m.PrincipalVacationDaysLeft)
            }
            else
            {
                @Html.DisplayFor(m => m.PrincipalVacationDaysLeft)
                @Html.HiddenFor(x=>x.PrincipalVacationDaysLeft)
            }
        </td>
    </tr>
    <tr>
        <td>
            @Html.LabelFor(m => m.AdditionalVacationDaysLeft) на 1 число текущего месяца
        </td>
        <td>
            @if (Model.IsDaysLeftEditable)
            {
                @Html.EditorFor(m => m.AdditionalVacationDaysLeft)
            }
            else
            {
                @Html.DisplayFor(m => m.AdditionalVacationDaysLeft)
                @Html.HiddenFor(x=>x.AdditionalVacationDaysLeft)
            }
        </td>
    </tr>

     <tr>
        <td colspan="2">
            <input type="submit" value="Записать (черновик)" onclick="return ValidateForm();" @if (!Model.IsSaveAvailable)
                                                                                              {<text>style="display:none"</text>}/>
            <div style="text-align: right;"><input type="submit" value="Отклонить заявку" onclick="return Delete();" @if (!Model.IsDeleteAvailable)
                                                                                                                     {<text>style="display:none"</text>}/>
            </div>
            <input type="button" value="Печать" name="PrintButton" onclick="window.location.href='@Url.Action("GetPrintForm", "UserRequest", new { id = Model.Id, typeId = 1 })';" 
                                                                @if (!Model.IsPrintAvailable)
                                                                {<text>style="display:none"</text>}  />
            
           @* <input type="button" id="SendToBillingButton" name="SendToBillingButton" value="Отправить в биллинг" onclick="return SendToBilling();" @if (!Model.IsSendToBillingAvailable)
                                                                                   {<text>style="display:none"</text>}/>*@
        </td>
    </tr>
    <tr>
             <td colspan="2" style="height:15px">
             </td>
    </tr>
    <tr>
             <td colspan="2">
                        <input type="hidden" id="IsApproved" name="IsApproved" value="@Model.IsApproved" />
                        <input type="hidden" id="IsApprovedEnable" name="IsApprovedEnable" value="@Model.IsApprovedEnable" />
                        <input type="submit" value="Отправить на согласование" onclick="return SetApprovedAndValidateForm();" @if (!Model.IsApprovedEnable)
                                                                                                                              {<text>style="display:none"</text>}/>     
                        <input type="hidden" id="IsApprovedForAll" name="IsApprovedForAll" value="@Model.IsApprovedForAll" />
                        <input type="hidden" id="IsApprovedForAllEnable" name="IsApprovedForAllEnable" value="@Model.IsApprovedForAllEnable" />
                        <input type="submit" value="За всех" onclick="return SetApprovedForAllAndValidateForm();" @if (!Model.IsApprovedForAllEnable)
                                                                                                                  {<text>style="display:none"</text>}/>
                        @if (Model.IsErrorNotificationAvailable)
                        {
                            <a class="send-error-notification-link" href="">Отправить сообщение сотруднику</a>
                        }
            </td>
    </tr>
    <tr>
            <td colspan="2">
                <input type="hidden" id="IsApprovedByUserEnable" name="IsApprovedByUserEnable" value="@Model.IsApprovedByUserEnable" />
                @*@Html.CheckBox("IsApprovedByUser", Model.IsApprovedByUser, Model.IsApprovedByUserEnable ? null : (object)new { disabled = "disabled" }) *@
                <input type="checkbox" id="IsApprovedByUser" disabled = "disabled" name="IsApprovedByUser" @if (Model.IsApprovedByUser)
                                                                                                           {<text>checked="checked"</text>} />
                @Html.LabelFor(model => model.IsApprovedByUser)
                @if (!Model.IsApprovedByUserEnable)
                {
                    <input type="hidden" id="IsApprovedByUserHidden" name="IsApprovedByUserHidden" value="@Model.IsApprovedByUser" />
                }
            </td>
    </tr>
    <tr>
            <td colspan="2">
                <input type="hidden" id="IsApprovedByManagerEnable" name="IsApprovedByManagerEnable" value="@Model.IsApprovedByManagerEnable" />
                @*@Html.CheckBox("IsApprovedByManager", Model.IsApprovedByManager, Model.IsApprovedByManagerEnable ? null : (object)new { disabled = "disabled" }) *@
                <input type="checkbox" id="IsApprovedByManager" disabled = "disabled" name="IsApprovedByManager" @if (Model.IsApprovedByManager)
                                                                                                                 {<text>checked="checked"</text>} />
                @Html.LabelFor(model => model.IsApprovedByManager)
                @if (!Model.IsApprovedByManagerEnable)
                {
                    <input type="hidden" id="IsApprovedByManagerHidden" name="IsApprovedByManagerHidden" value="@Model.IsApprovedByManager" />
                }
            </td>
    </tr>
    <tr>
            <td colspan="2">
                <input type="hidden" id="IsApprovedByPersonnelManagerEnable" name="IsApprovedByPersonnelManagerEnable" value="@Model.IsApprovedByPersonnelManagerEnable" />
                @*@Html.CheckBoxFor(model => model.IsApprovedByPersonnelManager, Model.IsApprovedByPersonnelManagerEnable ? null : (object)new { disabled = "disabled" }) *@
                <input type="checkbox" id="IsApprovedByPersonnelManager" disabled = "disabled" name="IsApprovedByPersonnelManager" @if (Model.IsApprovedByPersonnelManager)
                                                                                                                                   {<text>checked="checked"</text>} />
                @Html.LabelFor(model => model.IsApprovedByPersonnelManager)
                @if (!Model.IsApprovedByPersonnelManagerEnable)
                {
                    <input type="hidden" id="IsApprovedByPersonnelManagerHidden" name="IsApprovedByPersonnelManagerHidden" value="@Model.IsApprovedByPersonnelManager" />
                }
            </td>
    </tr>
     <tr>
            <td colspan="2">
                <input type="hidden" id="IsPostedTo1CEnable" name="IsPostedTo1CEnable" value="@Model.IsPostedTo1CEnable" />
                @*@Html.CheckBox("IsPostedTo1C", Model.IsPostedTo1C, Model.IsPostedTo1CEnable ? null : (object)new { disabled = "disabled" }) *@
                <input type="checkbox" id="IsPostedTo1C" disabled = "disabled" name="IsPostedTo1C" @if (Model.IsPostedTo1C)
                                                                                                   {<text>checked="checked"</text>} />
                @Html.LabelFor(model => model.IsPostedTo1C)
                @if (!Model.IsPostedTo1CEnable)
                {
                    <input type="hidden" id="IsPostedTo1CHidden" name="IsPostedTo1CHidden" value="@Model.IsPostedTo1C" />
                }
            </td>
    </tr>
        
    <tr>
             <td colspan="2" style="height:15px">
                <hr />
             </td>
    </tr>

    @* Ссылка для открытия скана приказа на подпись *@

    <tr>
        <td colspan="2">@Html.LabelFor(model => model.UnsignedOrderScanAttachment):
            @if (!string.IsNullOrEmpty(Model.UnsignedOrderScanAttachment))
            {
                <a class="ui-notify-close" href='@Url.Action("ViewAttachment", new { Id = Model.UnsignedOrderScanAttachmentId })' style="cursor:hand" target="_blank" >@Model.UnsignedOrderScanAttachment</a>
                <input type="hidden" id="UnsignedOrderScanAttachment" name="UnsignedOrderScanAttachment" value="@Model.UnsignedOrderScanAttachment" />
                <input type="hidden" id="UnsignedOrderScanAttachmentId" name="UnsignedOrderScanAttachmentId" value="@Model.UnsignedOrderScanAttachmentId" />
            }
            else
            {
                <span>-</span>
            }
        </td>
    </tr>

    @* Прикрепление скана приказа на подпись *@

    @if (Model.IsUnsignedConfirmationAllowed)
    {
        <tr>    
            <td colspan="2">Прикрепить скан приказа на подпись
                <input id="UnsignedOrderScanFileContext" type="file" name="unsignedOrderScanFile"/>&nbsp;<span style="color:Red">размер файла - не более 2 Мб</span>                
            </td>
        </tr>
        <tr>    
            <td colspan="2">
                <input type="submit" value="Сохранить" onclick="return ValidateForm();" />
            </td>
        </tr>
    }

    <tr>
             <td colspan="2" style="height:15px">
                <hr />
             </td>
    </tr>

    @* Ссылка для открытия скана подписанного приказа *@
    <tr>
        <td colspan="2">@Html.LabelFor(model => model.OrderScanAttachment):
            @if (!string.IsNullOrEmpty(Model.OrderScanAttachment))
            {
                <a class="ui-notify-close" href='@Url.Action("ViewAttachment", new { Id = Model.OrderScanAttachmentId })' style="cursor:hand" target="_blank" >@Model.OrderScanAttachment</a>
                <input type="hidden" id="OrderScanAttachment" name="OrderScanAttachment" value="@Model.OrderScanAttachment" />
                <input type="hidden" id="OrderScanAttachmentId" name="OrderScanAttachmentId" value="@Model.OrderScanAttachmentId" />
            }
            else
            {
                <span>-</span>
            }
        </td>
    </tr>

    @* Прикрепление скана подписанного приказа *@
    @if (Model.IsConfirmationAllowed)
    {
        <tr>    
            <td colspan="2">Прикрепить скан подписанного приказа
                <input id="OrderScanFileContext" type="file" name="orderScanFile"/>&nbsp;<span style="color:Red">размер файла - не более 2 Мб</span>                
            </td>
        </tr>
        <tr>    
            <td colspan="2">
                <input type="submit" value="Сохранить" onclick="return ValidateForm();" />
            </td>
        </tr>
    }

    </table>
    </div>
    
    <br />
    <div class="comment-wrap">
    <table style="width:100%">
     <tr>
        <td colspan="2">
            <div id="CommentModelContext">@Html.Partial("RequestCommentPartial", Model.CommentsModel)</div>
        </td>
    </tr>
    </table>
    </div>
    <script type="text/javascript">
        var restrictDatesInDatepicker = function (targetInput, beginDateInput, endDateInput) {
            var pattern = /(\d{2})\.(\d{2})\.(\d{4})/;
            var substitutionPattern = "$3-$2-$1";
            try {
                var beginDate = beginDateInput.val().replace(pattern, substitutionPattern);
                var endDate = endDateInput.val().replace(pattern, substitutionPattern);
                targetInput.datepicker("option", { minDate: new Date(beginDate), maxDate: new Date(endDate) });
            }
            catch (e) {
                targetInput.datepicker("option", { minDate: null, maxDate: null });
            }
        }

        $(document).ready(function () {
            $("#BeginDate").datepicker({changeMonth: true, changeYear: true});
            $("#EndDate").datepicker({changeMonth: true, changeYear: true});
            $("#AdditionalVacationBeginDate").datepicker({changeMonth: true, changeYear: true});
            restrictDatesInDatepicker($("#AdditionalVacationBeginDate"), $("#BeginDate"), $("#EndDate"));
            $(".hasDatepicker").width("75px");
            setActiveMenuItem("userVacation");
            if ($("#VacationTypeId :selected").html().indexOf("учебный") === -1) {
                $("#AdditionalVacationTypeId").removeAttr("disabled");
            }
            else {
                $("#AdditionalVacationTypeId").attr("disabled", "disabled");
            }
            //$(".additional-vacation").toggle(document.getElementById("IsAdditionalVacationPresent").checked);

            $(".send-error-notification-link").click(function (event) {
                event.preventDefault();
                $.post("/UserRequest/VacationSendErrorNotification",
                {
                    id: $("#Id").val()
                },
                function (data) {
                    if (data.ok) {
                        location.reload(true);
                    }
                });
            });

            $("#AdditionalVacationBeginDate, #BeginDate, #EndDate").keydown(function (e) {
                e.preventDefault();
            });

            $("#resetAdditionalVacationBeginDate").click(function (e) {
                e.preventDefault();
                $("#AdditionalVacationBeginDate").val("");
            });

            // Деактивация выбора типа доп. отпуска при выборе учебных отпусков в качестве основного типа
            $("#VacationTypeId").change(function () {
                if ($("#VacationTypeId :selected").html().indexOf("учебный") === -1) {
                    $("#AdditionalVacationTypeId").removeAttr("disabled");
                }
                else {
                    $("#AdditionalVacationTypeId").attr("disabled", "disabled");
                }
            });

            // Ограничение дат доп. отпуска
            $("#BeginDate, #EndDate").change(function () {
                restrictDatesInDatepicker($("#AdditionalVacationBeginDate"), $("#BeginDate"), $("#EndDate"));
            });
            /*
            $("#IsAdditionalVacationPresent").change(function () {
            $(".additional-vacation").toggle(this.checked);
            });*/
        });    
    function ValidateForm()
    {
        return true;
    }
    function SetApprovedForAllAndValidateForm() {
        SetApprovedAndValidateForm();
        $("#IsApprovedForAll").val('true');
        return true;
    }
    function SetApprovedAndValidateForm() {
        $("#IsApproved").val('true');
        return true;
    }
    function Delete() {
        $("#IsDelete").val("true");
        return true;
    }
    </script>
}

