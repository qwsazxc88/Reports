@using Reports.Core
@using Reports.Presenters.Services.Impl
@model Reports.Presenters.UI.ViewModel.DismissalListModel
@{
    ViewBag.Title = "Увольнения";
}

@using (Html.BeginForm())
{
    <table style="width:100%">
    <tr>
        <td>
          <div class="filter-wrap">
            <table style="width:100%">
            <tr>
            <td colspan="2"><b style="color:Red;">ВНИМАНИЕ Московской дирекции!</b> С 19.05.2015 г. выдача пакета документов при увольнении будет производится по адресу: г. Москва, ул. Щепкина, д.28.</td>
            </tr>
                <tr>
                    <td colspan="2">
                                <b>Выбор параметров</b>
                            </td>
                        </tr>
                        <tr>
                            <td colspan="2">
                                @Html.ValidationSummary(false)
                                @Html.HiddenFor(m => m.UserId)
                            </td>
                        </tr>
                        <tr>
                            <td>
                                @Html.LabelFor(m => m.DepartmentName):
                            </td>
                            <td>
                                <label id="DepartmentNameLabel">@Model.DepartmentName</label>
                                <input type="hidden" id="DepartmentName" name="DepartmentName" value="@Model.DepartmentName" />
                                <input type="hidden" id="DepartmentId" name="DepartmentId" value="@Model.DepartmentId" />
                            </td>
                        </tr>
                        <tr>
                            <td colspan="2">
                                <input type="hidden" id="DepartmentReadOnly" name="DepartmentReadOnly" value="@Model.DepartmentReadOnly" />
                                @if (!Model.DepartmentReadOnly)
                                {
                                    <input type="button" value="Выбрать" onclick="changeDepartment();"/>
                                }            
                            </td>
                        </tr>
                    @*    <tr>
                            <td style="width:200px">
                                @Html.LabelFor(m => m.Department):
                            </td>
                            <td>
                                @Html.EditorFor(model => model.Department)
                            </td>
                        </tr>*@
                        <tr>
                            <td>
                                @Html.LabelFor(m => m.PositionId):
                            </td>
                            <td>
                                @Html.DropDownListFor(model => model.PositionId, new SelectList(Model.Positions, "ID", "Name")) 
                             </td>
                        </tr>
                        <tr>
                            <td>
                                @Html.LabelFor(m => m.StatusId):
                            </td>
                            <td>
                                @Html.DropDownListFor(model => model.StatusId, new SelectList(Model.Statuses, "ID", "Name")) 
                             </td>
                        </tr>
                        <tr>
                           <td>
                                @Html.LabelFor(m => m.TypeId):
                            </td>
                            <td>
                                @Html.DropDownListFor(model => model.TypeId, new SelectList(Model.Types, "ID", "Name")) 
                            </td>
                        </tr>
                        @if (((ReportPrincipal)HttpContext.Current.User).UserRole != UserRole.Employee)
                        {
                            <tr>
                                <td>
                                    @Html.LabelFor(m => m.UserName):
                                </td>
                                <td>
                                    @Html.TextBoxFor(model => model.UserName)
                                </td>
                            </tr>
                        }
                        <tr>
                            <td>
                                @Html.LabelFor(m=>m.Number)
                            </td>
                               
                            <td>
                             @Html.TextBoxFor(m=>m.Number)
                            </td>
                        </tr>
                        <tr>
                            <td colspan="2">
                                Период по дате увольнения с:
                                @Html.EditorFor(model => model.BeginDate) 
                                @Html.LabelFor(m => m.EndDate):
                                @Html.EditorFor(model => model.EndDate) 
                             </td>
                        </tr>
                        <tr>
                            <td colspan="2">
                                Период по дате создания заявки с:
                                @Html.EditorFor(model => model.BeginCreateDate) 
                                по:
                                @Html.EditorFor(model => model.EndCreateDate) 
                             </td>
                        </tr>
                        <tr>
                          <td colspan="2">
                            <input type="submit" value="Выбрать"/>
                            <input type="button" value="Очистить" onclick="resetFilter();"/>
                          </td>
                        </tr>
            </table>
        </div>                          
        </td>
        <td style="vertical-align: top; width: 25%;">
            <div class="announcement" style="width: 100%;">
                Пакет документов при увольнении:
                <ol>
                    <li>Заявление на увольнение</li>
                    <li>Заявление на выдачу трудовой книжки (при необходимости)</li>
                    <li>Приказ на увольнение</li>
                    <li>Соглашение сторон (при необходимости)</li>
                    <li>Карточка Т-2</li>
                    <li>Для Московской дирекции - Образец заявления на выдачу ТК можно скачать в Инфоуслуги => Образцы документов => Заявление на выдачу трудовой книжки при увольнении для Московской дирекции. Заявление на выдачу ТК необходимо прикрепить в заявку на увольнении вместе с заявлением на увольнение. Выдача пакета документов при увольнении производится по адресу: г. Москва, ул. Щепкина, д. 28. </li>
                </ol>
            </div>            
        </td>
    </tr>
    <tr>
        <td colspan="2">
            <div class="action-wrap">
            <table style="width:100%">
                 <tr>
                    <td colspan="2">
                        @if (((ReportPrincipal)HttpContext.Current.User).UserRole != UserRole.Inspector &&
                            ((ReportPrincipal)HttpContext.Current.User).UserRole != UserRole.ConsultantPersonnel &&
                            ((ReportPrincipal)HttpContext.Current.User).UserRole != UserRole.OutsourcingManager &&
                                ((ReportPrincipal)HttpContext.Current.User).UserRole != UserRole.Chief &&
                                ((ReportPrincipal)HttpContext.Current.User).UserRole != UserRole.DismissedEmployee &&
                            ((ReportPrincipal)HttpContext.Current.User).UserRole != UserRole.ConsultantOutsourcing)
                        {
                            if (((ReportPrincipal)HttpContext.Current.User).UserRole == UserRole.Employee)
                            {
                            @*    @Html.ActionLink("Создать новую заявку", "DismissalEdit", new { id = 0, userId = Model.UserId })*@
                                <input type="button" value="Создать новую заявку" onclick="location.href='@Url.Action("DismissalEdit", "UserRequest", new { id = 0, userId = Model.UserId })'"/>   
                            }
                            else
                            {
                                @* @Html.ActionLink("Создать новую заявку", "CreateRequest") *@
                                <input type="button" value="Создать новую заявку" onclick="location.href='@Url.Action("CreateRequest", "UserRequest")'"/>
                            }
                        }
                        
                        @if (Model.Documents != null && Model.Documents.Count > 0)
                        {
                            <input type="button" value="Печать" onclick="return onPrintClick();"/>                                                                                   
                        }
                        
                    </td>
                    <td style = "text-align:right">
                        @if (Model.IsOriginalReceivedEditable)
                        {
                            <input type="hidden" id="IsOriginalReceivedModified" name="isOriginalReceivedModified" value="false" />
                            <input type="hidden" id="IsPersonnelFileSentToArchiveModified" name="isPersonnelFileSentToArchiveModified" value="false" />
                            <button type="submit" id="SaveFlags">Записать</button>
                        }
                    </td>
                </tr>
             </table>
            </div>                           
        </td>
     </tr>
     <tr>
        <td colspan="2">
            <input type="hidden" id="SortBy" name="SortBy" value="@Model.SortBy" />
            <input type="hidden" id="SortDescending" name="SortDescending" value="@Model.SortDescending" />
            <table class="grid" style="width:100%">
                <tr>
                    <th>№<br />п/п</th>
                    <th>
                        <div id="sort1"><a href="#" onclick = "SortChanged(1);">Вид<br />заявки</a></div>
                    </th>
                    <th>
                        <div id="sort2"><a href="#"  onclick = "SortChanged(2);">Ф.И.О.</a></div>
                    </th>
                    <th>
                        <div id="sort13"><a href="#"  onclick = "SortChanged(13);">Должность</a></div>
                    </th>
                    <th>
                        <div id="sort14"><a href="#"  onclick = "SortChanged(14);">Подразделение<br /> 3 уровня</a></div>
                    </th>
                    <th>
                        <div id="sort15"><a href="#"  onclick = "SortChanged(15);">Подразделение<br />7 уровня</a></div>
                    </th>
                    <th>
                        <div id="sort3"><a href="#"  onclick = "SortChanged(3);">Дата</a></div>
                    </th>
                     <th>
                        <div id="sort6"><a href="#"  onclick = "SortChanged(6);">Номер</a></div>
                    </th>
                    <th>
                        <div id="sort4"><a href="#"  onclick = "SortChanged(4);">Тип<br />заявки</a></div>
                    </th>
                    <th>
                        <div id="sort5"><a href="#"  onclick = "SortChanged(5);">Состояние</a></div>
                    </th>
                    <th>
                        <div id="sort7"><a href="#"  onclick = "SortChanged(7);">Дата увольнения</a></div>
                    </th>                    
                    <th>
                        <div id="sort10"><a href="#" onclick="SortChanged(10);">Оригиналы<br />документов<br />получены</a></div><br />
                        @if (Model.IsOriginalReceivedEditable)
                        {
                            <input type="checkbox" id="setAll1" />
                        }
                    </th>
                    <th>
                        <div id="sort17"><a href="#" onclick="SortChanged(17);">Оригиналы<br />заявлений<br />получены</a></div><br />
                        @if (Model.IsOriginalReceivedEditable)
                        {
                            <input type="checkbox" id="setAllRequest" />
                        }
                    </th>
                    <th>
                        <div id="sort11"><a href="#" onclick="SortChanged(11);">Личное дело<br />передано<br />в архив</a></div><br />
                        @if (Model.IsPersonnelFileSentToArchiveEditable)
                        {
                            <input type="checkbox" id="setAll2" />
                        }
                    </th>
                   @* <th>
                        Дата окончания
                    </th>*@
                </tr>
                @if (Model.Documents != null && Model.Documents.Count > 0)
                {
                    var i = 1;
                    foreach (var doc in Model.Documents)
                    {
                        <tr>
                            <td>
                                @i
                                <input type="hidden" id="Documents[@(i - 1)].Id" name="Documents[@(i - 1)].Id" value="@doc.Id" />
                            </td>
                            <td style="text-align:left">
                                <a class="ui-notify-close" href='@Url.Action("DismissalEdit", new { id = doc.Id, UserId = doc.UserId })' style="cursor:hand">@doc.Name</a>
                            </td>
                            <td>@doc.UserName</td>
                            <td>@doc.Position</td>
                            <td>@doc.Dep3Name</td>
                            <td>@doc.Dep7Name</td>
                            <td>@doc.Date</td>
                            <td>@doc.Number</td>
                            <td>@doc.RequestType</td>
                            <td>@doc.RequestStatus</td>
                            <td>@doc.BeginDate.ToString("dd.MM.yyyy")</td>

                            <td style="text-align: center">
                                @if(Model.IsOriginalReceivedEditable)
                                {
                                    @Html.CheckBoxFor(m => m.Documents[i - 1].IsOriginalReceived, new { @class = "selcheck1" })
                                }
                                else
                                {
                                    @Html.CheckBoxFor(m => m.Documents[i - 1].IsOriginalReceived, new { @class = "selcheck1", disabled = "disabled" })
                                }
                            </td>
                            <td style="text-align: center">
                                @if(Model.IsOriginalReceivedEditable)
                                {
                                    @Html.CheckBoxFor(m => m.Documents[i - 1].IsOriginalRequestReceived, new { @class = "selcheckRequest" })
                                }
                                else
                                {
                                    @Html.CheckBoxFor(m => m.Documents[i - 1].IsOriginalRequestReceived, new { @class = "selcheckRequest", disabled = "disabled" })
                                }
                            </td>
                            <td style="text-align: center">
                                @if (Model.IsPersonnelFileSentToArchiveEditable)
                                {
                                    @Html.CheckBoxFor(m => m.Documents[i - 1].IsPersonnelFileSentToArchive, new { @class = "selcheck2" })
                                }
                                else
                                {
                                    @Html.CheckBoxFor(m => m.Documents[i - 1].IsPersonnelFileSentToArchive, new { @class = "selcheck2", disabled = "disabled" })
                                }
                            </td>
                            
                            @* <td>@doc.BeginDate.ToString("dd.MM.yyyy")</td>
                            <td>@doc.EndDate.ToString("dd.MM.yyyy")</td>*@
                        </tr>
                                i++;
                    }
                }
            </table>
            <input type="hidden" name="anticache" value=@DateTime.Now />
        </td>
    </tr>
</table> 
<script src="@Url.Content("~/Scripts/TableSort.js")" type="text/javascript"></script>
<script type="text/javascript">
    var actionDepUrl = "@Url.Action("GetChildren", "Home")";
    var actionDepDialogUrl = "@Url.Action("DepartmentDialog", "Home")";
    $(document).ready(function () {
        $("#BeginDate").datepicker({changeMonth: true, changeYear: true});
        $("#EndDate").datepicker({changeMonth: true, changeYear: true});
        $("#BeginCreateDate").datepicker({changeMonth: true, changeYear: true});
        $("#EndCreateDate").datepicker({changeMonth: true, changeYear: true});
        $(".hasDatepicker").width("75px");
        setSortFields();
        setActiveMenuItem("userDismissal");

        $("#SaveFlags").click(function(){
            $("#IsOriginalReceivedModified").val("true");
            $("#IsPersonnelFileSentToArchiveModified").val("true");
         });

         $("#setAll1").click(function(){
            if ($(this).is(':checked'))
            {
                $(".selcheck1").attr('checked','checked');
            }
            else
            {
                $(".selcheck1").removeAttr('checked');
            }
         });
         $("#setAllRequest").click(function(){
            if ($(this).is(':checked'))
            {
                $(".selcheckRequest").attr('checked','checked');
            }
            else
            {
                $(".selcheckRequest").removeAttr('checked');
            }
         });
         $("#setAll2").click(function(){
            if ($(this).is(':checked'))
            {
                $(".selcheck2").attr('checked','checked');
            }
            else
            {
                $(".selcheck2").removeAttr('checked');
            }
         });
    });
    function resetFilter() {
        $("#BeginDate").val('');
        $("#EndDate").val('');
        //if ($('#DepartmentId option').length > 1)
        //$("#Department").val('');
        if ($("#DepartmentReadOnly").val() == "False") {
            $("#DepartmentId").val('0');
            $("#DepartmentNameLabel").text('');
            $("#DepartmentName").val('');
        }
        if ($('#PositionId option').length > 1)
            $("#PositionId").val('0');
        $("#TypeId").val('0');
        $("#StatusId").val('0');
         $("#UserName").val('');
         $("#Number").val('');
    }
    function onPrintClick() {

        window.location.href = '@Url.Action("RenderToPdf", "UserRequest")?urlTemplate=' + 'UserRequest/PrintDismissalList' + '&beginDate='+
        SetLocale($("#BeginDate").val()) +'&endDate=' + SetLocale($("#EndDate").val()) + '&departmentId=' + $("#DepartmentId").val()+
        '&requestStatusId='+ $("#RequestStatusId").val() +'&typeId=' + $("#TypeId").val() +
        '&userName=' + escapeJson($("#UserName").val()) +
        '&sortBy=' + $("#SortBy").val() +
        '&sortDescending=' + $("#SortDescending").val();
        return false;
    }
    function SetLocale(changeformat)
    {
        var arraydates = changeformat.split(".");
        var newdate =  arraydates[1]+"."+arraydates[0]+"."+arraydates[2];
        return newdate;
    }
 </script>   
}

