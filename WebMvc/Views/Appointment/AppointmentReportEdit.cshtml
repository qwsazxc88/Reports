@using Reports.Core
@using Reports.Presenters.Services.Impl
@using Reports.Presenters.UI.Bl.Impl;
@model Reports.Presenters.UI.ViewModel.AppointmentReportEditModel
@{
    Layout = "~/Views/Shared/_LayoutAppointment.cshtml";
    ViewBag.Title = "Отчет по подбору сотрудника";
}
@using (Html.BeginForm("AppointmentReportEdit", "Appointment", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    <div class="doc-wrap">
        <table style="width:100%">
            <tr>
                <td colspan="2">
                    @Html.ValidationSummary(false)
                    <div id="Error" style="color:Red;display:none;"></div>
                </td>
            </tr>
            <tr>
                <td colspan="2">
                    @Html.Partial("ManagerInfoView", Model)
                </td>
            </tr>
            @if (Model.IsDeleted)
            { 
            <tr>
                <td colspan="2" style="color:Red">Отчет отклонен. Отклонил(а) @Model.DeleteUser</td>
            </tr>
            }
             <tr>
                <td style="width:250px">
                    @Html.LabelFor(m => m.DepartmentName):
                </td>
                <td>
                    <label id="DepartmentNameLabel">@Model.DepartmentName</label>
                    <input type="hidden" id="DepartmentName" name="DepartmentName" value="@Model.DepartmentName" />
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(m => m.City):
                </td>
                <td>
                     <label>@Model.City</label>
                     <input type="hidden" id="City" name="City" value="@Model.City" />
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(m => m.CandidatePosition):
                </td>
                <td>
                     <label>@Model.CandidatePosition</label>
                     <input type="hidden" id="CandidatePosition" name="CandidatePosition" value="@Model.CandidatePosition" />
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(m => m.VacationCount):
                </td>
                <td>
                     <label>@Model.VacationCount</label>
                     <input type="hidden" id="VacationCount" name="VacationCount" value="@Model.VacationCount" />
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(m => m.Reason):
                </td>
                <td>
                    <label>@Model.Reason</label>
                    <input type="hidden" id="Reason" name="Reason" value="@Model.Reason" />
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(m => m.Name):
                </td>
                <td>
                    @Html.TextBoxFor(model => model.Name, Model.IsEditable ? (object)new { maxlength = 50, style = "width:500px" } : (object)new { @readonly = "read-only", style = "width:500px" }) 
                </td>
            </tr>
             <tr>
                <td>
                    @Html.LabelFor(m => m.Phone):
                </td>
                <td>
                    @Html.TextBoxFor(model => model.Phone, Model.IsEditable ? (object)new { maxlength = 30 } : (object)new { @readonly = "read-only" }) 
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(m => m.Email):
                </td>
                <td>
                    @Html.TextBoxFor(model => model.Email, Model.IsEditable ? (object)new { maxlength = 30 } : (object)new { @readonly = "read-only" }) 
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(m => m.ColloquyDate):
                </td>
                <td>
                    @if (Model.IsEditable)
                    {
                        @Html.EditorFor(model => model.ColloquyDate)
                    }
                    else
                    {
                        @Html.DisplayFor(model => model.ColloquyDate)
                        @Html.HiddenFor(model => model.ColloquyDate)
                    } 
                </td>
            </tr>
             <tr>
                <td>
                    @Html.LabelFor(m => m.AppointmentNumber):
                </td>
                <td>
                    <label>@Model.AppointmentNumber</label>
                    <input type="hidden" id="AppointmentNumber" name="AppointmentNumber" value="@Model.AppointmentNumber" />
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(m => m.TypeId):
                </td>
                <td>
                    @Html.DropDownListFor(model => model.TypeId, new SelectList(Model.Types, "ID", "Name"), Model.IsEditable ? null : (object)new { disabled = "disabled" }) 
                    <input type="hidden" id="TypeIdHidden" name="TypeIdHidden" value="@Model.TypeIdHidden" />
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(m => m.EducationTime):
                </td>
                <td>
                    @Html.TextBoxFor(model => model.EducationTime, Model.IsEditable ? (object)new { maxlength = 30 } : (object)new { @readonly = "read-only" }) 
                </td>
            </tr>
            <tr>
            <td>@Html.LabelFor(model => model.Attachment):</td>
                <td>
                    @if (!string.IsNullOrEmpty(Model.Attachment))
                    {
                        <a class="ui-notify-close" id="ScanUrl" href='@Url.Action("ViewAttachment", new { Id = Model.AttachmentId })' style="cursor:hand" target="_blank" >@Model.Attachment</a>
                    }
                    <input type="hidden" id="Attachment" name="Attachment" value="@Model.Attachment" />
                    <input type="hidden" id="AttachmentId" name="AttachmentId" value="@Model.AttachmentId" />
                    <input type="hidden" id="IsDeleteScanAvailable" name="IsDeleteScanAvailable" value="@Model.IsDeleteScanAvailable" />
                    <input type="button" id="DeleteScanBtn" value="Удалить скан" onclick="deleteAttachment();" @if (!Model.IsDeleteScanAvailable)
                                                                                           {<text>style="display:none"</text>}/>
                </td>
            </tr>
            <tr @if (!Model.IsEditable) {<text>style="display:none"</text>}>    
                <td>Прикрепить скан </td>
                <td><input id="FileContext" type="file" name="file"/>&nbsp;<span style="color:Red">размер файла - не более 2 Мб</span></td>
            </tr>
             <tr>
                <td>
                    @Html.LabelFor(m => m.IsStaffApproved):
                </td>
                <td>
                    @Html.CheckBox("IsStaffApproved", Model.IsStaffApproved, Model.IsStaffApproveAvailable ? null : (object)new { disabled = "disabled" }) 
                     Отправить на согласование
                    <input type="hidden" id="IsStaffApproveAvailable" name="IsStaffApproveAvailable" value="@Model.IsStaffApproveAvailable" />
                    <input type="hidden" id="IsStaffApprovedHidden" name="IsStaffApprovedHidden" value="@Model.IsStaffApprovedHidden" />
                    @Model.StaffFio
                    <input type="hidden" id="StaffFio" name="StaffFio" value="@Model.StaffFio" />
                </td>
            </tr>
             <tr>
                <td>
                <input type="hidden" id="Id" name="Id" value="@Model.Id" />
                <input type="hidden" id="UserId" name="UserId" value="@Model.UserId" />
                <input type="hidden" id="Version" name="Version" value="@Model.Version" />
                <input type="hidden" id="IsSaveAvailable" name="IsSaveAvailable" value="@Model.IsSaveAvailable" />
                <input type="hidden" id="IsDelete" name="IsDelete" value="@Model.IsDeleted" />
                <input type="hidden" id="IsEditable" name="IsEditable" value="@Model.IsEditable" />
                <input type="hidden" id="IsManagerEditable" name="IsManagerEditable" value="@Model.IsManagerEditable" />
                <input type="hidden" id="DateCreated" name="DateCreated" value="@Model.DateCreated" />
                    @Html.LabelFor(m => m.IsManagerApproved):
                </td>
                <td>
                    @Html.CheckBox("IsManagerApproved", Model.IsManagerApproved, Model.IsManagerApproveAvailable ? null : (object)new { disabled = "disabled" }) 
                    Кандидат приглашен на собеседование
                    <input type="hidden" id="IsManagerApprovedHidden" name="IsManagerApprovedHidden" value="@Model.IsManagerApprovedHidden" />
                    <input type="hidden" id="IsManagerApproveAvailable" name="IsManagerApproveAvailable" value="@Model.IsManagerApproveAvailable" />
                    <input type="hidden" id="IsManagerRejectAvailable" name="IsManagerRejectAvailable" value="@Model.IsManagerRejectAvailable" />
                    @Model.ManagerFio
                    <input type="hidden" id="ManagerFio" name="ManagerFio" value="@Model.ManagerFio" />
                    
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(m => m.RejectReason):
                </td>
                <td>
                    @Html.TextBoxFor(model => model.RejectReason, Model.IsManagerEditable ? (object)new { maxlength = 100, style = "width:500px" } : (object)new { @readonly = "read-only", style = "width:500px" }) 
                </td>
            </tr>
              <tr>
                <td>
                    @Html.LabelFor(m => m.IsEducationExists):
                </td>
                <td>
                    @Html.DropDownListFor(model => model.IsEducationExists, new SelectList(Model.IsEducationExistsValues, "ID", "Name"), Model.IsManagerEditable ? null : (object)new { disabled = "disabled" }) 
                    <input type="hidden" id="IsEducationExistsHidden" name="IsEducationExistsHidden" value="@Model.IsEducationExistsHidden" />
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(m => m.DateAccept)
                </td>
                <td>
                    @if (Model.IsManagerEditable)
                    {
                        @Html.EditorFor(model => model.DateAccept)
                    }
                    else
                    {
                        @Html.DisplayFor(model => model.DateAccept)
                        @Html.HiddenFor(model => model.DateAccept)
                    } 
                </td>
            </tr>
             <tr>
                <td>
                   <input type="submit" value="Сохранить" onclick="return ValidateForm();" @if (!Model.IsSaveAvailable)
                                                                                           {<text>style="display:none"</text>}/>
                </td>
                <td style="text-align:right">
                    <input type="submit" value="Отклонить отчет" onclick="return Delete();" @if (!Model.IsManagerRejectAvailable)
                                                                                      {<text>style="display:none"</text>}/>
                </td>
            </tr>
             <tr>
                <td colspan="2">
                   <input type="button" value="Добавить кандидата"  onclick="@("window.location.href='" + @Url.Action("CreateReport", new { id = Model.Id}) + "'");" @if (!Model.IsAddAvailable) {<text>style="display:none"</text>}/>
                   <input type="button" value="Печать логина и пароля" name="PrintButton" onclick="window.location.href='@Url.Action("GetLoginPrintForm", new { id = Model.Id })';" 
                                                                @if (!Model.IsPrintLoginAvailable) {<text>style="display:none"</text>}  />

                </td>
              </tr>
        </table>
    </div>
}
<script type="text/javascript">
 var actionDepUrl = "@Url.Action("GetChildren", "Home")";
 var actionDepDialogUrl = "@Url.Action("DepartmentDialog", "Home")";
  $(document).ready(function () {
    $("#DateAccept").datepicker();
    $("#ColloquyDate").datepicker();
    $(".hasDatepicker").width("75px");
   });
    function Delete() {
        if($("#IsManagerEditable").val())
        {
           clearControlErrors($("#DateAccept"));
            if($("#DateAccept").val())
            {
                addControlError($("#DateAccept"),'Поле не может быть заполнено,если отчет отклоняется');
                return false;
            }
        }
        $("#IsDelete").val("true");
        return true;
    }
    function ValidateForm()
    {
        var result = true;
        if($("#IsEditable").val())
        {
            if(!IsFieldNotEmpty($("#Name")))
                result = false;
            if(!IsFieldNotEmpty($("#Phone")))
                result = false;
            if(!IsFieldNotEmpty($("#Email")))
                result = false;
            else if (!isEmailAddress($("#Email").val()))
            {
                addControlError($("#Email"),'Неправильный адрес');
                result = false;
            }
            clearControlErrors($("#EducationTime"));
            if($("#TypeId").val() == 1)
            {
                if(!IsFieldNotEmpty($("#EducationTime")))
                    result = false;
            }
            if(!IsFieldNotEmpty($("#ColloquyDate")))
                result = false;
        }
        clearControlErrors($("#IsEducationExists"));
        clearControlErrors($("#RejectReason"));
        if($("#IsManagerEditable").val())
        {
            if(($("#DateAccept").val()) && ($("#IsEducationExists").val() == -1))
            {
                 addControlError($("#IsEducationExists"),'Нужно указать прошел ли кандидат обучение');
                 result = false;
            }
            if($("#RejectReason").val())
            {
                addControlError($("#RejectReason"),'Поле используется только при отклонении отчета.Для отклонения отчета используйте кнопку <Отклонить отчет>');
                 result = false;
            }
        }
        return result;
    }
    function IsFieldNotEmpty(control)
    {
        clearControlErrors(control);
        if(control.val() == '' )
        {
            addControlError(control,'Обязательное поле');
            return false;
        }
        return true;
    }
    

    function isEmailAddress(str) {
        var pattern =/^\w+([\.-]?\w+)*@@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
        return pattern.test(str);  // returns a boolean
    }
    function deleteAttachment(){
        var id =  $("#AttachmentId").val(); 
        var actionUrl="@Url.Action("DeleteAttachment", "Appointment")";
        var url = actionUrl + "?Id=" + id;
        $.getJSON(url,
                       function (result) {
                            if(!result.Result){
                                alert('Ошибка удаления скана:'+ result.Error);
                                //$("#AttachmentError").text(result.Error);
                                //$("#AttachmentError").show(); 

                            }
                            else{
                               $("#Attachment").val("");
                               $("#AttachmentId").val("0"); 
                               $("#IsDeleteScanAvailable").val("false");      
                               $("#DeleteScanBtn").hide();       
                               $("#IsStaffApproveAvailable").val("false");     
                               $("#IsStaffApproved").attr("checked",false);
                               $("#IsStaffApproved").attr("disabled","disable");
                                $("#ScanUrl").hide();                          
                           }
                       }
                     );
        return false;
    }

</script> 