@using Reports.Core
@using Reports.Presenters.Services.Impl
@using Reports.Presenters.UI.Bl.Impl;
@model Reports.Presenters.UI.ViewModel.AppointmentReportEditModel
@{
    var dto = UserDto.Deserialize(((FormsIdentity)(HttpContext.Current.User.Identity)).Ticket.UserData);
    Layout = "~/Views/Shared/_LayoutAppointment.cshtml";
    ViewBag.Title = "Отчет по подбору сотрудника";
}
<div style="visibility:hidden">
<div id="AddEmployment" title="Добавление кандидата">
@using (Html.BeginForm("CreateCandidate", "Employment", FormMethod.Post))
{
    <div class="doc-wrap">
            <fieldset class="bordered doc-wrap panel">
            <legend>Добавление кандидата</legend>
            <div class="formfield">
                <label>ФИО</label>
                <input type="text" name="Surname" value="@Model.Name" />
            </div>
            <div class="formfield clear">
                <label>Паспортные данные</label>
                <input type="text" id="PassportData" name="PassportData" />
            </div>
            <div class="formfield clear">
                <label>Снилс</label>
                <input type="text" id="SNILS" name="SNILS" />
            </div>
            <div class="formfield clear">
                <label>Дата рождения</label>
                <input type="text" class="DateSelector" id="DateOfBirth" name="DateOfBirth" />
            </div>
            <div class="formfield clear">
               <label>Департамент</label>
            </div>
            <div class="formfield">
                <label>@Model.DepartmentName</label>
                <input type="hidden" name="DepartmentId" value="@Model.DepartmentId" />
            </div>
            
            <div class="formfield clear">
                <label>Сотрудник отдела кадров</label>
                @Html.DropDownList("PersonnelId", new SelectList(Model.Personnels, "Id", "Name"))
            </div>
            <input type="hidden" name ="OnBehalfOfManagerId" value='@Model.ManagerId' />
            <div id="IsFixedTermContractContainer" class="formfield clear">
                Вид ТД<br />
                @Html.RadioButton("IsFixedTermContract", false)<label>Бессрочный</label>
                @Html.RadioButton("IsFixedTermContract", true)<label>Срочный</label>
            </div>
            <div id="IsTrainingNeededContainer" class="formfield clear">
                <label>Обучение требуется</label>
                @Html.RadioButton("IsTrainingNeeded", false, new { @id = "IsTrainingNeededFalse" })<label for="IsTrainingNeededFalse" id="lblTNFalse">Нет</label>
                @Html.RadioButton("IsTrainingNeeded", true, new { @id = "IsTrainingNeededTrue" })<label for="IsTrainingNeededTrue" id="lblTNTrue" >Да</label>
            </div>
            <input type="hidden" name="AppointmentReportId" value="@Model.Id"/>
            <input type="hidden" name="AppointmentId" value="@Model.AppId"/>
        </fieldset>
    </div>
    <div class="clear">        
       <button type="submit">Сохранить</button>
    </div>
}
</div>
</div>
@using (Html.BeginForm("AppointmentReportEdit", "Appointment", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
                <input type="hidden" id="Id" name="Id" value="@Model.Id" />
                <input type="hidden" id="UserId" name="UserId" value="@Model.UserId" />
                <input type="hidden" id="Version" name="Version" value="@Model.Version" />
                <input type="hidden" id="IsSaveAvailable" name="IsSaveAvailable" value="@Model.IsSaveAvailable" />
                <input type="hidden" id="IsDelete" name="IsDelete" value="@Model.IsDeleted" />
                <input type="hidden" id="IsEditable" name="IsEditable" value="@Model.IsEditable" />
                <input type="hidden" id="IsManagerEditable" name="IsManagerEditable" value="@Model.IsManagerEditable" />
                <input type="hidden" id="IsColloquyDateEditable" name="IsColloquyDateEditable" value="@Model.IsColloquyDateEditable" />
                <input type="hidden" id="DateCreated" name="DateCreated" value="@Model.DateCreated" />
                <input type="hidden" id="IsStaffSetDateAcceptAvailable" name="IsStaffSetDateAcceptAvailable" value="@Model.IsStaffSetDateAcceptAvailable" />
                <input type="hidden" id="Attachment" name="Attachment" value="@Model.Attachment" />
                <input type="hidden" id="AttachmentId" name="AttachmentId" value="@Model.AttachmentId" />
                <input type="hidden" id="DepartmentName" name="DepartmentName" value="@Model.DepartmentName" />
                <input type="hidden" id="IsDeleteScanAvailable" name="IsDeleteScanAvailable" value="@Model.IsDeleteScanAvailable" />
                <input type="hidden" id="City" name="City" value="@Model.City" />
    <div class="doc-wrap">
        <table style="width:100%">
        <tr>
        <td colspan='2'>
        Данный отчёт к заявке №@Model.AppointmentNumber необходимо заполнить специалисту по подбору персонала. При необходимости создания еще одного отчёта к данной заявке для другого кандидата, необходимо нажать на кнопку "Добавить резюме кандидата."
        </td>
        </tr>
            <tr>
                <td colspan="2">
                    @Html.ValidationSummary(false)
                    <div id="Error" style="color:Red;display:none;"></div>
                </td>
            </tr>
            <tr>
                <td colspan="2">
                    @Html.Partial("ManagerInfoView", Model)
                </td>
            </tr>
       </table>
    </div>
    <div class="doc-wrap">
    <fieldset>
    <legend>Реквизиты кандидата</legend>
        <table style="width:100%">
            
            @if (Model.IsDeleted)
            { 
            <tr>
                <td colspan="2" style="color:Red">Отчет отклонен. Отклонил(а) @Model.DeleteUser</td>
            </tr>
            }
             <tr>
                <td style="width:280px">
                    @Html.LabelFor(m => m.DepartmentName):
                </td>
                <td>
                    <label id="DepartmentNameLabel">@Model.DepartmentName</label>
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(m => m.City):
                </td>
                <td>
                     <label>@Model.City</label>
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(m => m.CandidatePosition):
                </td>
                <td>
                     <label>@Model.CandidatePosition</label>
                     <input type="hidden" id="CandidatePosition" name="CandidatePosition" value="@Model.CandidatePosition" />
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(m => m.VacationCount):
                </td>
                <td>
                     <label>@Model.VacationCount</label>
                     <input type="hidden" id="VacationCount" name="VacationCount" value="@Model.VacationCount" />
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(m => m.Reason):
                </td>
                <td>
                    <label>@Model.Reason</label>
                    <input type="hidden" id="Reason" name="Reason" value="@Model.Reason" />
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(m => m.Name):
                </td>
                <td>
                    @Html.TextBoxFor(model => model.Name, Model.IsEditable ? (object)new { maxlength = 50, style = "width:500px" } : (object)new { @readonly = "read-only", style = "width:500px" }) 
                </td>
            </tr>
            @if(Model.ShowStaff){
             <tr>
                <td>
                    @Html.LabelFor(m => m.Phone):
                </td>
                <td>
                    @Html.TextBoxFor(model => model.Phone, Model.IsEditable ? (object)new { maxlength = 30 } : (object)new { @readonly = "read-only" }) 
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(m => m.Email):
                </td>
                <td>
                    @Html.TextBoxFor(model => model.Email, Model.IsEditable ? (object)new { maxlength = 30 } : (object)new { @readonly = "read-only" }) 
                </td>
            </tr>
            }
             <tr>
                <td>
                    @Html.LabelFor(m => m.AppointmentNumber):
                </td>
                <td>
                    <label>@Model.AppointmentNumber</label>
                    <input type="hidden" id="AppointmentNumber" name="AppointmentNumber" value="@Model.AppointmentNumber" />
                </td>
            </tr>
            @if (Model.ShowStaff)
            {
            <tr>
                <td>
                    @Html.LabelFor(m => m.TypeId):
                </td>
                <td>
                    @Html.DropDownListFor(model => model.TypeId, new SelectList(Model.Types, "ID", "Name"), Model.IsEditable ? (object)new { onchange = "onTypeChange();" } : (object)new { disabled = "disabled" }) 
                    <input type="hidden" id="TypeIdHidden" name="TypeIdHidden" value="@Model.TypeIdHidden" />
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(m => m.EducationTime):
                </td>
                <td>
                    @Html.TextBoxFor(model => model.EducationTime, Model.IsEditable ? (object)new { maxlength = 30 } : (object)new { @readonly = "read-only" }) 
                </td>
            </tr>
            <tr>

            <td>@Html.LabelFor(model => model.Attachment):</td>
                <td>
                    @if (!string.IsNullOrEmpty(Model.Attachment))
                    {
                        <a class="ui-notify-close" id="ScanUrl" href='@Url.Action("ViewAttachment", new { Id = Model.AttachmentId })' style="cursor:hand" target="_blank" >@Model.Attachment</a>
                    }
                    
                    <input type="button" id="DeleteScanBtn" value="Удалить скан" onclick="deleteAttachment();" @if (!Model.IsDeleteScanAvailable)
                                                                                                               {<text>style="display:none"</text>}/>
                </td>
            </tr>
            <tr @if (!Model.IsEditable)
                {<text>style="display:none"</text>}>    
                <td>Прикрепить скан </td>
                <td><input id="FileContext" type="file" name="file"/>&nbsp;<span style="color:Red">размер файла - не более 2 Мб</span></td>
            </tr>
            <tr>
                <td>Комментарий к резюме</td>
                <td>@Html.TextAreaFor(m => m.ResumeComment, Model.IsManagerEditable ? (object)new { maxlength = 100 } : (object)new { @readonly = "read-only" })</td>
            </tr>
            }
        </table>
     </fieldset>
     <table>
     @if (Model.ShowStaff)
     {
     <tr>
                <td>
                    @Html.LabelFor(m => m.IsStaffApproved):
                </td>
                <td>
                    @Html.CheckBox("IsStaffApproved", Model.IsStaffApproved, Model.IsStaffApproveAvailable ? null : (object)new { disabled = "disabled" }) 
                     Отправить на согласование
                    <input type="hidden" id="IsStaffApproveAvailable" name="IsStaffApproveAvailable" value="@Model.IsStaffApproveAvailable" />
                    <input type="hidden" id="IsStaffApprovedHidden" name="IsStaffApprovedHidden" value="@Model.IsStaffApprovedHidden" />
                    @Model.StaffFio
                    <input type="hidden" id="StaffFio" name="StaffFio" value="@Model.StaffFio" />
                </td>
            </tr>
             <tr>
                <td>
                
                    @Html.LabelFor(m => m.IsManagerApproved):
                </td>
                <td>
                    @Html.CheckBox("IsManagerApproved", Model.IsManagerApproved, Model.IsManagerApproveAvailable ? null : (object)new { disabled = "disabled" }) 
                    Кандидат приглашен на собеседование
                    <input type="hidden" id="IsManagerApprovedHidden" name="IsManagerApprovedHidden" value="@Model.IsManagerApprovedHidden" />
                    <input type="hidden" id="IsManagerApproveAvailable" name="IsManagerApproveAvailable" value="@Model.IsManagerApproveAvailable" />
                    <input type="hidden" id="IsManagerRejectAvailable" name="IsManagerRejectAvailable" value="@Model.IsManagerRejectAvailable" />
                    @Model.ManagerFio
                    <input type="hidden" id="ManagerFio" name="ManagerFio" value="@Model.ManagerFio" />
                    
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(m => m.ColloquyDate):
                </td>
                <td>
                    @if (Model.IsColloquyDateEditable)
                    {
                        @Html.EditorFor(model => model.ColloquyDate)
                    }
                    else
                    {
                        @Html.DisplayFor(model => model.ColloquyDate)
                        @Html.HiddenFor(model => model.ColloquyDate)
                    } 
                </td>
            </tr>
             <tr>
                <td>
                    @Html.LabelFor(m => m.IsColloquyPassed):
                </td>
                <td>
                    @Html.DropDownListFor(model => model.IsColloquyPassed, new SelectList(Model.IsColloquyPassedValues, "ID", "Name"), Model.IsManagerEditable ? null : (object)new { disabled = "disabled" }) 
                    <input type="hidden" id="IsColloquyPassedHidden" name="IsColloquyPassedHidden" value="@Model.IsColloquyPassedHidden" />
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(m => m.RejectReason):
                </td>
                <td>
                    @Html.TextBoxFor(model => model.RejectReason, Model.IsManagerRejectAvailable ? (object)new { maxlength = 100, style = "width:500px" } : (object)new { @readonly = "read-only", style = "width:500px" }) 
                </td>
            </tr>
              <tr>
                <td>
                    @Html.LabelFor(m => m.IsEducationExists):
                </td>
                <td>
                    @Html.DropDownListFor(model => model.IsEducationExists, new SelectList(Model.IsEducationExistsValues, "ID", "Name"), Model.IsManagerEditable || Model.IsStaffSetDateAcceptAvailable ? null : (object)new { disabled = "disabled" }) 
                    <input type="hidden" id="IsEducationExistsHidden" name="IsEducationExistsHidden" value="@Model.IsEducationExistsHidden" />
                </td>
            </tr>@*
            <tr>
                <td>
                    @Html.LabelFor(m => m.DateAccept)
                </td>
                <td>
                    @if (Model.IsManagerEditable || Model.IsStaffSetDateAcceptAvailable)
                    {
                        @Html.EditorFor(model => model.DateAccept)
                    }
                    else
                    {
                        @Html.DisplayFor(model => model.DateAccept)
                        @Html.HiddenFor(model => model.DateAccept)
                    } 
                </td>
            </tr>*@
             <tr>
                <td>
                   <input type="submit" value="Сохранить" onclick="return ValidateForm();" @if (!Model.IsSaveAvailable)
                                                                                           {<text>style="display:none"</text>}/>
                   @* <input type="submit" value="Согласовать за всех" onclick="return ValidateFormApproveAll();" @if (!Model.ApproveForAllAvailable) {<text>style="display:none"</text>}/>
                    <input type="hidden" id="ApproveForAllAvailable" name="ApproveForAllAvailable" value="@Model.ApproveForAllAvailable" />
                    <input type="hidden" id="ApproveForAll" name="ApproveForAll" value="@Model.ApproveForAll" />*@
                </td>
                <td style="text-align:right">
                    <input type="submit" value="Отклонить отчет" onclick="return Delete();" @if (!Model.IsManagerRejectAvailable)
                                                                                            {<text>style="display:none"</text>}/>
                </td>
            </tr>
     }
             <tr>
                <td colspan="2">
                    @if (Model.IsColloquyPassed == 1 && (dto.Id == Model.UserId) && !(Model.Candidates!=null && Model.Candidates.Any()))
                    {
                    <input type="button" value="Выгрузить в приём" onclick="$('#AddEmployment').dialog('open');"/>
                    }
                    @if (!Model.IsClosed)
                    {
                   <input type="button" value="Добавить резюме кандидата"  onclick="@("window.location.href='" + @Url.Action("CreateReport", new { id = Model.Id }) + "'");" @if (!Model.IsAddAvailable)
                                                                                                                                                                             {<text>style="display:none"</text>}/>
                    }
                   @*<input type="button" value="Печать логина и пароля" name="PrintButton" onclick="window.location.href='@Url.Action("GetLoginPrintForm", new { id = Model.Id })';" 
                                                                @if (!Model.IsPrintLoginAvailable)
                                                                {<text>style="display:none"</text>}  />*@

                </td>
              </tr>
     </table>
    </div>
                    if (Model.Candidates != null && Model.Candidates.Any())
                    {
    <div class="doc-wrap">
    Принятые сотрудники(@Model.Candidates.Count):
    <br />
    <table class="grid">
    <thead>
    <tr>
    <th>ФИО</th><th>Дата приёма</th><th>Статус</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var el in Model.Candidates)
    {
      <tr><td>@el.Name</td><td>@el.EmploymentDate</td><td>@el.Status</td></tr>
    }
    </tbody>
    </table>
    </div>  
                    }
     <br />
    <div class="comment-wrap">
        <table style="width:100%">
             <tr>
                <td colspan="2">
                    <div id="CommentModelContext">@Html.Partial("../Home/CommentPartial", Model.CommentsModel)</div>
                </td>
            </tr>
        </table>
    </div>
}
<script src="/Scripts/UIHelpers.js" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.maskedinput-1.2.2.js")" type="text/javascript"></script>
<script type="text/javascript">
 var actionDepUrl = "@Url.Action("GetChildren", "Home")";
 var actionDepDialogUrl = "@Url.Action("DepartmentDialog", "Home")";
  $(document).ready(function () {

    $("#AddEmployment").dialog({autoOpen: false});
    UIHelpers.attachDatepickerToInputs($('#DateOfBirth'), "-80:-14;-80Y;-14Y", true);
        jQuery(function ($) {
            $.mask.definitions['~'] = '[+-]';
            $('#SNILS').mask('999-999-999 99');
            $('#PassportData').mask('9999 999999');
        }); 
    $("#DateAccept").datepicker({changeMonth: true, changeYear: true});
    $("#ColloquyDate").datepicker({changeMonth: true, changeYear: true});
    $(".hasDatepicker").width("75px");
     onTypeChange();
   });
   function onTypeChange()
   {
        if($("#IsEditable").val())
        {
            var typeId = $("#TypeId").val();
            if(typeId == 1)
                $("#EducationTime").removeAttr("readonly");
            else
            {
                $("#EducationTime").val('');
                $("#EducationTime").attr("readonly", "readonly");
            }
        }            
    }
    function Delete() {
        var result = true;
        if($("#IsManagerEditable").val())
        {
            clearControlErrors($("#DateAccept"));
            if($("#DateAccept").val())
            {
                addControlError($("#DateAccept"),'Поле не может быть заполнено,если отчет отклоняется');
                result = false;
            }
        }
        if(!result)
            return false;
        $("#IsDelete").val("true");
        return true;
    }
    /*function ValidateFormApproveAll()
    {
        var result = ValidateForm();
        if(!result)
            return result;
        $("#ApproveForAll").val('True');
        return true;
    }*/
    function ValidateForm()
    {
        var result = true;
        if($("#IsEditable").val() == 'True')
        {
            if(!IsFieldNotEmpty($("#Name")))
                result = false;
            if(!IsFieldNotEmpty($("#Phone")))
                result = false;
            if(!IsFieldNotEmpty($("#Email")))
                result = false;
            else if (!isEmailAddress($("#Email").val()))
            {
                addControlError($("#Email"),'Неправильный адрес');
                result = false;
            }
            clearControlErrors($("#EducationTime"));
            /*if($("#TypeId").val() == 1)
            {
                if(!IsFieldNotEmpty($("#EducationTime")))
                    result = false;
            }*/
            /*if(!IsFieldNotEmpty($("#ColloquyDate")))
                result = false;*/
        }
        clearControlErrors($("#IsManagerApproved"));
        clearControlErrors($("#ColloquyDate"));
        if($("#IsColloquyDateEditable").val() == 'True')
        {
             if(isCheckboxChecked($("#IsManagerApproved")))
             {
                if(!IsFieldNotEmpty($("#ColloquyDate"))) 
                    result = false;
             }
             if(($("#ColloquyDate").val() != '') && !isCheckboxChecked($("#IsManagerApproved")))
             {
                 addControlError($("#IsManagerApproved"),'Поле "Кандидат приглашен на собеседование" должено быть отмечено - заполнено поле "Дата собеседования". ');
                 result = false;
             }
             if(isCheckboxChecked($("#IsManagerApproved")) && !isCheckboxChecked($("#IsStaffApproved")))
             {
                addControlError($("#IsStaffApproved"),'Поле "Отправить на согласование" должено быть отмечено - отмечено поле "Кандидат приглашен на собеседование". ');
                result = false;
             }
        }

      
        clearControlErrors($("#RejectReason"));
        if(($("#IsManagerRejectAvailable").val() == 'True') && $("#RejectReason").val())
        {
            addControlError($("#RejectReason"),'Поле используется только при отклонении отчета.Для отклонения отчета используйте кнопку <Отклонить отчет>. ');
                result = false;
        }
        clearControlErrors($("#IsEducationExists"));
        clearControlErrors($("#IsColloquyPassed"));
        if($("#IsStaffSetDateAcceptAvailable").val() == 'True')
        {
            if(($("#DateAccept").val()) && ($("#IsEducationExists").val() == -1))
            {
                 addControlError($("#IsEducationExists"),'Нужно указать, прошел ли кандидат обучение. ');
                 result = false;
            }
        }
        if($("#IsManagerEditable").val() == 'True')
        {
            if((!isCheckboxChecked($("#IsManagerApproved"))) && ($("#IsColloquyPassed").val() != -1))
            {
                  addControlError($("#IsManagerApproved"),'Поле "Кандидат приглашен на собеседование" должно быть отмечено - заполнено поле "Собеседование пройдено/не пройдено". ');
                  result = false;
            }
             if((!isCheckboxChecked($("#IsManagerApproved"))) && ($("#IsEducationExists").val() != -1))
            {
                  addControlError($("#IsManagerApproved"),'Поле "Кандидат приглашен на собеседование" должно быть отмечено - заполнено поле "Обучение пройдено/не пройдено". ');
                  result = false;
            }
             if((!isCheckboxChecked($("#IsManagerApproved"))) && ($("#DateAccept").val()))
            {
                  addControlError($("#IsManagerApproved"),'Поле "Кандидат приглашен на собеседование" должно быть отмечено - установлено дата приема на работу. ');
                  result = false;
            }
            if(($("#DateAccept").val() || ($("#IsEducationExists").val() != -1)) && ($("#IsColloquyPassed").val() == -1))
            {
                  addControlError($("#IsColloquyPassed"),'Нужно указать, пройдено ли собеседование. ');
                  result = false;
            }
            if(($("#IsEducationExists").val() != -1) && ($("#IsColloquyPassed").val() == 0))
            {
                  addControlError($("#IsColloquyPassed"),'В поле "Собеседование пройдено/не пройдено" выбрано значение "Нет" - непустой выбор в поле "Обучение пройдено/не пройдено" невозможен. ');
                  result = false;
            }
            if($("#DateAccept").val() && ($("#IsColloquyPassed").val() == 0))
            {
                  addControlError($("#IsColloquyPassed"),'В поле "Собеседование пройдено/не пройдено" выбрано значение "Нет" - установка даты приема на работу невозможна. ');
                  result = false;
            }
            if(($("#DateAccept").val()) && ($("#IsEducationExists").val() == -1))
            {
                 addControlError($("#IsEducationExists"),'Нужно указать, прошел ли кандидат обучение. ');
                 result = false;
            }
            
        }
        return result;
    }
    function IsFieldNotEmpty(control)
    {
        clearControlErrors(control);
        if(control.val() == '' )
        {
            addControlError(control,'Обязательное поле');
            return false;
        }
        return true;
    }
    function isCheckboxChecked(control)
    {
        return control.is(':checked');
    }
    function isEmailAddress(str) {
        var pattern =/^\w+([\.-]?\w+)*@@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
        return pattern.test(str);  // returns a boolean
    }
    function deleteAttachment(){
        var id =  $("#AttachmentId").val(); 
        var actionUrl="@Url.Action("DeleteAttachment", "Appointment")";
        var url = actionUrl + "?Id=" + id;
        $.getJSON(url,
                       function (result) {
                            if(!result.Result){
                                alert('Ошибка удаления скана:'+ result.Error);
                                //$("#AttachmentError").text(result.Error);
                                //$("#AttachmentError").show(); 

                            }
                            else{
                               $("#Attachment").val("");
                               $("#AttachmentId").val("0"); 
                               $("#IsDeleteScanAvailable").val("false");      
                               $("#DeleteScanBtn").hide();       
                               $("#IsStaffApproveAvailable").val("false");     
                               $("#IsStaffApproved").attr("checked",false);
                               $("#IsStaffApproved").attr("disabled","disable");
                               $("#IsManagerApproveAvailable").val("false");     
                               $("#IsManagerApproved").attr("checked",false);
                               $("#IsManagerApproved").attr("disabled","disable");
                               $("#ColloquyDate").val(""); 
                               $("#ColloquyDate").attr("disabled","disable");
                               $("#DateAccept").val(""); 
                               $("#DateAccept").attr("disabled","disable");
                               $("#IsEducationExists").val(-1)   
                               $("#IsEducationExists").attr("disabled","disable"); 
                               $("#IsColloquyPassed").val(-1)   
                               $("#IsColloquyPassed").attr("disabled","disable"); 
                               $("#RejectReason").val(""); 
                                $("#IsColloquyDateEditable").val('False');  
                                $("#IsManagerEditable").val('False');   
                               $("#ScanUrl").hide();                          
                           }
                       }
                     );
        return false;
    }

</script> 