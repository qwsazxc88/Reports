@model Reports.Presenters.UI.ViewModel.Employment2.CreateCandidateModel
@{
    Layout = "~/Views/Shared/_LayoutGeneral.cshtml";
    ViewBag.Title = "Прием - Добавление кандидата";
}

<span style="color:red;">@ViewBag.Error</span>
@Html.ValidationSummary()


@using (Html.BeginForm("CreateCandidate", "Employment", FormMethod.Post, new { id = "CreateCandidateForm" }))
{
    @Html.HiddenFor(m => m.IsSP)

    <div class="doc-wrap">
            <fieldset class="bordered doc-wrap panel">
            <legend>Добавление кандидата</legend>
            <div class="formfield">
                @Html.LabelFor(m => m.Surname)&nbsp;@Html.ValidationMessageFor(m => m.Surname)<br />
                @Html.TextBoxFor(m => m.Surname)
            </div>
            <div class="formfield clear">
                @Html.LabelFor(m => m.PassportData)&nbsp;@Html.ValidationMessageFor(m => m.PassportData)<br />
                @Html.TextBoxFor(m => m.PassportData)
            </div>
            <div class="formfield clear">
                @Html.LabelFor(m => m.SNILS)&nbsp;@Html.ValidationMessageFor(m => m.SNILS)<br />
                @Html.TextBoxFor(m => m.SNILS)
            </div>
            <div class="formfield clear">
                @Html.LabelFor(m => m.DateOfBirth)&nbsp;@Html.ValidationMessageFor(m => m.DateOfBirth)<br />
                @Html.TextBoxFor(m => m.DateOfBirth)
            </div>
            <div class="formfield clear">
                @Html.LabelFor(m => m.DepartmentName):
            </div>
            <div class="formfield">
                <label id="DepartmentNameLabel">@Model.DepartmentName</label>
                @Html.HiddenFor(m => m.DepartmentName)
                @Html.HiddenFor(m => m.DepartmentId)
            </div>
            <div class="formfield clear">
                <input type="button" value="Выбрать" onclick="changeDepartment(7);"/>
            </div>

            <div class="formfield clear">
                @Html.LabelFor(m => m.UserLinkId)<br />
                @Html.DropDownListFor(m => m.UserLinkId, new SelectList(Model.PostUserLinks, "Id", "Name"))
                <br />@Html.ValidationMessageFor(m => m.UserLinkId)
            </div>

            <div class="formfield clear">
                @Html.LabelFor(m => m.PersonnelId)<br />
                @Html.DropDownListFor(m => m.PersonnelId, new SelectList(Model.Personnels, "Id", "Name"))
            </div>

            <div id="IsFixedTermContractContainer" class="formfield clear">
                @Html.LabelFor(m => m.IsFixedTermContract)<br />
                @Html.RadioButtonFor(m => m.IsFixedTermContract, false, new { @id = "IsFixedTermContractFalse" })<label for="IsFixedTermContractFalse" id="lblFTCFalse" @if (!Model.IsFixedTermContract)
                                                                                                                                                                        {<text>style="border-color:red;"</text>}
                                                                                                                                                                        else
                                                                                                                                                                        {<text> style="border-color:none;"</text>}>Бессрочный</label>
                @Html.RadioButtonFor(m => m.IsFixedTermContract, true, new { @id = "IsFixedTermContractTrue" })<label for="IsFixedTermContractTrue" id="lblFTCTrue" @if (Model.IsFixedTermContract)
                                                                                                                                                                    {<text>style="border-color:red;"</text>}
                                                                                                                                                                    else
                                                                                                                                                                    {<text> style="border-color:none;"</text>}>Срочный</label>


            </div>

            <div id="IsTrainingNeededContainer" class="formfield clear">
                @Html.LabelFor(m => m.IsTrainingNeeded)<br />
                @Html.RadioButtonFor(m => m.IsTrainingNeeded, false, new { @id = "IsTrainingNeededFalse" })<label for="IsTrainingNeededFalse" id="lblTNFalse" @if (!Model.IsTrainingNeeded)
                                                                                                                                                              {<text>style="border-color:red;"</text>}
                                                                                                                                                              else
                                                                                                                                                              {<text> style="border-color:none;"</text>}>Нет</label>
                @Html.RadioButtonFor(m => m.IsTrainingNeeded, true, new { @id = "IsTrainingNeededTrue" })<label for="IsTrainingNeededTrue" id="lblTNTrue" @if (Model.IsTrainingNeeded)
                                                                                                                                                          {<text>style="border-color:red;"</text>}
                                                                                                                                                          else
                                                                                                                                                          {<text> style="border-color:none;"</text>}>Да</label>
            </div>

            <div id="IsBeforEmploymentContainer" class="formfield clear" @if (!Model.IsTrainingNeeded)
                                                                         {<text>style="display:none;"</text>}>
                @Html.LabelFor(m => m.IsBeforEmployment)<br />
                @Html.RadioButtonFor(m => m.IsBeforEmployment, false, new { @id = "IsBeforEmploymentFalse" })<label for="IsBeforEmploymentFalse" id="lblBEFalse" @if (!Model.IsBeforEmployment)
                                                                                                                                                                 {<text>style="border-color:red;"</text>}
                                                                                                                                                                 else
                                                                                                                                                                 {<text> style="border-color:none;"</text>}>Нет</label>
                @Html.RadioButtonFor(m => m.IsBeforEmployment, true, new { @id = "IsBeforEmploymentTrue" })<label for="IsBeforEmploymentTrue" id="lblBETrue" @if (Model.IsBeforEmployment)
                                                                                                                                                             {<text>style="border-color:red;"</text>}
                                                                                                                                                             else
                                                                                                                                                             {<text> style="border-color:none;"</text>}>Да</label>
            </div>

            <div class="formfield clear">
                @Html.LabelFor(m => m.PlanRegistrationDate)&nbsp;@Html.ValidationMessageFor(m => m.PlanRegistrationDate)<br />
                @Html.TextBoxFor(m => m.PlanRegistrationDate)
            </div>
            @if (Model.IsOnBehalfOfManagerAvailable)
            {
                @Html.HiddenFor(m => m.IsOnBehalfOfManagerAvailable)
                <div class="formfield clear">
                    @Html.LabelFor(m => m.OnBehalfOfManagerName):
                </div>
                <div class="formfield">
                    <label id="OnBehalfOfManagerNameLabel">@Model.OnBehalfOfManagerName</label>
                    @Html.HiddenFor(m => m.OnBehalfOfManagerId)
                    @Html.HiddenFor(m => m.OnBehalfOfManagerName)
                </div>
                <div class="formfield clear">
                    <input type="button" value="Выбрать" onclick="changeManager();"/>
                </div>
            }
            @Html.HiddenFor(m => m.AppointmentReportId)
            @Html.HiddenFor(m => m.AppointmentId)

            <div class="formfield clear">
                @Html.LabelFor(m => m.PyrusNumber)&nbsp;@Html.ValidationMessageFor(m => m.PyrusNumber)<br />
                @Html.TextBoxFor(m => m.PyrusNumber)
            </div>
        </fieldset>
    </div>
    

    <div class="clear">        
        @if (!Model.UserId.HasValue)
        {
            <button type="button" id="btnSave">Сохранить</button>
        }
        else
        {
            <a href="@Url.Action("PrintCreatedCandidate", new { userId = Model.UserId })" target="_blank">Распечатать логин и пароль кандидата</a>
        }
    </div>
}

<script src="/Scripts/UIHelpers.js" type="text/javascript"></script>

<script type="text/javascript">
    var actionDepDialogUrl = "@Url.Action("DepartmentDialog", "Home")";
    var actionDepUrl = "@Url.Action("GetChildren", "Home")";
    var actionSelectManagerDialogUrl = "@Url.Action("SelectManagerDialog", "Appointment")";

    $(document).ready(function () {
        $("#DepartmentId").change(function(){ 
            $("#IsSP").val(true);
            $("#CreateCandidateForm").submit();
        });

        $("#btnSave").click(function(){
            $("#IsSP").val(false);
            $("#CreateCandidateForm").submit();
        });

        UIHelpers.attachDatepickerToInputs($('#DateOfBirth'), "-80:-14;-80Y;-14Y", true);
        //UIHelpers.attachDatepickerToInputs($('#PlanRegistrationDate'), "-80:-14;-80Y;-14Y", true);
        $('#PlanRegistrationDate').datepicker({changeYear: true,
                changeMonth: true});
        jQuery(function ($) {
            $.mask.definitions['~'] = '[+-]';
            $('#SNILS').mask('999-999-999 99');
            $('#PassportData').mask('9999 999999');
        });  

        $('#IsFixedTermContractContainer').buttonset();
        $('#IsTrainingNeededContainer').buttonset();
        $('#IsBeforEmploymentContainer').buttonset();
        //$("#IsTrainingNeeded").select(alert($("#IsTrainingNeeded").val()));

        if($("#IsTrainingNeeded").val() == 'True'){$('#IsBeforEmploymentContainer').show();}
        else {$('#IsBeforEmploymentContainer').hide();}

        //подкрашиваем переключатели
        $("#IsFixedTermContractTrue").click(function(){
            $("#lblFTCTrue").css("border-color", "red");
            $("#lblFTCFalse").css("border-color", "silver");
        });
        $("#IsFixedTermContractFalse").click(function(){
            $("#lblFTCTrue").css("border-color", "silver");
            $("#lblFTCFalse").css("border-color", "red");
        });


        $("#IsTrainingNeededTrue").click(function(){
            $("#lblTNTrue").css("border-color", "red");
            $("#lblTNFalse").css("border-color", "silver");
            $("#IsBeforEmploymentContainer").show();
        });
        $("#IsTrainingNeededFalse").click(function(){
            $("#lblTNTrue").css("border-color", "silver");
            $("#lblTNFalse").css("border-color", "red");
            $("#IsBeforEmploymentContainer").hide();
        });

        $("#IsBeforEmploymentTrue").click(function(){
            $("#lblBETrue").css("border-color", "red");
            $("#lblBEFalse").css("border-color", "silver");
        });
        $("#IsBeforEmploymentFalse").click(function(){
            $("#lblBETrue").css("border-color", "silver");
            $("#lblBEFalse").css("border-color", "red");
        });
    });

    function changeManager() {
            var title = "Выбор руководителя";

            var newDiv = $("<div>")
                .attr("id", "divSelectManagerDialog")
                .text("Подождите, идет загрузка данных ...");
            
            $(newDiv).load(actionSelectManagerDialogUrl + "?" + " #selectManagerDialogTable", function (response, status, xhr) {
                if (status == "error") {
                    var msg = "Произошла ошибка: ";
                    $(newDiv).html("<div style='color:Red'>" + msg + xhr.status + " " + xhr.statusText + "</div>");
                }
            });
            
            $(newDiv).dialog(
            {
                // initialize dialog box
                autoOpen: true,
                modal: true,
                title: title,
                width: 780,
                height: 160,
                // fix IE6  
                bgiframe: true,
                close: function (event, ui) {
                    $(this).dialog("destroy").remove();
                },
                buttons:
                {
                    "Выбрать": function () {
                        $("#OnBehalfOfManagerId").val($("#ManagerId").val());
                        $("#OnBehalfOfManagerName").val($("#ManagerId option:selected").text());
                        $("#OnBehalfOfManagerNameLabel").text($("#OnBehalfOfManagerName").val());
                        $(this).dialog("close");
                    }
                }
            });
            
        }
</script>