@model Reports.Presenters.UI.ViewModel.Employment2.BackgroundCheckModel
@using Reports.Presenters.Services.Impl
@using Reports.Core
@{
    var dto = UserDto.Deserialize(((FormsIdentity)(HttpContext.Current.User.Identity)).Ticket.UserData);
    if ((dto.UserRole & UserRole.Candidate) > 0)
    {
        Layout = "~/Views/Shared/_LayoutEmployment.cshtml";
        ViewBag.Title = "Прием - Департамент безопасности";
    }
}

@Html.Partial("CandidateState", Model.CandidateStateModel)

<span style="color:red;">@ViewBag.Error</span>
<span style="font-size:large;">@Html.ValidationMessageFor(m => m.IsValidate)</span>

@using (Html.BeginForm("BackgroundCheck", "Employment", FormMethod.Post, new { enctype = "multipart/form-data", id = "BackgroundCheckForm" }))
{
    <input type="hidden" id="RowID" name="RowID" value="@Model.RowID" />
    @Html.HiddenFor(m => m.UserId)
    
    
    <div style="float:left">
    <fieldset class="bordered doc-wrap panel">
    <legend>Департамент безопасности</legend>
        <div class="formfield clear">
            @Html.LabelFor(m => m.AverageSalary)&nbsp;@Html.ValidationMessageFor(m => m.AverageSalary)<br />
            @Html.TextBoxFor(m => m.AverageSalary, new { @class = "calc" })
        </div>
        <div class="formfield clear">
            @Html.LabelFor(m => m.Liabilities)&nbsp;@Html.ValidationMessageFor(m => m.Liabilities)<br />
            @Html.TextAreaFor(m => m.Liabilities, new { @class = "triplewidth" })
        </div>
        <div class="formfield clear">
            @Html.LabelFor(m => m.PreviousDismissalReason)&nbsp;@Html.ValidationMessageFor(m => m.PreviousDismissalReason)<br />
            @Html.TextBoxFor(m => m.PreviousDismissalReason, new { @class = "doublewidth" })
        </div>
        <div class="formfield clear">
            @Html.LabelFor(m => m.PreviousSuperior)&nbsp;@Html.ValidationMessageFor(m => m.PreviousSuperior)<br />
            @Html.TextBoxFor(m => m.PreviousSuperior, new { @class = "doublewidth" })
        </div>
        <div class="formfield clear">
            @Html.LabelFor(m => m.PositionSought)&nbsp;@Html.ValidationMessageFor(m => m.PositionSought)<br />
            @Html.TextBoxFor(m => m.PositionSought, new { @class = "doublewidth" })
        </div>
        <div class="formfield clear">
            @Html.LabelFor(m => m.MilitaryOperationsExperience)&nbsp;@Html.ValidationMessageFor(m => m.MilitaryOperationsExperience)<br />
            @Html.TextBoxFor(m => m.MilitaryOperationsExperience, new { @class = "doublewidth" })
        </div>
        <div class="formfield clear">
            @Html.LabelFor(m => m.HasDriversLicense)<br />
            <div class="formfield clear" id="DLContainer">
                @Html.RadioButtonFor(m => m.HasDriversLicense, true, new { @id = "IsDLTrue" })<label id="lblDTrue" for="IsDLTrue" @if (Model.HasDriversLicense)
                                                                                                                           {<text>style="border-color:red;"</text>} else{<text> style="border-color:none;"</text>}>Да</label>
                @Html.RadioButtonFor(m => m.HasDriversLicense, false, new { @id = "IsDLFalse" })<label id="lblDFalse" for="IsDLFalse" @if (!Model.HasDriversLicense)
                                                                                                                                      {<text>style="border-color:red;"</text>} else{<text> style="border-color:none;"</text>}>Нет</label>
            </div>
            @*@Html.EditorFor(m => m.HasDriversLicense)*@
        </div>
        <div class="formfield">
            @Html.LabelFor(m => m.DriversLicenseNumber)&nbsp;@Html.ValidationMessageFor(m => m.DriversLicenseNumber)<br />
            @Html.EditorFor(m => m.DriversLicenseNumber)
        </div>
        <div class="formfield">
            @Html.LabelFor(m => m.DriversLicenseDateOfIssue)&nbsp;@Html.ValidationMessageFor(m => m.DriversLicenseDateOfIssue)<br />
            @Html.EditorFor(m => m.DriversLicenseDateOfIssue)
        </div>
        <div class="formfield">
            @Html.LabelFor(m => m.DriversLicenseCategories)&nbsp;@Html.ValidationMessageFor(m => m.DriversLicenseCategories)<br />
            @Html.EditorFor(m => m.DriversLicenseCategories)
        </div>
        <div class="formfield">
            @Html.LabelFor(m => m.DrivingExperience)&nbsp;@Html.ValidationMessageFor(m => m.DrivingExperience)<br />
            @Html.TextBoxFor(m => m.DrivingExperience, new { @class = "halfwidth" })
        </div>
        <div class="formfield clear">
            @Html.LabelFor(m => m.HasAutomobile)<br />
            <div class="formfield clear" id="HasAuto">
                @Html.RadioButtonFor(m => m.HasAutomobile, true, new { @id = "IsATrue" })<label id="lblATrue" for="IsATrue" @if (Model.HasAutomobile)
                                                                                                                           {<text>style="border-color:red;"</text>} else{<text> style="border-color:none;"</text>}>Да</label>
                @Html.RadioButtonFor(m => m.HasAutomobile, false, new { @id = "IsAFalse" })<label id="lblAFalse" for="IsAFalse" @if (!Model.HasAutomobile)
                                                                                                                                      {<text>style="border-color:red;"</text>} else{<text> style="border-color:none;"</text>}>Нет</label>
            </div>
            @*@Html.EditorFor(m => m.HasAutomobile)*@
        </div>
        <div class="formfield">
            @Html.LabelFor(m => m.AutomobileMake)&nbsp;@Html.ValidationMessageFor(m => m.AutomobileMake)<br />
            @Html.EditorFor(m => m.AutomobileMake)
        </div>
        <div class="formfield">
            @Html.LabelFor(m => m.AutomobileLicensePlateNumber)&nbsp;@Html.ValidationMessageFor(m => m.AutomobileLicensePlateNumber)<br />
            @Html.TextBoxFor(m => m.AutomobileLicensePlateNumber, new { @class = "halfwidth" })
        </div>
        <div class="formfield clear" id="ReadyForBusinessTrips">
            @Html.LabelFor(m => m.IsReadyForBusinessTrips)
            @Html.RadioButtonFor(m => m.IsReadyForBusinessTrips, true, new { @id = "IsRTrue" })<label id="lblRTrue" for="IsRTrue" @if (Model.IsReadyForBusinessTrips)
                                                                                                                        {<text>style="border-color:red;"</text>} else{<text> style="border-color:none;"</text>}>Да</label>
            @Html.RadioButtonFor(m => m.IsReadyForBusinessTrips, false, new { @id = "IsRFalse" })<label id="lblRFalse" for="IsRFalse" @if (!Model.IsReadyForBusinessTrips)
                                                                                                                                    {<text>style="border-color:red;"</text>} else{<text> style="border-color:none;"</text>}>Нет</label>
        </div>
        <div class="formfield clear">
            @Html.LabelFor(m => m.Sports)&nbsp;@Html.ValidationMessageFor(m => m.Sports)<br />
            @Html.TextBoxFor(m => m.Sports, new { @class = "doublewidth" })
        </div>
        <div class="formfield clear">
            @Html.LabelFor(m => m.Hobbies)&nbsp;@Html.ValidationMessageFor(m => m.Hobbies)<br />
            @Html.TextBoxFor(m => m.Hobbies, new { @class = "doublewidth" })
        </div>
        <div class="formfield clear">
            @Html.LabelFor(m => m.ImportantEvents)&nbsp;@Html.ValidationMessageFor(m => m.ImportantEvents)<br />
            @Html.TextBoxFor(m => m.ImportantEvents, new { @class = "doublewidth" })
        </div>

        <fieldset class="bordered nomargin clear">
        <legend class="level2">@Html.LabelFor(m => m.References)</legend>
                <div id="reference-container">
                    <table class="grid">
                        <thead>
                            <tr>
                                <th>
                                    @Html.LabelFor(m => m.References[0].LastName)
                                </th>
                                <th>
                                    @Html.LabelFor(m => m.References[0].FirstName)
                                </th>
                                <th>
                                    @Html.LabelFor(m => m.References[0].Patronymic)
                                </th>
                                <th>
                                    @Html.LabelFor(m => m.References[0].WorksAt)
                                </th>
                                <th>
                                    @Html.LabelFor(m => m.References[0].Position)
                                </th>
                                <th>
                                    @Html.LabelFor(m => m.References[0].Phone)
                                </th>
                                <th>
                                    @Html.LabelFor(m => m.References[0].Relation)
                                </th>
                                @if (@Model.References != null && @Model.References.Count != 0)
                                {
                                    <th></th>
                                }
                            </tr>
                        </thead>  
                        <tbody>                 
                            @for (var i = 0; i < Model.References.Count; i++)
                            {
                                <tr class="reference-row">
                                    <td>
                                        @Model.References[i].LastName
                                    </td>
                                    <td>
                                        @Model.References[i].FirstName
                                    </td>
                                    <td>
                                        @Model.References[i].Patronymic
                                    </td>
                                    <td>
                                        @Model.References[i].WorksAt
                                    </td>
                                    <td>
                                        @Model.References[i].Position
                                    </td>
                                    <td>
                                        @Model.References[i].Phone
                                    </td>
                                    <td>
                                        @Model.References[i].Relation
                                    </td>
                                    @if (@Model.References != null && @Model.References.Count != 0)
                                    {
                                        <td id="delete-foreign-language">
                                            <a href="#" onclick="DeleteBackgroundRow(@Model.References[i].Id)">Удалить</a>
                                        </td>
                                    }
                                </tr>
                            } 
                        </tbody>                    

                    </table>
                </div>
            <a href="" id="add-reference">Добавить новую запись</a>
        </fieldset>

        <div class="formfield clear">
            @Html.LabelFor(m => m.ChronicalDiseases)&nbsp;@Html.ValidationMessageFor(m => m.ChronicalDiseases)<br />
            @Html.TextBoxFor(m => m.ChronicalDiseases, new { @class = "doublewidth" })
        </div>
        <div class="formfield clear">
            @Html.LabelFor(m => m.Penalties)&nbsp;@Html.ValidationMessageFor(m => m.Penalties)<br />
            @Html.TextBoxFor(m => m.Penalties, new { @class = "doublewidth" })
        </div>
        <div class="formfield clear">
            @Html.LabelFor(m => m.PsychiatricAndAddictionTreatment)&nbsp;@Html.ValidationMessageFor(m => m.PsychiatricAndAddictionTreatment)<br />
            @Html.TextBoxFor(m => m.PsychiatricAndAddictionTreatment, new { @class = "doublewidth" })
        </div>
        <div class="formfield clear">
            @Html.LabelFor(m => m.Drinking)&nbsp;@Html.ValidationMessageFor(m => m.Drinking)<br />
            @Html.TextBoxFor(m => m.Drinking, new { @class = "doublewidth" })
        </div>
        <div class="formfield clear">
            @Html.LabelFor(m => m.Smoking)&nbsp;@Html.ValidationMessageFor(m => m.Smoking)<br />
            @Html.TextBoxFor(m => m.Smoking, new { @class = "doublewidth" })
        </div>

        <div class="formfield clear">
            @Html.LabelFor(m => m.OwnerOfShares)&nbsp;@Html.ValidationMessageFor(m => m.OwnerOfShares)<br />
            @Html.TextBoxFor(m => m.OwnerOfShares, new { @class = "doublewidth" })
        </div>

        <div class="formfield clear">
            @Html.LabelFor(m => m.PositionInGoverningBodies)&nbsp;@Html.ValidationMessageFor(m => m.PositionInGoverningBodies)<br />
            @Html.TextBoxFor(m => m.PositionInGoverningBodies, new { @class = "doublewidth" })
        </div>

        @* ---- *@
        <fieldset class="bordered nomargin clear">
        <legend class="level2">Рукописный текст согласия на обработку персональных данных</legend>
            @if (string.IsNullOrEmpty(Model.PersonalDataProcessingScanAttachmentFilename) && !Model.IsValidate)
            {
                <div class="formfield">
                    Выбрать скан для загрузки<br /><input type="file" name="PersonalDataProcessingScanFile" /> @Html.ValidationMessageFor(m => m.PersonalDataProcessingScanFile)
                </div>
            }

            @if (!string.IsNullOrEmpty(Model.PersonalDataProcessingScanAttachmentFilename))
            {
                <div class="formfield">
                    <br />Скан:
                    <a class="ui-notify-close" href='@Url.Action("ViewAttachment", new { Id = Model.PersonalDataProcessingScanAttachmentId })' style="cursor:hand" target="_blank">
                        @Model.PersonalDataProcessingScanAttachmentFilename
                    </a>
                </div>
                if (!Model.IsValidate)
                {
                    <div class="formfield">
                        <br /><input type="button" value="Удалить скан" onclick="deleteAttachment(@Model.PersonalDataProcessingScanAttachmentId);" @*@if (!Model.IsDeleteScanAvailable)
                                                                                                   {<text>style="display:none"</text>}*@/>
                    </div>
                }
            }

            <div class="letter clear" onselectstart="return false" style="-moz-user-select: none;-khtml-user-select: none;user-select: none;">
                <p class="content">
                    Я, _______________ даю свое согласие ПАО &laquo;Совкомбанк&raquo; на обработку как с использованием средств автоматизации,
                    так и без использования таких средств, моих персональных данных, т.е. совершение в том числе следующих действий:
                    сбор, систематизация, накопление, хранение, уточнение, использование, блокирование, уничтожение, а также право на передачу
                    такой информации третьим лицам и получение информации и документов от третьих лиц для осуществления проверки достоверности
                    и полноты информации обо мне, в иных случаях, установленных законодательством.
                </p>
                <p class="content">
                    Согласие дается с целью проверки корректности предоставленных мной сведений, принятия решения о принятии меня на работу в Банк.
                </p>
                <p class="content">
                    В том числе даю согласие на получение и обработку данных о моей частной жизни с целью оперативного сообщения мне необходимой информации
                    и предупреждения чрезвычайных ситуаций.
                </p>
                <p class="content">
                    &laquo;____&raquo; ______________________ 20____ г.
                </p>
            </div>
        </fieldset>
        @* ---- *@

        @* ---- *@
        <fieldset class="bordered nomargin clear">
        <legend class="level2">Рукописный текст о достоверности сведений</legend>
            @if (string.IsNullOrEmpty(Model.InfoValidityScanAttachmentFilename) && !Model.IsValidate)
            {
                <div class="formfield">
                    Выбрать скан для загрузки<br /><input type="file" name="InfoValidityScanFile" /> @Html.ValidationMessageFor(m => m.InfoValidityScanFile)
                </div>
            }

            @if (!string.IsNullOrEmpty(Model.InfoValidityScanAttachmentFilename))
            {
                <div class="formfield">
                    <br />Скан:
                    <a class="ui-notify-close" href='@Url.Action("ViewAttachment", new { Id = Model.InfoValidityScanAttachmentId })' style="cursor:hand" target="_blank">
                        @Model.InfoValidityScanAttachmentFilename
                    </a>
                </div>
                if (!Model.IsValidate)
                {
                    <div class="formfield">
                        <br /><input type="button" value="Удалить скан" onclick="deleteAttachment(@Model.InfoValidityScanAttachmentId);" @*@if (!Model.IsDeleteScanAvailable)
                                                                                                   {<text>style="display:none"</text>}*@/>
                    </div>
                }
            }

            <div class="letter clear" onselectstart="return false" style="-moz-user-select: none;-khtml-user-select: none;user-select: none;">                
                <p class="content">
                    Я, _______________ заверяю, что мои ответы на вопросы анкеты являются полными, достоверными.
                    В дальнейшем обязуюсь сообщать обо всех изменениях в своем положении в отдел персонала для их внесения
                    в личное дело. Данные о трудовой деятельности, учебе соответствуют документам, удостоверяющим личность,
                    записям в трудовой книжке, документам об образовании, воинской службе.
                </p>
                <p class="content">
                    &laquo;____&raquo; ______________________ 20____ г.
                </p>
            </div>
        </fieldset>
        @* ---- *@

    </fieldset>
    </div>
    
    <div class="clear">
        @Html.CheckBoxFor(m => m.IsValidate, Model.IsDraft ? null : (object)new { disabled = "disabled" })@Html.LabelFor(m => m.IsValidate)<br />
        @*@Html.EditorFor(m => m.IsDraft)@Html.LabelFor(m => m.IsDraft)*@
        @Html.HiddenFor(m => m.IsBGDraft)
        <button id="btnBGDraft" type="button">Черновик</button>
        <button id="btnBG" type="button" @if(!Model.IsDraft){<text> disabled="disabled"</text>}>Отправить на согласование</button>
    </div>
}

<hr />

<div id="add-reference-dialog" title="Добавление рекомендации">
    @using (Html.BeginForm("BackgroundCheckAddReference", "Employment", FormMethod.Post))
    {
        <label for="LastName" style="display:block;">Фамилия</label><input type="text" name="LastName" value="" class="text ui-widget-content ui-corner-all" style="display:block;" />
        <label for="FirstName" style="display:block;">Имя</label><input type="text" name="FirstName" value="" class="text ui-widget-content ui-corner-all" style="display:block;" />
        <label for="Patronymic" style="display:block;">Отчество</label><input type="text" name="Patronymic" value="" class="text ui-widget-content ui-corner-all" style="display:block;" />
        <label for="WorksAt" style="display:block;">Место работы</label><input type="text" name="WorksAt" value="" class="text ui-widget-content ui-corner-all" style="display:block;" />
        <label for="Position" style="display:block;">Должность</label><input type="text" name="Position" value="" class="text ui-widget-content ui-corner-all" style="display:block;" />
        <label for="Phone" style="display:block;">Телефон (рабочий, моб.)</label><input type="text" name="Phone" value="" class="text ui-widget-content ui-corner-all" style="display:block;" />
        <label for="Relation" style="display:block;">Откуда Вас знает рекомендующий</label><input type="text" name="Relation" value="" class="text ui-widget-content ui-corner-all" style="display:block;" />
        
        <!-- Allow form submission with keyboard without duplicating the dialog button -->
        <input type="submit" tabindex="-1" style="position:absolute; top:-1000px" />
    }
</div>

<div id="add-backgroundcheck-comment-dialog" title="Добавление комментария">
    @using (Html.BeginForm("BackGroundCheckAddComments", "Employment", FormMethod.Post))
    {
        <label for="Comment" style="display:block;">@Html.LabelFor(m => m.Comment)</label>@Html.TextAreaFor(m => m.Comment) @Html.ValidationMessageFor(m => m.Comment)
        <input type="hidden" id="UserId" name="UserId" value="@Model.UserId" />
    }
</div>


<table id="CommentsTable" style="width: 100%;">
        <tr>
            <td>
                <input id="add-backgroundcheck-comment" type="button" value="Добавить комментарий" @if (!Model.IsAddCommentAvailable)
                                                                  { <text>style = "display:none"</text>; } />
            </td>
        </tr>
        <tr>
            <td style="font-weight:bold">Комментарии</td>
        </tr>
        @if (Model != null && Model.Comments != null && Model.Comments.Count > 0)
        {
            foreach (var attach in Model.Comments)
            {
            <tr>
                <td class="comment-author">@attach.CreatorPosition  @attach.Creator  @attach.CreatedDate</td>
            </tr>
            <tr>
                <td class="comment-text">@attach.Comment</td>
            </tr>   
            }
        }
</table>


<script src="/Scripts/UIHelpers.js" type="text/javascript"></script>

<script type="text/javascript">
    function DeleteBackgroundRow(Id) {
        $("#RowID").val(Id);
        $("#BackgroundCheckForm").submit();
    }

    function deleteAttachment(id){
        var actionUrl="@Url.Action("DeleteAttachment", "Employment")";
        var url = actionUrl + "?Id=" + id;
        $.getJSON(url,
                       function (data) {
                            if(!data.Result){
                                alert('Ошибка удаления скана:'+ data.Error);
                            }
                            else {
                               location.reload(true);
                           }
                       }
                     );
        return false;
    }


    $(document).ready(function () {
        setActiveMenuItem("empBackgroundCheck");
        UIHelpers.attachDatepickerToInputs($('#DriversLicenseDateOfIssue'), "-20:+0", true);
        $('#DLContainer').buttonset();        
        $('#HasAuto').buttonset();        
        $('#ReadyForBusinessTrips').buttonset();
        
        //подкрашиваем наличие прав
        $("#IsDLTrue").click(function(){
            $("#lblDTrue").css("border-color", "red");
            $("#lblDFalse").css("border-color", "silver");
        });
        $("#IsDLFalse").click(function(){
            $("#lblDTrue").css("border-color", "silver");
            $("#lblDFalse").css("border-color", "red");
        });

        //подкрашиваем наличие автомобиля
        $("#IsATrue").click(function(){
            $("#lblATrue").css("border-color", "red");
            $("#lblAFalse").css("border-color", "silver");
        });
        $("#IsAFalse").click(function(){
            $("#lblATrue").css("border-color", "silver");
            $("#lblAFalse").css("border-color", "red");
        });

        //подкрашиваем возможность выезжать в командировки
        $("#IsRTrue").click(function(){
            $("#lblRTrue").css("border-color", "red");
            $("#lblRFalse").css("border-color", "silver");
        });
        $("#IsRFalse").click(function(){
            $("#lblRTrue").css("border-color", "silver");
            $("#lblRFalse").css("border-color", "red");
        });

        $("#btnBGDraft").click(function(){
            $("#IsBGDraft").val(true);
            $("#BackgroundCheckForm").submit();
        });

        $("#btnBG").click(function(){
            $("#IsBGDraft").val(false);
            $("#BackgroundCheckForm").submit();
        });

        var $addReferenceDialog = $('#add-reference-dialog').dialog(
        {
            autoOpen: false,
            modal: true,
            width: "auto",
            draggable: false,
            resizable: false,
            close: function (event, ui) {
                                $(this).dialog("destroy").remove();
                            },
            buttons:
            {
                "OK": function () {
                    processBCAddNameChange();
                    $(this).dialog("close");
                },
                "Отмена": function () {
                    $(this).dialog("close");
                }
            }
        });

        var processBCAddNameChange = function()
        {
            var url = "@Url.Action("BackgroundCheckAddReference", "Employment")";
            var dataToSend = $("#add-reference-dialog form").serialize();
            $.post(url, dataToSend, function(dataReceived){
                var $table = $("#reference-container>table");
                var $rows = $("#reference-container>table .reference-row");
                $rows.remove();
                for (var i = 0; i < dataReceived.length; i++)
                {
                    $table.append(
                        "<tr class=\"reference-row\"><td>" +
                        (dataReceived[i].LastName ? dataReceived[i].LastName : "") + "</td><td>" +
                        (dataReceived[i].FirstName ? dataReceived[i].FirstName : "") + "</td><td>" +
                        (dataReceived[i].Patronymic ? dataReceived[i].Patronymic : "") + "</td><td>" +
                        (dataReceived[i].WorksAt ? dataReceived[i].WorksAt : "") + "</td><td>" +
                        (dataReceived[i].Position ? dataReceived[i].Position : "") + "</td><td>" +
                        (dataReceived[i].Phone ? dataReceived[i].Phone : "") + "</td><td>" +
                        (dataReceived[i].Relation ? dataReceived[i].Relation : "") + "</td><td>" +
                        "<a onclick='DeleteBackgroundRow(" + dataReceived[i].Id + ");' href='#' >Удалить</a></td></tr>"
                    );
                }
            }, "json");
        };

        $("#add-reference").click(function (e) {
            $addReferenceDialog.dialog("open");
            e.preventDefault();
        });

        var $addBackGroundCheckCommentDialog = $('#add-backgroundcheck-comment-dialog').dialog(
        {
            autoOpen: false,
            modal: true,
            width: "auto",
            draggable: false,
            resizable: false,
            close: function (event, ui) {
                                $(this).dialog("destroy").remove();
                            },
            buttons:
            {
                "OK": function () {
                    $('#add-backgroundcheck-comment-dialog form').submit();
                    //$(this).dialog("close");
                },
                "Отмена": function () {
                    $("#Comment").val('');
                    $(this).dialog("close");
                }
            }
        });


        $("#add-backgroundcheck-comment").click(function (e) {
            $addBackGroundCheckCommentDialog.dialog("open");
            e.preventDefault();
        });
    });
</script>