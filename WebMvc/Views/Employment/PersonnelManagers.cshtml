@model Reports.Presenters.UI.ViewModel.Employment2.PersonnelManagersModel
@using Reports.Presenters.Services.Impl
@using Reports.Core
@{
    var dto = UserDto.Deserialize(((FormsIdentity)(HttpContext.Current.User.Identity)).Ticket.UserData);
    Layout = "~/Views/Shared/_LayoutEmployment.cshtml";
    ViewBag.Title = "Прием - Кадры";
}

@Html.Partial("CandidateState", Model.CandidateStateModel)

<span style="color:red;">@ViewBag.Error</span>
<span style="font-size:large;">@Html.ValidationMessageFor(m => m.MessageStr)</span>

@using (Html.BeginForm("PersonnelManagers", "Employment", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.HiddenFor(m => m.UserId)
    @Html.HiddenFor(m => m.IsDraftPM)
    @Html.HiddenFor(m => m.SendTo1C)
    @Html.HiddenFor(m => m.IsReject)
    @Html.HiddenFor(m => m.IsFixedTermContract)
    
    
    <fieldset class="bordered doc-wrap panel floatleft">
    <legend>Кадры</legend>
        <div class="formfield clearleft">
            @Html.LabelFor(m => m.EmploymentOrderDate)&nbsp;@Html.ValidationMessageFor(m => m.EmploymentOrderDate)<br />
            @Html.EditorFor(m => m.EmploymentOrderDate)
        </div>
        <div class="formfield">
            @Html.LabelFor(m => m.EmploymentOrderNumber)&nbsp;@Html.ValidationMessageFor(m => m.EmploymentOrderNumber)<br />
            @Html.TextBoxFor(m => m.EmploymentOrderNumber, new { @class = "halfwidth", readOnly = "true" })
        </div>
        <div class="formfield clearleft">
            @Html.LabelFor(m => m.EmploymentDate)&nbsp;@Html.ValidationMessageFor(m => m.EmploymentDate)<br />
            @Html.EditorFor(m => m.EmploymentDate)
        </div>
        <div class="formfield clearleft">
            @Html.LabelFor(m => m.ContractDate)&nbsp;@Html.ValidationMessageFor(m => m.ContractDate)<br />
            @Html.EditorFor(m => m.ContractDate)
        </div>
        <div class="formfield">
            @Html.LabelFor(m => m.ContractNumber)&nbsp;@Html.ValidationMessageFor(m => m.ContractNumber)<br />
            @Html.TextBoxFor(m => m.ContractNumber, new { @class = "halfwidth", readOnly = "true" })
        </div>
        @if (Model.IsFixedTermContract.HasValue && Model.IsFixedTermContract.Value)
        {
            <div class="formfield">
                @Html.LabelFor(m => m.ContractEndDate)&nbsp;@Html.ValidationMessageFor(m => m.ContractEndDate)<br />
                @Html.EditorFor(m => m.ContractEndDate)
            </div>
        }
        
        @if (Model.IsContractChangedToIndefinite)
        {
            <div class="formfield">
                @Html.LabelFor(m => m.SupplementaryAgreementCreateDate)&nbsp;@Html.ValidationMessageFor(m => m.SupplementaryAgreementCreateDate)<br />
                @Html.EditorFor(m => m.SupplementaryAgreementCreateDate)
            </div>
            <div class="formfield">
                @Html.LabelFor(m => m.SupplementaryAgreementNumber)&nbsp;@Html.ValidationMessageFor(m => m.SupplementaryAgreementNumber)<br />
                @Html.EditorFor(m => m.SupplementaryAgreementNumber)
            </div>
            <div class="formfield">
                @Html.LabelFor(m => m.ChangeContractToIndefiniteOrderCreateDate)&nbsp;@Html.ValidationMessageFor(m => m.ChangeContractToIndefiniteOrderCreateDate)<br />
                @Html.EditorFor(m => m.ChangeContractToIndefiniteOrderCreateDate)
            </div>
            <div class="formfield">
                @Html.LabelFor(m => m.ChangeContractToIndefiniteOrderNumber)&nbsp;@Html.ValidationMessageFor(m => m.ChangeContractToIndefiniteOrderNumber)<br />
                @Html.EditorFor(m => m.ChangeContractToIndefiniteOrderNumber)
            </div>
        }

        <div class="formfield clear" id="isHourlySalaryBasisContainer">            
            @Html.RadioButtonFor(m => m.IsHourlySalaryBasis, false, new { @id = "IsHourlySalaryBasisFalse" })<label id="lblHSBFalse" for="IsHourlySalaryBasisFalse" @if (!Model.IsHourlySalaryBasis)
                                                                                                                                                                    {<text>style="border-color:red;"</text>}
                                                                                                                                                                    else
                                                                                                                                                                    {<text> style="border-color:none;"</text>}>Оклад по дням</label>
            @Html.RadioButtonFor(m => m.IsHourlySalaryBasis, true, new { @id = "IsHourlySalaryBasisTrue" })<label id="lblHSBTrue" for="IsHourlySalaryBasisTrue" @if (Model.IsHourlySalaryBasis)
                                                                                                                                                                {<text>style="border-color:red;"</text>}
                                                                                                                                                                else
                                                                                                                                                                {<text> style="border-color:none;"</text>}>Оклад по часам</label>
        </div>
        @*
        <div class="formfield clear">
            @Html.LabelFor(m => m.BasicSalary)&nbsp;@Html.ValidationMessageFor(m => m.BasicSalary)<br />
            @Html.TextBoxFor(m => m.BasicSalary, new { @class = "calc halfwidth" })
        </div>
        *@
        <div class="formfield clear">
            @Html.LabelFor(m => m.PersonalAddition)&nbsp;@Html.ValidationMessageFor(m => m.PersonalAddition)<br />
            @Html.TextBoxFor(m => m.PersonalAddition, new { @class = "calc halfwidth" })
        </div>
        <div class="formfield">
            @Html.LabelFor(m => m.PositionAddition)&nbsp;@Html.ValidationMessageFor(m => m.PositionAddition)<br />
            @Html.TextBoxFor(m => m.PositionAddition, new { @class = "calc halfwidth" })
        </div>
        
        <div class="formfield clearleft">
            @Html.LabelFor(m => m.AreaMultiplier)&nbsp;@Html.ValidationMessageFor(m => m.AreaMultiplier)<br />
            @Html.TextBoxFor(m => m.AreaMultiplier, new { @class = "calc halfwidth" })
        </div>
        <div class="formfield">
            @Html.LabelFor(m => m.AreaAddition)&nbsp;@Html.ValidationMessageFor(m => m.AreaAddition)<br />
            @Html.TextBoxFor(m => m.AreaAddition, new { @class = "calc halfwidth" })
        </div>
        <div class="formfield clear">
            @Html.LabelFor(m => m.TravelRelatedAddition)&nbsp;@Html.ValidationMessageFor(m => m.TravelRelatedAddition)<br />
            @Html.TextBoxFor(m => m.TravelRelatedAddition, new { @class = "calc halfwidth" })
        </div>
        <div class="formfield">
            @Html.LabelFor(m => m.CompetenceAddition)&nbsp;@Html.ValidationMessageFor(m => m.CompetenceAddition)<br />
            @Html.TextBoxFor(m => m.CompetenceAddition, new { @class = "calc halfwidth" })
        </div>
        <div class="formfield">
            @Html.LabelFor(m => m.FrontOfficeExperienceAddition)&nbsp;@Html.ValidationMessageFor(m => m.FrontOfficeExperienceAddition)<br />
            @Html.TextBoxFor(m => m.FrontOfficeExperienceAddition, new { @class = "calc halfwidth" })
        </div>
        <div class="formfield clear">
            @Html.LabelFor(m => m.Grade)&nbsp;@Html.ValidationMessageFor(m => m.Grade)<br />
            @Html.TextBoxFor(m => m.Grade, new { @class = "halfwidth" })
        </div>
        <div class="formfield clear">
            @Html.LabelFor(m => m.ScheduleId)&nbsp;@Html.ValidationMessageFor(m => m.ScheduleId)<br />
            @Html.DropDownListFor(m => m.ScheduleId, Model.Schedules, string.Empty)
        </div>
        <br />
        <fieldset class="bordered nomargin clear">
        <legend class="level2">Общий стаж</legend>
            <div class="formfield clearleft">
                @Html.ValidationMessageFor(m => m.OverallExperienceYears)<br />
                @Html.EditorFor(m => m.OverallExperienceYears)&nbsp;@Html.LabelFor(m => m.OverallExperienceYears)
            </div>
            <div class="formfield">
                @Html.ValidationMessageFor(m => m.OverallExperienceMonths)<br />
                @Html.EditorFor(m => m.OverallExperienceMonths)&nbsp;@Html.LabelFor(m => m.OverallExperienceMonths)
            </div>
            <div class="formfield">
                @Html.ValidationMessageFor(m => m.OverallExperienceDays)<br />
                @Html.EditorFor(m => m.OverallExperienceDays)&nbsp;@Html.LabelFor(m => m.OverallExperienceDays)
            </div>
        </fieldset>
        <fieldset class="bordered nomargin clear">
        <legend class="level2">Страховой стаж (по состоянию на дату приема)</legend>
            <div class="formfield clearleft">                
                @Html.ValidationMessageFor(m => m.InsurableExperienceYears)<br />
                @Html.EditorFor(m => m.InsurableExperienceYears)&nbsp;@Html.LabelFor(m => m.InsurableExperienceYears)
            </div>
            <div class="formfield">
                @Html.ValidationMessageFor(m => m.InsurableExperienceMonths)<br />
                @Html.EditorFor(m => m.InsurableExperienceMonths)&nbsp;@Html.LabelFor(m => m.InsurableExperienceMonths)
            </div>
            <div class="formfield">
                @Html.ValidationMessageFor(m => m.InsurableExperienceDays)<br />
                @Html.EditorFor(m => m.InsurableExperienceDays)&nbsp;@Html.LabelFor(m => m.InsurableExperienceDays)
            </div>
        </fieldset>

        <fieldset class="bordered nomargin clear">
        <legend class="level2">Северный стаж</legend>
            <div class="formfield clearleft">                
                @Html.LabelFor(m => m.NorthExperienceType)<br />
                @Html.DropDownListFor(m => m.NorthExperienceType, new SelectList(Model.NorthExperienceTypes, "Id", "Name"))
            </div>
            <div id="divNEY" class="formfield">                
                @Html.ValidationMessageFor(m => m.NorthExperienceYears)<br />
                @Html.TextBoxFor(m => m.NorthExperienceYears, new { @class = "calc halfwidth" })&nbsp;@Html.LabelFor(m => m.NorthExperienceYears)
            </div>
            <div id="divNEM" class="formfield">
                @Html.ValidationMessageFor(m => m.NorthExperienceMonths)<br />
                @Html.TextBoxFor(m => m.NorthExperienceMonths, new { @class = "calc halfwidth" })&nbsp;@Html.LabelFor(m => m.NorthExperienceMonths)
            </div>
            <div id="divNED" class="formfield">
                @Html.ValidationMessageFor(m => m.NorthExperienceDays)<br />
                @Html.TextBoxFor(m => m.NorthExperienceDays, new { @class = "calc halfwidth" })&nbsp;@Html.LabelFor(m => m.NorthExperienceDays)
            </div>
            <div id="divNAA" class="formfield">
                @Html.ValidationMessageFor(m => m.NorthernAreaAddition)<br />
                @Html.TextBoxFor(m => m.NorthernAreaAddition, new { @class = "calc halfwidth" })&nbsp;@Html.LabelFor(m => m.NorthernAreaAddition)
            </div>
            <div id="divEC" class="formfield">                
                @Html.LabelFor(m => m.ExtraChargesId)<br />
                @Html.DropDownListFor(m => m.ExtraChargesId, new SelectList(Model.ExtraCharges, "Id", "Name"))
            </div>
        </fieldset>

        <fieldset class="bordered nomargin clear">
            <legend class="level2">Пункты трудового договора</legend>
            <table width="100%">
                <tr>
                    <td style="width:30%">
                        @Html.LabelFor(m => m.ContractPoint_1_Id)
                        @Html.DropDownListFor(m => m.ContractPoint_1_Id, new SelectList(Model.ContractPoint1_Items, "PointId", "PointTypeName"), (object)new { onchange = "ContractPointChange(1);" })
                    </td>
                    <td>
                        <label id="Variant11">Настоящий Договор заключается временно для выполнения работ, непосредственно связанных со стажировкой и профессиональным обучением работников и вступает в силу со дня подписания сторонами.</label>
                        <label id="Variant12"><label>Договор заключается временно, на период отсутствия основного работника </label>@Html.TextBoxFor(m => m.ContractPointsFio, new { placeholder = "ФИО", style = "width:400px" })<label>, за которым в соответствии с трудовым договором закреплено рабочее место и вступает в силу со дня подписания сторонами.</label> </label>
                        <label id="Variant13">Настоящий Договор заключается на неопределенный срок и вступает в силу со дня подписания сторонами.</label>
                        <label id="Variant111">Настоящий Договор заключается на срок с даты начала по дату окончания ТД.</label>
                    </td>
                </tr>
                <tr>
                    <td>
                        @Html.LabelFor(m => m.ContractPoint_2_Id)
                        @Html.DropDownListFor(m => m.ContractPoint_2_Id, new SelectList(Model.ContractPoint2_Items, "PointId", "PointTypeName"), (object)new { onchange = "ContractPointChange(2);" })
                    </td>
                    <td>
                        <label id="Variant24"><label>Фактическое место работы Работника: </label>@Html.TextBoxFor(m => m.ContractPointsAddress, new { placeholder = "Укажите адрес", style = "width:600px" })</label>
                    </td>
                </tr>
                <tr>
                    <td>
                        @Html.LabelFor(m => m.ContractPoint_3_Id)
                        @Html.DropDownListFor(m => m.ContractPoint_3_Id, new SelectList(Model.ContractPoint3_Items, "PointId", "PointTypeName"), (object)new { onchange = "ContractPointChange(3);" })
                    </td>
                    <td>
                        <label id="Variant35">РАБОТНИКУ устанавливается следующий режим рабочего времени: пятидневная рабочая неделя с двумя выходными днями, продолжительность ежедневной работы 8 часов.</label>
                        <label id="Variant36">РАБОТНИКУ устанавливается следующий режим рабочего времени: продолжительность ежедневной работы для совместителей не выше 4 часов.</label>
                        <label id="Variant37">РАБОТНИКУ устанавливается следующий режим рабочего времени: ненормированный рабочий день.</label>
                        <label id="Variant38">РАБОТНИКУ устанавливается следующий режим рабочего времени: рабочая неделя с предоставлением выходных дней по скользящему графику с суммированным учетом рабочего времени за учетный период (учетный период - квартал, 1 год).</label>
                        <label id="Variant39">РАБОТНИКУ устанавливается следующий режим рабочего времени: суммированный учет рабочего времени (по графику).</label>
                        <label id="Variant310">РАБОТНИКУ устанавливается следующий режим рабочего времени: (сокращенная продолжительность рабочего времени, неполное рабочее время, другой режим).</label>
                    </td>
                </tr>
            </table>
        </fieldset>

        <div class="formfield clearleft">
            @Html.LabelFor(m => m.PersonalAccount)&nbsp;@Html.ValidationMessageFor(m => m.PersonalAccount)<br />
            @Html.EditorFor(m => m.PersonalAccount)
        </div>
        <div class="formfield clear">
            @Html.LabelFor(m => m.PersonalAccountContractorId)&nbsp;@Html.ValidationMessageFor(m => m.PersonalAccountContractorId)<br />
            @Html.DropDownListFor(m => m.PersonalAccountContractorId, Model.PersonalAccountContractors)
        </div>


        <div class="formfield clear">
            @Html.LabelFor(m => m.AccessGroupId)&nbsp;@Html.ValidationMessageFor(m => m.AccessGroupId)<br />
            @Html.DropDownListFor(m => m.AccessGroupId, Model.AccessGroups)
        </div>
        @*
        <div class="formfield">
            @Html.LabelFor(m => m.Level)&nbsp;@Html.ValidationMessageFor(m => m.Level)<br />
            @Html.TextBoxFor(m => m.Level, new { @class = "calc halfwidth" })
        </div>
        *@
        <div class="formfield clear">
            @Html.LabelFor(m => m.SignerId)&nbsp;@Html.ValidationMessageFor(m => m.SignerId)<br />
            @Html.DropDownListFor(m => m.SignerId, Model.Signers, string.Empty)
        </div>

        <div class="formfield">
            @Html.LabelFor(m => m.InsuredPersonTypeId)&nbsp;@Html.ValidationMessageFor(m => m.InsuredPersonTypeId)<br />
            @Html.DropDownListFor(m => m.InsuredPersonTypeId, Model.InsuredPersonTypeItems, string.Empty)
        </div>
        <div class="formfield clear">
            @Html.LabelFor(m => m.StatusId)&nbsp;@Html.ValidationMessageFor(m => m.StatusId)<br />
            @Html.DropDownListFor(m => m.StatusId, Model.StatusItems, string.Empty)
        </div>        

        @if ((dto.UserRole & UserRole.PersonnelManager) > 0)
        {
            <div class="formfield clearleft">
                <button id="btnPMDraft" >Сохранить</button>         
                <button >Утвердить</button>         
            </div>            
            <button id="btnReject" style="float:right;">Кандидат отказался от приема</button>    
        }
    </fieldset>
    @*
    <div class="buttonpanel">
        <button type="button" onclick="window.location.href='@Url.Action("GetPrintContractForm", "Employment", new { userId = Model.UserId })';">Печать<br />трудового договора</button>
        <button type="button" onclick="window.location.href='@Url.Action("GetPrintEmploymentOrder", "Employment", new { userId = Model.UserId })';">Печать<br />приказа о приеме</button>
        <button type="button" onclick="window.location.href='@Url.Action("GetPrintT2", "Employment", new { userId = Model.UserId })';">Печать<br />Т2</button>
        <button type="button" onclick="window.location.href='@Url.Action("GetPrintLiabilityContract", "Employment", new { userId = Model.UserId })';">Печать<br />договора Мат. ответственность</button>
        <button type="button" onclick="window.location.href='@Url.Action("GetPrintPersonalDataAgreement", "Employment", new { userId = Model.UserId })';">Печать<br />ДС Персональные данные</button>
        <button type="button" onclick="window.location.href='@Url.Action("GetPrintPersonalDataObligation", "Employment", new { userId = Model.UserId })';">Печать<br />Обязательство конфиденциальность</button>
        <button type="button" onclick="window.location.href='@Url.Action("GetPrintEmploymentFile", "Employment", new { userId = Model.UserId })';">Печать<br />личного листка<br />по учету кадров</button>
        <button type="button" onclick="window.location.href='@Url.Action("GetPrintAttachments", "Employment", new { userId = Model.UserId })';">Печать<br />реестра личного дела</button>
    </div>
 *@
}

<div id="add-personnel-managers-comment-dialog" title="Добавление комментария">
    @using (Html.BeginForm("PersonnelManagersAddComments", "Employment", FormMethod.Post))
    {
        <label for="Comment" style="display:block;">@Html.LabelFor(m => m.Comment)</label>@Html.TextAreaFor(m => m.Comment) @Html.ValidationMessageFor(m => m.Comment)
        <input type="hidden" id="UserId" name="UserId" value="@Model.UserId" />
    }
</div>

<table id="CommentsTable" style="width: 100%;">
        <tr>
            <td>
                <input type="button" id="add-personnel-managers-comment" value="Добавить комментарий" @if (!Model.IsAddCommentAvailable)
                                                                                                      { <text>style = "display:none"</text>;
                                                                                                      } />
            </td>
        </tr>
        <tr>
            <td style="font-weight:bold">Комментарии</td>
        </tr>
        @if (Model != null && Model.Comments != null && Model.Comments.Count > 0)
        {
            foreach (var attach in Model.Comments)
            {
            <tr>
                <td class="comment-author">@attach.CreatorPosition  @attach.Creator  @attach.CreatedDate</td>
            </tr>
            <tr>
                <td class="comment-text">@attach.Comment</td>
            </tr>   
            }
        }
</table>

<script src="/Scripts/UIHelpers.js" type="text/javascript"></script>

<script  type="text/javascript">
    $(document).ready(function () {
        setActiveMenuItem("empPersonnelManagers");
        UIHelpers.attachDatepickerToInputs($('#EmploymentOrderDate, #EmploymentDate, #ContractDate'), "-1:+1", true);
        UIHelpers.attachDatepickerToInputs($('#ContractEndDate'), "-0:+10;+1", true);
        UIHelpers.attachDatepickerToInputs($('#SupplementaryAgreementCreateDate, #ChangeContractToIndefiniteOrderCreateDate'), "-20:+0;-20Y;+0", true);
        $('#isHourlySalaryBasisContainer').buttonset();

        

        //подкрашиваем пол
        $("#IsHourlySalaryBasisTrue").click(function () {
            $("#lblHSBTrue").css("border-color", "red");
            $("#lblHSBFalse").css("border-color", "silver");
        });
        $("#IsHourlySalaryBasisFalse").click(function () {
            $("#lblHSBTrue").css("border-color", "silver");
            $("#lblHSBFalse").css("border-color", "red");
        });

        //синхронно меняем даты
        $("#EmploymentOrderDate").change(function () {
            if ($("#EmploymentOrderDate").val() != "") {
                $("#ContractDate").val($("#EmploymentOrderDate").val());
            }
        });

        $("#ContractDate").change(function () {
            if ($("#ContractDate").val() != "") {
                $("#EmploymentOrderDate").val($("#ContractDate").val());
            }
        });

        $("#btnPMDraft").click(function () {
            $("#IsDraftPM").val(true);
        });

        $("#btnReject").click(function () {
            $("#IsReject").val(true);
        });

        var $addPersonnelManagersCommentDialog = $('#add-personnel-managers-comment-dialog').dialog(
        {
            autoOpen: false,
            modal: true,
            width: "auto",
            draggable: false,
            resizable: false,
            close: function (event, ui) {
                $(this).dialog("destroy").remove();
            },
            buttons:
            {
                "OK": function () {
                    $('#add-personnel-managers-comment-dialog form').submit();
                    //$(this).dialog("close");
                },
                "Отмена": function () {
                    $("#Comment").val('');
                    $(this).dialog("close");
                }
            }
        });


        $("#add-personnel-managers-comment").click(function (e) {
            $addPersonnelManagersCommentDialog.dialog("open");
            e.preventDefault();
        });
    });

    function ContractPointChange(TypeId) {
        if (TypeId == 1) {
            $("#Variant11").hide();
            $("#Variant12").hide();
            $("#Variant13").hide();
            //$("#Variant111").hide();
            $("#Variant1" + $("#ContractPoint_1_Id").val().toString()).show();
        }
        else if (TypeId == 2) {
        }
        else if (TypeId == 3) {
            $("#Variant35").hide();
            $("#Variant36").hide();
            $("#Variant37").hide();
            $("#Variant38").hide();
            $("#Variant39").hide();
            $("#Variant310").hide();
            $("#Variant3" + $("#ContractPoint_3_Id").val().toString()).show();
        }
    }

    function NorthExperienceTypesChange(Id) {
        if (Id == 3) {
            $("#divNAA").show();
            $("#divNEY").show();
            $("#divNEM").show();
            $("#divNED").show();
        }
        else {
            $("#divNAA").hide();
            $("#divNEY").hide();
            $("#divNEM").hide();
            $("#divNED").hide();
        }

        if (Id == 2 || Id == 3) {
            $("#divEC").show();
        }
        else {
            $("#divEC").hide();
        }
    }
</script>