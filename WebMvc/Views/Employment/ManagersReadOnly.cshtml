@model Reports.Presenters.UI.ViewModel.Employment2.ManagersModel
@using Reports.Presenters.Services.Impl
@using Reports.Core           
@{
    var dto = UserDto.Deserialize(((FormsIdentity)(HttpContext.Current.User.Identity)).Ticket.UserData);
    //Layout = "~/Views/Shared/_LayoutEmployment.cshtml";
    ViewBag.Title = "Прием - Руководители";
}

@Html.Partial("CandidateState", Model.CandidateStateModel)
<span style="font-size:large;">@Html.ValidationMessageFor(m => m.MessageStr)</span>

@using (Html.BeginForm("Managers", "Employment", FormMethod.Post, new { enctype = "multipart/form-data", Id = "ManagerForm" }))
{
    @Html.HiddenFor(m => m.UserId)
    @Html.HiddenFor(m => m.IsDraftM)
    @Html.HiddenFor(m => m.SendTo1C)
    @Html.HiddenFor(m => m.IsPyrusDialogVisible)
    @Html.HiddenFor(m => m.IsVolga)
    @Html.HiddenFor(m => m.IsSP)
    
    
    <fieldset class="bordered doc-wrap panel">
    <legend>Руководители</legend>
@*
старый вариант без штатного расписания
        <div class="formfield clear">
            @Html.LabelFor(m => m.PositionId):
            <input type="text" name="PositionName" id="PositionName" value="@Model.PositionName" onchange=" changePosition(); " style="width:600px" data-autocomplete-source="@Url.Action("AutocompletePositionSearch", "Employment")" />
            <input type="hidden" id="PositionId" name="PositionId" value="@Model.PositionId"/>
            @Html.ValidationMessageFor(model => model.PositionId)
        </div>
*@        

        <div class="formfield clear">
            @Html.LabelFor(m => m.DepartmentName):
        </div>
        <div class="formfield">
            <label id="DepartmentNameLabel">@Model.DepartmentName</label>
            @Html.HiddenFor(m => m.DepartmentName)
            @Html.HiddenFor(m => m.DepartmentId)
        </div>
        <div class="formfield clear">
            <input id="btnChangeDep" type="button" value="Выбрать" onclick="changeDepartment(7);"/>
        </div>

        <div class="formfield clear">
            @Html.LabelFor(m => m.UserLinkId)<br />
            @Html.DropDownListFor(m => m.UserLinkId, new SelectList(Model.PostUserLinks, "Id", "Name"), new { onchange = "GetSPDetails(false);" })

            <br />@Html.ValidationMessageFor(m => m.UserLinkId)
        </div>

        <div class="formfield clear">
            @Html.LabelFor(m => m.EmploymentConditions)&nbsp;@Html.ValidationMessageFor(m => m.EmploymentConditions)<br />
            @Html.TextAreaFor(m => m.EmploymentConditions, new { @class = "doublewidth" })
        </div>
        <div class="formfield clearleft">
            @Html.LabelFor(m => m.RegistrationDate)&nbsp;@Html.ValidationMessageFor(m => m.RegistrationDate)<br />
            @Html.EditorFor(m => m.RegistrationDate)
        </div>
        <div class="formfield clear" id="isSecondaryJobContainer">
            @Html.LabelFor(m => m.IsSecondaryJob)
            @Html.RadioButtonFor(m => m.IsSecondaryJob, false, new { @id = "IsSecondaryJobFalse" })<label id="lblSJFalse" for="IsSecondaryJobFalse" @if (!Model.IsSecondaryJob)
                                                                                                                                                    {<text>style="border-color:red;"</text>}
                                                                                                                                                    else
                                                                                                                                                    {<text> style="border-color:none;"</text>}>Основная</label>
            @Html.RadioButtonFor(m => m.IsSecondaryJob, true, new { @id = "IsSecondaryJobTrue" })<label id="lblSJTrue" for="IsSecondaryJobTrue" @if (Model.IsSecondaryJob)
                                                                                                                                                {<text>style="border-color:red;"</text>}
                                                                                                                                                else
                                                                                                                                                {<text> style="border-color:none;"</text>}>По совместительству</label>
        </div>

        <div class="formfield clear" id="isExternalWorkContainer" @if (!Model.IsSecondaryJob)
                                                                  {<text>style="display:none;"</text>}>
            @Html.LabelFor(m => m.IsExternalPTWorker)
            @Html.RadioButtonFor(m => m.IsExternalPTWorker, true, new { @id = "IsExternalWorkTrue" })<label id="lblEWTrue" for="IsExternalWorkTrue" @if (Model.IsExternalPTWorker)
                                                                                                                                                    {<text>style="border-color:red;"</text>}
                                                                                                                                                    else
                                                                                                                                                    {<text> style="border-color:silver;"</text>}>Внешний совместитель</label>
            @Html.RadioButtonFor(m => m.IsExternalPTWorker, false, new { @id = "IsExternalWorkFalse" })<label id="lblEWFalse" for="IsExternalWorkFalse" @if (!Model.IsExternalPTWorker)
                                                                                                                                                        {<text>style="border-color:red;"</text>}
                                                                                                                                                        else
                                                                                                                                                        {<text> style="border-color:silver;"</text>}>Внутренний совместитель</label>
        </div>

        <div class="formfield ">
            @Html.LabelFor(m => m.ProbationaryPeriod)&nbsp;@Html.ValidationMessageFor(m => m.ProbationaryPeriod)
            @Html.EditorFor(m => m.ProbationaryPeriod)
        </div>
        
        <div class="clear">
            <div class="portlet">
                <div class="portlet-header">Оклад</div>
                <div id="DivSalary" class="portlet-content">
                    <table>
                        <tr>
                            <td>@Html.LabelFor(m => m.SalaryBasis)</td>
                            <td>@Html.TextBoxFor(m => m.SalaryBasis, new { @class = "calc halfwidth", @readonly = "readonly" })&nbsp;@Html.ValidationMessageFor(m => m.SalaryBasis)</td>
                        </tr>
                        <tr>
                            <td>@Html.LabelFor(m => m.SalaryMultiplier)</td>
                            <td>@Html.TextBoxFor(m => m.SalaryMultiplier, new { @class = "calc halfwidth" })&nbsp;@Html.ValidationMessageFor(m => m.SalaryMultiplier)</td>
                        </tr>
                        <tr>
                            <td>@Html.LabelFor(m => m.AreaMultiplier)</td>
                            <td>@Html.TextBoxFor(m => m.AreaMultiplier, new { @class = "calc halfwidth", @readonly = "readonly" })&nbsp;@Html.ValidationMessageFor(m => m.AreaMultiplier)</td>
                        </tr>
                    </table>
                </div>
            </div>
        </div>
        
        <div class="clear">
            <div class="portlet">
                <div class="portlet-header">Персональные надбавки</div>
                <div id="DivAdditional" class="portlet-content">
                    <table>
                        <tr><td colspan="2" style="background-color:#FFCCCC;">Персональные(ная) надбавки(а) должны быть согласованы в системе Pyrus.</td></tr>
                        <tr>
                            <td>@Html.LabelFor(m => m.PersonalAddition)</td>
                            <td>@Html.TextBoxFor(m => m.PersonalAddition, new { @class = "calc halfwidth" })&nbsp;@Html.ValidationMessageFor(m => m.PersonalAddition)</td>
                        </tr>
                        <tr>
                            <td>@Html.LabelFor(m => m.AreaAddition)</td>
                            <td>@Html.TextBoxFor(m => m.AreaAddition, new { @class = "calc halfwidth" })&nbsp;@Html.ValidationMessageFor(m => m.AreaAddition)</td>
                        </tr>
                        <tr>
                            <td>@Html.LabelFor(m => m.TravelRelatedAddition)</td>
                            <td>@Html.TextBoxFor(m => m.TravelRelatedAddition, new { @class = "calc halfwidth" })&nbsp;@Html.ValidationMessageFor(m => m.TravelRelatedAddition)</td>
                        </tr>
                        <tr>
                            <td>@Html.LabelFor(m => m.CompetenceAddition)</td>
                            <td>@Html.TextBoxFor(m => m.CompetenceAddition, new { @class = "calc halfwidth" })&nbsp;@Html.ValidationMessageFor(m => m.CompetenceAddition)</td>
                        </tr>
                        <tr>
                            <td>@Html.LabelFor(m => m.FrontOfficeExperienceAddition)</td>
                            <td>@Html.TextBoxFor(m => m.FrontOfficeExperienceAddition, new { @class = "calc halfwidth" })&nbsp;@Html.ValidationMessageFor(m => m.FrontOfficeExperienceAddition)</td>
                        </tr>
                        @if (Model.IsConsultant && !string.IsNullOrEmpty(Model.PyrusNumber) && !string.IsNullOrWhiteSpace(Model.PyrusNumber))
                        {
                            <tr>
                                <td>@Html.LabelFor(m => m.PyrusNumber)</td>
                                <td>@Html.TextBoxFor(m => m.PyrusNumber, new { @class = "calc" })&nbsp;@Html.ValidationMessageFor(m => m.PyrusNumber)</td>
                            </tr>
                        }
                        <tr>
                            @if (!string.IsNullOrEmpty(Model.PyrusNumber) && !string.IsNullOrWhiteSpace(Model.PyrusNumber))
                            {
                                @Html.HiddenFor(m => m.PyrusNumber)
                                <td colspan="2">
                                    <a href="@("https://pyrus.com/t#id" + Model.PyrusNumber)" target="_blank">Задача в системе Pyrus</a><br />
                                </td>
                            }
                            else
                            {
                                <td>@Html.LabelFor(m => m.PyrusNumber)</td>
                                <td>@Html.TextBoxFor(m => m.PyrusNumber, new { @class = "calc" })&nbsp;@Html.ValidationMessageFor(m => m.PyrusNumber)</td>
                            }
                        </tr>
                    </table>
                    <a href="https://pyrus.com/" target="_blank">Для создания задачи перейдите по ссылке</a>
                </div>
            </div>
        </div>

        <div class="formfield clear">
            @Html.DisplayFor(m => m.SalaryTotalCaption)&nbsp;@Html.DisplayFor(m => m.SalaryTotal)
        </div>

        @*
        не нужно
        <div class="formfield">
            @Html.LabelFor(m => m.PositionAddition)&nbsp;@Html.ValidationMessageFor(m => m.PositionAddition)<br />
            @Html.TextBoxFor(m => m.PositionAddition, new { @class = "calc halfwidth" })
        </div>
        *@

        <div class="formfield clear">
            @Html.LabelFor(m => m.WorkCity)&nbsp;@Html.ValidationMessageFor(m => m.WorkCity)<br />
            @Html.EditorFor(m => m.WorkCity)
        </div>
        <div class="formfield clear" id="isFrontContainer">
            @Html.RadioButtonFor(m => m.IsFront, true, new { @id = "IsFrontTrue" })<label id="lblFTrue" for="IsFrontTrue" @if (Model.IsFront)
                                                                                                                          {<text>style="border-color:red;"</text>}
                                                                                                                          else
                                                                                                                          {<text> style="border-color:none;"</text>}>Фронт</label>
            @Html.RadioButtonFor(m => m.IsFront, false, new { @id = "IsFrontFalse" })<label id="lblFFalse" for="IsFrontFalse" @if (!Model.IsFront)
                                                                                                                              {<text>style="border-color:red;"</text>}
                                                                                                                              else
                                                                                                                              {<text> style="border-color:none;"</text>}>Бэк</label>
        </div>
        @*
        <div class="formfield clear">
            @Html.LabelFor(m => m.Bonus)&nbsp;@Html.ValidationMessageFor(m => m.Bonus)<br />
            @Html.EditorFor(m => m.Bonus)
        </div>
        *@
        @*
        <div class="formfield clear">
            @Html.EditorFor(m => m.IsLiable)@Html.LabelFor(m => m.IsLiable)
        </div>
        *@
        <div class="formfield clear" id="IsLiableContainer">
            @Html.LabelFor(m => m.IsLiable)
            @Html.RadioButtonFor(m => m.IsLiable, true, new { @id = "IsLiableTrue" })<label id="lblLTrue" for="IsLiableTrue" @if (Model.IsLiable)
                                                                                                                             {<text>style="border-color:red;"</text>}
                                                                                                                             else
                                                                                                                             {<text> style="border-color:none;"</text>}>Да</label>
            @Html.RadioButtonFor(m => m.IsLiable, false, new { @id = "IsLiableFalse" })<label id="lblLFalse" for="IsLiableFalse" @if (!Model.IsLiable)
                                                                                                                                 {<text>style="border-color:red;"</text>}
                                                                                                                                 else
                                                                                                                                 {<text> style="border-color:none;"</text>}>Нет</label>
        </div>

        <div class="formfield clear">
            @Html.LabelFor(m => m.MentorName)&nbsp;@Html.ValidationMessageFor(m => m.MentorName)<br />
            @Html.EditorFor(m => m.MentorName)
        </div>
        @*
        <div class="formfield clear">
            @Html.LabelFor(m => m.RequestNumber)&nbsp;@Html.ValidationMessageFor(m => m.RequestNumber)<br />
            @Html.EditorFor(m => m.RequestNumber)
        </div>
        *@
        @if ((!Model.ManagerApprovalStatus.HasValue || !Model.ManagerApprovalStatus.Value) || (dto.UserRole & UserRole.PersonnelManager) > 0)
        {
            <div class="formfield clear">
                <button id="btnManagerDraft" type="button">Черновик</button>
            </div>
        }
        
    </fieldset>
    
    
    <div class="clear">
        @if (Model.IsPyrusDialogVisible)
        {
            <label>Создать задачу в Пайрусе на регистрацию доступов для кандидата</label>
            <button type="button" id="btnPyrus">Создать</button>
            <br /><br />
        }
        <label><b>Список руководителей: </b></label>
        @Model.ManagerApprovalList<br /><br />

        @if (Model.IsApproveByManagerAvailable || Model.ManagerApprovalStatus != null)
        {        
            @Html.LabelFor(m => m.ManagerApprovalStatus)<text>&nbsp;</text>
            @Html.DropDownListFor(m => m.ManagerApprovalStatus, Model.ApprovalStatuses, Model.IsApproveByManagerAvailable ? null : new { disabled = "disabled" })
        }
        @if (Model.ManagerApprovalStatus != null)
        {
            <span class="fakeFormField">@Model.ApprovingManagerName
                @(Model.ManagerApprovalDate.HasValue ? string.Format(" ({0})", Model.ManagerApprovalDate.Value.ToShortDateString() + " - " + Model.ManagerApprovalDate.Value.ToShortTimeString()) : string.Empty)</span>
        }
        @if (Model.IsApproveByManagerAvailable)
        {
            <button>Применить</button>
        }
        
        @Html.HiddenFor(m => m.IsCancelApproveAvailale)
        @if (Model.IsCancelApproveAvailale)
        {
            <input type="submit" value="Отменить согласование" />
        }
        <br /><br />
    </div>
    
}

@using (@Html.BeginForm("ManagersApproveByHigherManager", "Employment", FormMethod.Post))
{
    @Html.HiddenFor(m => m.UserId)
    <div class="clear">
        <label><b>Список вышестоящих руководителей: </b></label>
        @Model.HigherManagerApprovalList<br /><br />

        @if (Model.IsApproveByHigherManagerAvailable || Model.HigherManagerApprovalStatus != null)
        {        
            @Html.LabelFor(m => m.HigherManagerApprovalStatus)<text>&nbsp;</text>
            @Html.DropDownListFor(m => m.HigherManagerApprovalStatus, Model.ApprovalStatuses, Model.IsApproveByHigherManagerAvailable ? null : new { disabled = "disabled" })
        }
        @if (Model.HigherManagerApprovalStatus != null)
        {
            <span class="fakeFormField">@Model.ApprovingHigherManagerName
                @(Model.HigherManagerApprovalDate.HasValue ? string.Format(" ({0})", Model.HigherManagerApprovalDate.Value.ToShortDateString() + " - " + Model.HigherManagerApprovalDate.Value.ToShortTimeString()) : string.Empty)</span>
        }
        @if (Model.IsApproveByHigherManagerAvailable)
        {
            <button>Применить</button>
        }
        @Html.HiddenFor(m => m.IsCancelApproveHigherAvailale)
        @if (Model.IsCancelApproveHigherAvailale)
        {
            <input type="submit" value="Отменить согласование" />
        }
    </div>
}

<div id="DivPyrus" style="display:none;">
    <table class="grid">
        <thead>
            <tr>
                <th>Категория сотрудников</th>
                <th>Название формы</th>
                <th></th>
            </tr>
        </thead>
        <tr>
            <td>Менеджер по обслуживанию клиентов</td>
            <td>Регистрация нового МОКа</td>
            <td><a href="https://pyrus.com/t#uf166701" target="_blank" onclick="$('#DivPyrus').dialog('close');">Создать</a></td>
        </tr>
        <tr>
            <td>Менеджер по развитию торговой сети</td>
            <td>Регистрация нового МРТС</td>
            <td><a href="https://pyrus.com/t#uf167041" target="_blank" onclick="$('#DivPyrus').dialog('close');">Создать</a></td>
        </tr>
        <tr>
            <td>Сотрудник Службы дистанционного взыскания</td>
            <td>Регистрация нового сотрудника СДВ</td>
            <td><a href="https://pyrus.com/t#uf194178" target="_blank" onclick="$('#DivPyrus').dialog('close');">Создать</a></td>
        </tr>
        <tr>
            <td>Сотрудник Службы судебного взыскания</td>
            <td>Регистрация нового сотрудника ССВ</td>
            <td><a href="https://pyrus.com/t#uf180510" target="_blank" onclick="$('#DivPyrus').dialog('close');">Создать</a></td>
        </tr>
        <tr>
            <td>Сотрудник СЭБ</td>
            <td>Регистрация нового сотрудника СЭБ</td>
            <td><a href="https://pyrus.com/t#uf196474" target="_blank" onclick="$('#DivPyrus').dialog('close');">Создать</a></td>
        </tr>
        <tr>
            <td>Специалист Отдела по андеррайтингу физ. и юр. лиц</td>
            <td>Регистрация нового спец. Отдела по андеррайтингу физ. и юр. лиц</td>
            <td><a href="https://pyrus.com/t#uf177525" target="_blank" onclick="$('#DivPyrus').dialog('close');">Создать</a></td>
        </tr>
        <tr>
            <td>Специалист Отдела прямых продаж</td>
            <td>Регистрация нового спец. Отдела прямых продаж</td>
            <td><a href="https://pyrus.com/t#uf173528" target="_blank" onclick="$('#DivPyrus').dialog('close');">Создать</a></td>
        </tr>
        <tr>
            <td>Специалист Отдела сопровождения клиентов</td>
            <td>Регистрация нового спец. Отдела сопр. клиентов</td>
            <td><a href="https://pyrus.com/t#uf167008" target="_blank" onclick="$('#DivPyrus').dialog('close');">Создать</a></td>
        </tr>
        <tr>
            <td>Сотрудник ТСП</td>
            <td>Регистрация нового сотрудника ТСП</td>
            <td><a href="https://pyrus.com/t#uf167006" target="_blank" onclick="$('#DivPyrus').dialog('close');">Создать</a></td>
        </tr>
        <tr>
            <td>Сотрудники других подразделений</td>
            <td>Доступы в информационные системы (Общая форма)</td>
            <td><a href="https://pyrus.com/t#uf7520" target="_blank" onclick="$('#DivPyrus').dialog('close');">Создать</a></td>
        </tr>
    </table>
</div>

<div id="add-managers-comment-dialog" title="Добавление комментария">
    @using (Html.BeginForm("ManagersAddComments", "Employment", FormMethod.Post))
    {
        <label for="IssuedBy" style="display:block;">@Html.LabelFor(m => m.Comment)</label>@Html.TextAreaFor(m => m.Comment) @Html.ValidationMessageFor(m => m.Comment)
        <input type="hidden" id="UserId" name="UserId" value="@Model.UserId" />
        
    }
</div>

<table id="CommentsTable" style="width: 100%;">
        <tr>
            <td>
                <input id="add-managers-comment" type="button" value="Добавить комментарий" @if (!Model.IsAddCommentAvailable)
                                                                                            { <text>style = "display:none"</text>;
                                                                                            } />
            </td>
        </tr>
        <tr>
            <td style="font-weight:bold">Комментарии</td>
        </tr>
        @if (Model != null && Model.Comments != null && Model.Comments.Count > 0)
        {
            foreach (var attach in Model.Comments)
            {
            <tr>
                <td class="comment-author">@attach.CreatorPosition  @attach.Creator  @attach.CreatedDate</td>
            </tr>
            <tr>
                <td class="comment-text">@attach.Comment</td>
            </tr>   
            }
        }
</table>

<script src="../../Scripts/UIHelpers.js" type="text/javascript"></script>
<script>
    var actionDepDialogUrl = "@Url.Action("DepartmentDialog", "Home")";
    var actionDepUrl = "@Url.Action("GetChildren", "Home")";

    $(document).ready(function () {
//        $("#DepartmentId").change(function(){ 
//            $("#IsSP").val(true);
//            GetSPDetails();
//        });

//        $("#UserLinkId").change(function(){ 
//            $("#IsSP").val(false);
//            GetSPDetails();
//        });

        $(".portlet")
            .addClass("ui-widget ui-widget-content ui-helper-clearfix ui-corner-all")
            .find(".portlet-header")
            .addClass("ui-state-default ui-corner-all")
            .prepend("<span class='ui-icon ui-icon-minusthick portlet-toggle'></span>");

        $(".portlet-toggle").click(function () {
            var icon = $(this);
            icon.toggleClass("ui-icon-minusthick ui-icon-plusthick");
            icon.closest(".portlet").find(".portlet-content").toggle();
        });

        
        setActiveMenuItem("empManagers");
        UIHelpers.attachDatepickerToInputs($('#RegistrationDate'), "-1:+1", true);
        $('#isSecondaryJobContainer').buttonset();
        $('#isFrontContainer').buttonset();
        $('#isExternalWorkContainer').buttonset();
        $('#IsLiableContainer').buttonset();

        $("#btnManagerDraft").click(function(){
            $("#IsDraftM").val(true);
            $("#IsSP").val(false);
            $("#ManagerForm").submit();
        });

        if($("#IsSecondaryJob").val() == 'True'){$('#isExternalWorkContainer').show();}
        else {$('#isExternalWorkContainer').hide();}
        
        //подкрашиваем вид занятости
        $("#IsSecondaryJobTrue").click(function(){
            $("#lblSJTrue").css("border-color", "red");
            $("#lblSJFalse").css("border-color", "silver");
            $("#isExternalWorkContainer").show();
        });
        $("#IsSecondaryJobFalse").click(function(){
            $("#lblSJTrue").css("border-color", "silver");
            $("#lblSJFalse").css("border-color", "red");
            $("#isExternalWorkContainer").hide();
        });

      

        //подкрашиваем вид совместительства
        $("#IsExternalWorkTrue").click(function(){
            $("#lblEWTrue").css("border-color", "red");
            $("#lblEWFalse").css("border-color", "silver");
        });
        $("#IsExternalWorkFalse").click(function(){
            $("#lblEWTrue").css("border-color", "silver");
            $("#lblEWFalse").css("border-color", "red");
        });

        //подкрашиваем вид фронт/бэк
        $("#IsFrontTrue").click(function(){
            $("#lblFTrue").css("border-color", "red");
            $("#lblFFalse").css("border-color", "silver");
        });
        $("#IsFrontFalse").click(function(){
            $("#lblFTrue").css("border-color", "silver");
            $("#lblFFalse").css("border-color", "red");
        });

        //подкрашиваем вид материальную ответственность
        $("#IsLiableTrue").click(function(){
            $("#lblLTrue").css("border-color", "red");
            $("#lblLFalse").css("border-color", "silver");
        });
        $("#IsLiableFalse").click(function(){
            $("#lblLTrue").css("border-color", "silver");
            $("#lblLFalse").css("border-color", "red");
        });

        //автозаполнение должностей
        $(function () 
        {
            $("[data-autocomplete-source]").each(
                function () 
                {
                    var target = $(this);
                    target.autocomplete({ source: target.attr("data-autocomplete-source"),
                                          select : function(event, ui) 
                                                    {
                                                        //для физиков
                                                        if (ui.item.PositionId != null){
                                                            $("#PositionName").val(ui.item.label);
                                                            $("#PositionId").val(ui.item.PositionId);
                                                        }
                                                        return true;
                                                    }
                                         });
                  });
        });

        var $addManagersCommentDialog = $('#add-managers-comment-dialog').dialog(
        {
            autoOpen: false,
            modal: true,
            width: "auto",
            draggable: false,
            resizable: false,
            close: function (event, ui) {
                                $(this).dialog("destroy").remove();
                            },
            buttons:
            {
                "OK": function () {
                    $('#add-managers-comment-dialog form').submit();
                    //$(this).dialog("close");
                },
                "Отмена": function () {
                    $("#Comment").val('');
                    $(this).dialog("close");
                }
            }
        });


        $("#add-managers-comment").click(function (e) {
            $addManagersCommentDialog.dialog("open");
            e.preventDefault();
        });


        var $PyrusDialog = $('#DivPyrus').dialog(
        {
            autoOpen: false,
            modal: true,
            width: "auto",
            draggable: false,
            resizable: false,
            title: "Список форм на регистрацию доступов в системе Pyrus",
//            buttons:
//            {
//                "OK": function () {
//                    //$('#add-higher-education-diploma-dialog form').submit();
//                    //$(this).dialog("close");
//                },
//                "Отмена": function () {
//                    //$(":text").val('');
//                    $(this).dialog("close");
//                }
//            }
        });

        $("#btnPyrus").click(function(e){ 
            $PyrusDialog.dialog("open");
            e.preventDefault();
        });
    });

    function changePosition(){
        if ($("#PositionName").val() == ""){$("#PositionId").val('0');}
    }

//    function GetSPDetails(IsSP)
//    {
//        $("#IsSP").val(IsSP);
//        var url = "@Url.Action("GetStaffEstablishmentPostDetails", "Employment")";
//        var dataToSend = $("#ManagerForm").serialize();
//        ShowFlash(true);    //это диалоговое окно находится на родительской странице
//        $.post(url, dataToSend, function(data){
//            if (data.ok == true){
//                //FillBranchTableData(data);
//                
//                ShowFlash(false);
//            }
//            else{
//                ShowFlash(false);
//                alert(data.msg);
//            }
//        }, "json")
//    };
    
</script>