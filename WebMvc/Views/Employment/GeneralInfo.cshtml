@model Reports.Presenters.UI.ViewModel.Employment2.GeneralInfoModel
@using Reports.Presenters.Services.Impl
@using Reports.Core
@{
    var dto = UserDto.Deserialize(((FormsIdentity)(HttpContext.Current.User.Identity)).Ticket.UserData);
    if ((dto.UserRole & UserRole.Candidate) > 0)
    {
        Layout = "~/Views/Shared/_LayoutEmployment.cshtml";
        ViewBag.Title = "Прием - Общая информация";
    }
    
}

@Html.Partial("CandidateState", Model.CandidateStateModel)

<span style="color:red;">@ViewBag.Error</span>
<span style="font-size:large;">@Html.ValidationMessageFor(m => m.AgreedToPersonalDataProcessing)</span>


@using (Html.BeginForm("GeneralInfo", "Employment", FormMethod.Post, new { enctype = "multipart/form-data", id = "general-info-form" }))
{    
    @Html.HiddenFor(m => m.Version)
    @Html.HiddenFor(m => m.UserId)
    
    <fieldset class="bordered doc-wrap panel">
    <legend>Общая информация</legend>
        <div class="formfield clear">
            @Html.LabelFor(m => m.AgreedToPersonalDataProcessing)
            @Html.EditorFor(m => m.AgreedToPersonalDataProcessing)
        </div>
        <div class="formfield clearleft" style="float:right">
            <fieldset class="bordered nomargin clear"><legend class="level2">Фото</legend>
                <div style="width: 80px; height: 100px; background: gray;">
                    @if (@Model.PhotoAttachmentId != 0)
                    {
                        <input type="image" style="width: 80px; height: 100px" id="PhotoFileVeiw" name="PhotoFileVeiw" src='@Url.Action("ViewAttachment", new { Id = Model.PhotoAttachmentId })' />
                    }
                </div>
                <br />@Html.ValidationMessageFor(m => m.PhotoFile)

                
                    @if (@Model.PhotoAttachmentId == 0 && !Model.IsValidate)
                    {
                        <input type="file" id="PhotoFile" name="PhotoFile" />
                        @Model.PhotoAttachmentFilename
                    }
                

                @if (!string.IsNullOrEmpty(Model.PhotoAttachmentFilename) && !Model.IsValidate)
                {
                    <div class="formfield">
                        @*@Model.PhotoAttachmentFilename*@
                        <br /><input type="button" value="Удалить фото" onclick="deleteAttachment(@Model.PhotoAttachmentId); " @*@if (!Model.IsDeleteScanAvailable)
                                                                                                   {<text>style="display:none"</text>}*@/>
                    </div>
                }
            </fieldset>            
        </div>
        <div class="formfield">
            @Html.LabelFor(m => m.LastName)&nbsp;@Html.ValidationMessageFor(m => m.LastName)<br />
            @Html.TextBoxFor(m => m.LastName)
            <input type="hidden" id="LastName" name="LastName" value="@Model.LastName" />
        </div>
        <div class="formfield clearleft">
            @Html.LabelFor(m => m.FirstName)&nbsp;@Html.ValidationMessageFor(m => m.FirstName)<br />
            @Html.TextBoxFor(m => m.FirstName)
        </div>
        <div class="formfield clearleft">
            @Html.LabelFor(m => m.Patronymic)&nbsp;@Html.ValidationMessageFor(m => m.Patronymic)<br />
            @Html.TextBoxFor(m => m.Patronymic)&nbsp;@Html.CheckBoxFor(m => m.IsPatronymicAbsent)@Html.LabelFor(m => m.IsPatronymicAbsent)
        </div>        

        <fieldset class="bordered nomargin clear">
        <legend class="level2">@Html.LabelFor(m => m.NameChanges)</legend>
                <div id="name-changes-container">
                    <table class="grid">
                        <thead>
                            <tr>
                                <th>
                                    @Html.LabelFor(m => m.NameChanges[0].PreviousName)
                                </th>
                                <th>
                                    @Html.LabelFor(m => m.NameChanges[0].Date)
                                </th>
                                <th>
                                    @Html.LabelFor(m => m.NameChanges[0].Place)
                                </th>
                                <th>
                                    @Html.LabelFor(m => m.NameChanges[0].Reason)
                                </th>
                                @if (Model.NameChanges != null && Model.NameChanges.Count != 0)
                                {
                                    <th>
                                        @*@Html.LabelFor(m => m.NameChanges[0].Id)*@
                                    </th>
                                }
                            </tr>
                        </thead>
                        <tbody id="name-changes">
                            @for (var i = 0; i < Model.NameChanges.Count; i++)
                            {
                                <tr class="name-change-row">
                                    <td>
                                        @Model.NameChanges[i].PreviousName
                                    </td>
                                    <td>
                                        @(@Model.NameChanges[i].Date.HasValue ? @Model.NameChanges[i].Date.Value.ToShortDateString() : "__.__.____")
                                    </td>
                                    <td>
                                        @Model.NameChanges[i].Place
                                    </td>
                                    <td>
                                        @Model.NameChanges[i].Reason
                                    </td>
                                    @if (Model.NameChanges != null && Model.NameChanges.Count != 0)
                                    {
                                        <td>
                                            <a onclick="DeleteNameChange(@Model.NameChanges[i].Id);" href="#" >Удалить</a>
                                        </td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            <a href="" id="add-name-change">Добавить новую запись</a>
        </fieldset>

        <div class="formfield clear" id="gender">
            @Html.RadioButtonFor(m => m.IsMale, true, new { @id = "IsMaleTrue" })<label id="lblMTrue" for="IsMaleTrue" @if(Model.IsMale){<text>style="border-color:red;"</text>} else{<text> style="border-color:none;"</text>}>М</label>
            @Html.RadioButtonFor(m => m.IsMale, false, new { @id = "IsMaleFalse" })<label id="lblMFalse" for="IsMaleFalse" @if(!Model.IsMale){<text>style="border-color:red;"</text>} else{<text> style="border-color:none;"</text>}>Ж</label>
        </div>
        <div class="formfield clear">
            @Html.LabelFor(m => m.CitizenshipId)&nbsp;@Html.ValidationMessageFor(m => m.CitizenshipId)<br />
            @Html.DropDownListFor(m => m.CitizenshipId, Model.CitizenshipItems, string.Empty)
        </div>
        
        <div class="formfield clear">
            @Html.LabelFor(m => m.DateOfBirth)&nbsp;@Html.ValidationMessageFor(m => m.DateOfBirth)<br />
            @Html.EditorFor(m => m.DateOfBirth)
        </div>
        <div class="formfield clear">
            <fieldset class="bordered nomargin">
            <legend class="level2">Место рождения</legend>
                <div class="formfield clear">
                    @Html.LabelFor(m => m.CountryBirthId)&nbsp;@Html.ValidationMessageFor(m => m.CountryBirthId)<br />
                    @Html.DropDownListFor(m => m.CountryBirthId, Model.CountryBirthItems, string.Empty)
                </div>
                <div class="formfield clear">
                    @Html.LabelFor(m => m.RegionOfBirth)&nbsp;@Html.ValidationMessageFor(m => m.RegionOfBirth)<br />
                    @Html.EditorFor(m => m.RegionOfBirth)
                </div>
                <div class="formfield">
                    @Html.LabelFor(m => m.CityOfBirth)&nbsp;@Html.ValidationMessageFor(m => m.CityOfBirth)<br />
                    @Html.EditorFor(m => m.CityOfBirth)
                </div>
            </fieldset>
        </div>            

        <fieldset class="bordered nomargin clear">
        <legend class="level2">@Html.LabelFor(m => m.ForeignLanguages)</legend>
                <div id="foreign-languages-container">
                    <table class="grid">
                        <thead>
                            <tr>
                                <th>
                                    @Html.LabelFor(m => m.ForeignLanguages[0].LanguageName)
                                </th>
                                <th>
                                    @Html.LabelFor(m => m.ForeignLanguages[0].Level)
                                </th>
                                @if (Model.ForeignLanguages != null && Model.ForeignLanguages.Count != 0)
                                {
                                    <th></th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @for (var i = 0; i < Model.ForeignLanguages.Count; i++)
                            {
                                <tr class="foreign-language-row">
                                    <td>
                                        @Model.ForeignLanguages[i].LanguageName
                                    </td>
                                    <td>
                                        @Model.ForeignLanguages[i].Level
                                    </td>
                                    @if (Model.ForeignLanguages != null && Model.ForeignLanguages.Count != 0)
                                    {
                                        <td id="delete-foreign-language">
                                            <a onclick="DeleteForeignLanguages(@Model.ForeignLanguages[i].Id);" href="#" data-index=@Model.ForeignLanguages[i].Id>Удалить</a>
                                        </td>
                                    }
                                </tr>
                            }
                        </tbody>

                    </table>
                </div>
            <a href="" id="add-foreign-language">Добавить новую запись</a>
        </fieldset>

        <div class="formfield clear">
            @Html.LabelFor(m => m.INN)&nbsp;@Html.ValidationMessageFor(m => m.INN)<br />
            @Html.TextBoxFor(m => m.INN, new { pattern = @"^\d{12}$", title = "12 цифр (############)" })
        </div>
        @if (string.IsNullOrEmpty(Model.INNScanAttachmentFilename) && !Model.IsValidate)
        {
            <div class="formfield">
                Выбрать скан для загрузки<br /><input type="file" name="INNScanFile" /> @Html.ValidationMessageFor(m => m.INNScanFile)
            </div>
        }
        @if (!string.IsNullOrEmpty(Model.INNScanAttachmentFilename))
        {
            <div class="formfield">
                <br />Скан:
                <a class="ui-notify-close" href='@Url.Action("ViewAttachment", new { Id = Model.INNScanAttachmentId })' style="cursor:hand" target="_blank">
                    @Model.INNScanAttachmentFilename
                </a>
            </div>
            if (!Model.IsValidate)
            {
                <div class="formfield">
                    <br /><input type="button" value="Удалить скан" onclick="deleteAttachment(@Model.INNScanAttachmentId);" @*@if (!Model.IsDeleteScanAvailable)
                                                                                               {<text>style="display:none"</text>}*@/>
                </div>
            }
        }
        
        <div class="formfield clear">
            @Html.LabelFor(m => m.SNILS)&nbsp;@Html.ValidationMessageFor(m => m.SNILS)<br />
            @Html.TextBoxFor(m => m.SNILS, new { pattern = @"^(\d{3}-){3}\d{2}$", title = "###-###-###-##" })
        </div>
        @if (string.IsNullOrEmpty(Model.SNILSScanAttachmentFilename) && !Model.IsValidate)
        {
            <div class="formfield">
                Выбрать скан для загрузки<br /><input type="file" name="SNILSScanFile" /> @Html.ValidationMessageFor(m => m.SNILSScanFile)
            </div>
        }
        @if (!string.IsNullOrEmpty(Model.SNILSScanAttachmentFilename))
        {
            <div class="formfield">
                <br />Скан:
                <a class="ui-notify-close" href='@Url.Action("ViewAttachment", new { Id = Model.SNILSScanAttachmentId })' style="cursor:hand" target="_blank">
                    @Model.SNILSScanAttachmentFilename
                </a>
            </div>
            if (!Model.IsValidate)
            {
                <div class="formfield">
                    <br /><input type="button" value="Удалить скан" onclick="deleteAttachment(@Model.SNILSScanAttachmentId); " @*@if (!Model.IsDeleteScanAvailable)
                                                                                               {<text>style="display:none"</text>}*@/>
                </div>
            }
        }

        <fieldset class="bordered nomargin clear">
        <legend class="level2">Инвалидность</legend>
            <div class="formfield clear">
                @Html.LabelFor(m => m.DisabilityCertificateSeries)&nbsp;@Html.ValidationMessageFor(m => m.DisabilityCertificateSeries)<br />
                @Html.TextBoxFor(m => m.DisabilityCertificateSeries)
            </div>
            <div class="formfield">
                @Html.LabelFor(m => m.DisabilityCertificateNumber)&nbsp;@Html.ValidationMessageFor(m => m.DisabilityCertificateNumber)<br />
                @Html.TextBoxFor(m => m.DisabilityCertificateNumber)
            </div>
            <div class="formfield">
                @Html.LabelFor(m => m.DisabilityCertificateDateOfIssue)&nbsp;@Html.ValidationMessageFor(m => m.DisabilityCertificateDateOfIssue)<br />
                @Html.EditorFor(m => m.DisabilityCertificateDateOfIssue)
            </div>
            <div class="formfield">
                @Html.LabelFor(m => m.DisabilityDegreeId)&nbsp;@Html.ValidationMessageFor(m => m.DisabilityDegreeId)<br />
                @Html.DropDownListFor(m => m.DisabilityDegreeId, Model.DisabilityDegrees, string.Empty)
            </div>
            <div class="formfield clear">
                @Html.LabelFor(m => m.IsDisabilityTermLess)&nbsp;@Html.ValidationMessageFor(m => m.IsDisabilityTermLess)<br />
                @Html.CheckBoxFor(m => m.IsDisabilityTermLess)
            </div>
            <div class="formfield">
                @Html.LabelFor(m => m.DisabilityCertificateExpirationDate)&nbsp;@Html.ValidationMessageFor(m => m.DisabilityCertificateExpirationDate)<br />
                @Html.EditorFor(m => m.DisabilityCertificateExpirationDate)
            </div>
            @if (string.IsNullOrEmpty(Model.DisabilityCertificateScanAttachmentFilename) && !Model.IsValidate)
            {
                <div class="formfield clear">
                    Выбрать скан для загрузки<br /><input type="file" name="DisabilityCertificateScanFile" /> @Html.ValidationMessageFor(m => m.DisabilityCertificateScanFile)
                </div>
            }
            @if (!string.IsNullOrEmpty(Model.DisabilityCertificateScanAttachmentFilename))
            {
                <div class="formfield">
                    <br />Скан:
                    <a class="ui-notify-close" href='@Url.Action("ViewAttachment", new { Id = Model.DisabilityCertificateScanAttachmentId })' style="cursor:hand" target="_blank">
                        @Model.DisabilityCertificateScanAttachmentFilename
                    </a>
                </div>
                if (!Model.IsValidate)
                {
                    <div class="formfield">
                        <br /><input type="button" value="Удалить скан" onclick="deleteAttachment(@Model.DisabilityCertificateScanAttachmentId);" @*@if (!Model.IsDeleteScanAvailable)
                                                                                                   {<text>style="display:none"</text>}*@/>
                    </div>
                }
            }

        </fieldset>

        
        
    </fieldset>
    
    <div class="clear">
        @Html.CheckBoxFor(m => m.IsValidate, Model.IsDraft ? null : (object)new { disabled = "disabled" })@Html.LabelFor(m => m.IsValidate) <br />
        @Html.EditorFor(m => m.IsDraft)@Html.LabelFor(m => m.IsDraft)
        @*@Html.CheckBoxFor(m => m.IsValidate)@Html.LabelFor(m => m.IsValidate)*@
        <button id="btn" type="submit">Сохранить</button>
    </div>
}

@* --- *@

<div id="add-name-change-dialog" title="Добавление изменения ФИО">
    @using (Html.BeginForm("GeneralInfoAddNameChange", "Employment", FormMethod.Post))
    {
        <label for="PreviousName" style="display:block;">Предыдущие ФИО</label><input type="text" id="PreviousName" name="PreviousName" value="" class="text ui-widget-content ui-corner-all" style="display:block;" />
        //@Html.ValidationMessageFor(
        <label for="Date" style="display:block;">Дата изменения</label><input type="text" id="DateOfNameChange" name="Date" value="" class="text ui-widget-content ui-corner-all" style="display:block;" />
        <label for="Place" style="display:block;">Место</label><input type="text" name="Place" value="" class="text ui-widget-content ui-corner-all" style="display:block;" />
        <label for="Reason" style="display:block;">Причина</label><input type="text" name="Reason" value="" class="text ui-widget-content ui-corner-all" style="display:block;" />
 
        <!-- Allow form submission with keyboard without duplicating the dialog button -->
        <input type="submit" tabindex="-1" style="position:absolute; top:-1000px" />
    }
</div>

<div id="add-foreign-language-dialog" title="Добавление иностранного языка">
    @using (Html.BeginForm("GeneralInfoAddForeignLanguage", "Employment", FormMethod.Post))
    {
        <label for="LanguageName" style="display:block;">Язык</label><input type="text" name="LanguageName" value="" class="text ui-widget-content ui-corner-all" style="display:block;" />
        <label for="Level" style="display:block;">Степень знания</label><input type="text" name="Level" value="" class="text ui-widget-content ui-corner-all" style="display:block;" />
 
        <!-- Allow form submission with keyboard without duplicating the dialog button -->
        <input type="submit" tabindex="-1" style="position:absolute; top:-1000px" />
    }
</div>

@* --- *@

<script src="/Scripts/UIHelpers.js" type="text/javascript"></script>

<script type="text/javascript">
    function deleteAttachment(id){
        var actionUrl="@Url.Action("DeleteAttachment", "Employment")";
        var url = actionUrl + "?Id=" + id;
        $.getJSON(url,
                       function (data) {
                            if(!data.Result){
                                alert('Ошибка удаления скана:'+ data.Error);
                            }
                            else {
                               location.reload(true);
                           }
                       }
                     );
        return false;
    }


    function AjaxFormRequest(result_id,form_id,url,TypePost) {
        jQuery.ajax({
            url:     url, //Адрес подгружаемой страницы
            type: TypePost, //Тип запроса
            dataType: "html", //Тип данных
            data: jQuery("#"+form_id).serialize(), 
            success: function(response) { //Если все нормально
                document.getElementById(result_id).innerHTML = response;
                },
            error: function(response) { //Если ошибка
                document.getElementById(result_id).innerHTML = "Ошибка при отправке формы";
                }   
        });
    }


    function DeleteNameChange(Id){
        var actionUrl="@Url.Action("GeneralInfoDeleteNameChange", "Employment")";
        var url = actionUrl + "?NameID=" + Id;

        var dataToSend = $("#add-name-change-dialog form").serialize();
            $.post(url, dataToSend, function(dataReceived){
                var $table = $("#name-changes-container>table");
                var $rows = $("#name-changes-container>table .name-change-row");
                $rows.remove();
                for (var i = 0; i < dataReceived.length; i++)
                {
                    $table.append(
                        "<tr class=\"name-change-row\"><td>" +
                        (dataReceived[i].PreviousName ? dataReceived[i].PreviousName : "") + "</td><td>" +
                        UIHelpers.convertMSJsonDateToShortDateString(dataReceived[i].Date) + "</td><td>" +
                        (dataReceived[i].Place ? dataReceived[i].Place : "") + "</td><td>" +
                        (dataReceived[i].Reason ? dataReceived[i].Reason : "") + "</td><td>" +
                        "<a onclick='DeleteNameChange(" + dataReceived[i].Id + ");' href='#' data-index=" + dataReceived[i].Id + ">Удалить</a></td></tr>"
                    );
                }
            }, "json");
    }

    function DeleteForeignLanguages(Id){
        var actionUrl="@Url.Action("GeneralInfoDeleteForeignLanguage", "Employment")";
        var url = actionUrl + "?LanguageID=" + Id;

        var dataToSend = $("#add-foreign-language-dialog form").serialize();
            $.post(url, dataToSend, function(dataReceived){
                var $table = $("#foreign-languages-container>table");
                var $rows = $("#foreign-languages-container>table .foreign-language-row");
                $rows.remove();
                for (var i = 0; i < dataReceived.length; i++)
                {
                    $table.append(
                        "<tr class=\"foreign-language-row\"><td>" +
                        (dataReceived[i].LanguageName ? dataReceived[i].LanguageName : "") + "</td><td>" +
                        (dataReceived[i].Level ? dataReceived[i].Level : "") +  "</td><td>" +
                        "<a onclick='DeleteForeignLanguages(" + dataReceived[i].Id + ");' href='#' data-index=" + dataReceived[i].Id + ">Удалить</a></td></tr>"
                    );
                }
            }, "json");
    }

    
    // BEGIN Add Name Change

    $(document).ready(function () {

        setActiveMenuItem("empGeneralInfo");
        UIHelpers.attachDatepickerToInputs($('#DateOfBirth'), "-80:-14;-80Y;-14Y", true);
        UIHelpers.attachDatepickerToInputs($('#DateOfNameChange, #DisabilityCertificateDateOfIssue'), "-100:+0", true);
        UIHelpers.attachDatepickerToInputs($('#DisabilityCertificateExpirationDate'), "-0:+60", true);
        $('#gender').buttonset();        
        //подкрашиваем пол
        $("#IsMaleTrue").click(function(){
            $("#lblMTrue").css("border-color", "red");
            $("#lblMFalse").css("border-color", "white");
        });
        $("#IsMaleFalse").click(function(){
            $("#lblMTrue").css("border-color", "white");
            $("#lblMFalse").css("border-color", "red");
        });
        //обрабатываем клики по птичке
        $("#IsDisabilityTermLess").click(function(){
            if($("#IsDisabilityTermLess").is(":checked")){$("#DisabilityCertificateExpirationDate").hide();}
            else {$("#DisabilityCertificateExpirationDate").show();}
        });

        if($("#IsDisabilityTermLess").is(":checked")){$("#DisabilityCertificateExpirationDate").hide();}
            else {$("#DisabilityCertificateExpirationDate").show();}

        //$("#btn").click(AjaxFormRequest("tabs1", "GeneralInfo", "/Employment/GeneralInfo", "POST"););
        

        var $addNameChangeDialog = $('#add-name-change-dialog').dialog(
        {
            autoOpen: false,
            modal: true,
            width: "auto",
            draggable: false,
            resizable: false,
            buttons:
            {
                "OK": function () {
                    //if(!Validate1()){return false;}
                    //$('#add-name-change-dialog form').submit();
                    processAddNameChange();
                    $(this).dialog("close");
                },
                "Отмена": function () {
                    $(this).dialog("close");
                }
            }
        });

        function Validate1(){
            if($("#PreviousName").val() == ""){
                var aa = document.getElementsByName("PreviousName");
                aa.css("backgroundColor", "red");
                //alert("ssss");
                return false;
            }
            return true;
        }

        var processAddNameChange = function()
        {
            var url = "@Url.Action("GeneralInfoAddNameChange", "Employment")";
            var dataToSend = $("#add-name-change-dialog form").serialize();
            $.post(url, dataToSend, function(dataReceived){
                var $table = $("#name-changes-container>table");
                var $rows = $("#name-changes-container>table .name-change-row");
                $rows.remove();
                for (var i = 0; i < dataReceived.length; i++)
                {
                    $table.append(
                        "<tr class=\"name-change-row\"><td>" +
                        (dataReceived[i].PreviousName ? dataReceived[i].PreviousName : "") + "</td><td>" +
                        UIHelpers.convertMSJsonDateToShortDateString(dataReceived[i].Date) + "</td><td>" +
                        (dataReceived[i].Place ? dataReceived[i].Place : "") + "</td><td>" +
                        (dataReceived[i].Reason ? dataReceived[i].Reason : "") + "</td><td>" +
                        "<a onclick='DeleteNameChange(" + dataReceived[i].Id + ");' href='#' data-index=" + dataReceived[i].Id + ">Удалить</a></td></tr>"
                    );
                }
            }, "json");
        };

        // END Add Name Change


        // BEGIN Add Foreign Language

        var $addForeignLanguageDialog = $('#add-foreign-language-dialog').dialog(
        {
            autoOpen: false,
            modal: true,
            width: "auto",
            draggable: false,
            resizable: false,
            buttons:
            {
                "OK": function () {
                    processAddForeignLanguage();
                    $(this).dialog("close");
                },
                "Отмена": function () {
                    $(this).dialog("close");
                }
            }
        });

        var processAddForeignLanguage = function()
        {
            var url = "@Url.Action("GeneralInfoAddForeignLanguage", "Employment")";
            var dataToSend = $("#add-foreign-language-dialog form").serialize();
            $.post(url, dataToSend, function(dataReceived){
                var $table = $("#foreign-languages-container>table");
                var $rows = $("#foreign-languages-container>table .foreign-language-row");
                $rows.remove();
                for (var i = 0; i < dataReceived.length; i++)
                {
                    $table.append(
                        "<tr class=\"foreign-language-row\"><td>" +
                        (dataReceived[i].LanguageName ? dataReceived[i].LanguageName : "") + "</td><td>" +
                        (dataReceived[i].Level ? dataReceived[i].Level : "") + "</td><td>" +
                        "<a onclick='DeleteForeignLanguages(" + dataReceived[i].Id + ");' href='#' data-index=" + dataReceived[i].Id + ">Удалить</a></td></tr>"
                    );
                }
            }, "json");
        };

        // END Add Foreign Language

        $("#add-name-change").click(function (e) {
            $addNameChangeDialog.dialog("open");
            e.preventDefault();
        });

        $("#add-foreign-language").click(function (e) {
            $addForeignLanguageDialog.dialog("open");
            e.preventDefault();
        });



        UIHelpers.handleCheckboxState($("#IsPatronymicAbsent"),
            {
                $target: $("#Patronymic"),
                act: function () {
                    this.$target.val("");
                    this.$target.attr("disabled", "disabled");
                }
            },
            {
                $target: $("#Patronymic"),
                act: function () {
                    this.$target.removeAttr("disabled");
                }
            },
            true
        );

//        UIHelpers.handleSelectStates($("#CitizenshipId"), [
//                {
//                    text: "РОССИЯ",
//                    actOnSelect: function(){
//                        $("#InsuredPersonTypeId").val("");
//                        $("#InsuredPersonTypeId").attr("disabled", "disabled");
//                    },
//                    actOnDeselect: function(){
//                        $("#InsuredPersonTypeId").removeAttr("disabled");
//                    }
//                },
//                {
//                    value: "",
//                    actOnSelect: function(){
//                        $("#InsuredPersonTypeId").val("");
//                        $("#InsuredPersonTypeId").attr("disabled", "disabled");
//                    },
//                    actOnDeselect: function(){
//                        $("#InsuredPersonTypeId").removeAttr("disabled");
//                    }
//                }
//            ],        
//            true
//        );

    });
</script> 