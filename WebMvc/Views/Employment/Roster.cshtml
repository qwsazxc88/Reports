@model Reports.Presenters.UI.ViewModel.Employment2.RosterModel
@using Reports.Presenters.Services.Impl
@using Reports.Core
@{
    var dto = UserDto.Deserialize(((FormsIdentity)(HttpContext.Current.User.Identity)).Ticket.UserData);
    Layout = "~/Views/Shared/_LayoutEmployment.cshtml";
    ViewBag.Title = "Прием - Реестр по приему";
}

@* BEGIN Выбор параметров *@

@using (Html.BeginForm("Roster", "Employment", FormMethod.Post, new {id = "mainForm"}))
{
    <table style="width:100%">
        <tr>
            <td colspan="2">
                <div class="filter-wrap">
                    <table>
                        <tr>
                            <td colspan="2">
                                <span style="font-weight: bold">Выбор параметров</span>
                            </td>
                        </tr>
                        <tr>
                            <td colspan="2">
                                @Html.ValidationSummary(false)
                            </td>
                        </tr>
                        <tr>
                            <td>
                                @Html.LabelFor(m => m.DepartmentName):
                            </td>
                            <td>
                                <label id="DepartmentNameLabel">@Model.DepartmentName</label>
                                <input type="hidden" id="DepartmentName" name="DepartmentName" value="@Model.DepartmentName" />
                                <input type="hidden" id="DepartmentId" name="DepartmentId" value="@Model.DepartmentId" />
                            </td>
                        </tr>
                        <tr>
                            <td colspan="2">
                                <input type="button" value="Выбрать" onclick="changeDepartment();"/>           
                            </td>
                        </tr>
                        <tr>
                                <td>
                                @Html.LabelFor(m => m.StatusId):
                            </td>
                            <td>
                                @Html.DropDownListFor(model => model.StatusId, Model.Statuses, string.Empty)
                                </td>
                        </tr>
                        <tr>
                            <td>
                                @Html.LabelFor(m => m.UserName):
                            </td>
                            <td>
                                @Html.TextBoxFor(model => model.UserName, new { placeholder = "ФИО" })
                            </td>
                        </tr>
                        <tr>
                            <td>
                                @Html.LabelFor(m => m.CandidateId):
                            </td>
                            <td>
                                @Html.TextBoxFor(m => m.CandidateId)
                            </td>
                        </tr>
                        <tr>
                            <td>
                                @Html.LabelFor(m => m.ContractNumber1C):
                            </td>
                            <td>
                                @Html.TextBoxFor(m => m.ContractNumber1C)
                            </td>
                        </tr>
                        <tr>
                            <td>
                                @Html.LabelFor(m => m.CompleteDate):
                            </td>
                            <td>
                                @Html.TextBoxFor(m => m.CompleteDate)
                            </td>
                        </tr>
                        <tr>
                            <td colspan="2">
                                @Html.LabelFor(m => m.BeginDate):
                                @Html.EditorFor(model => model.BeginDate) 
                                @Html.LabelFor(m => m.EndDate):
                                @Html.EditorFor(model => model.EndDate) 
                                </td>
                        </tr>
                        <tr>
                            <td colspan="2">
                            @*<button type="submit">Выбрать</button>*@
                            <button id="btnSubmit" type="button">Выбрать</button>
                            <input type="button" value="Очистить" onclick="resetFilter();"/>
                            </td>
                        </tr>                        
                    </table>
                </div>
            </td>
        </tr>
    </table>

    @* END Выбор параметров *@
    
    if ((dto.UserRole & UserRole.Manager) > 0 || (dto.UserRole & UserRole.PersonnelManager) > 0)
    {
        <div style="margin: 10px;"><span class="buttonLink">@Html.ActionLink("Добавить кандидата", "CreateCandidate")</span></div>
    }
    
    <div style="text-align: right;">
        @if (Model.Roster != null && Model.Roster.Count > 0)
        {
            <button type="button" onclick="onPrintClick()">
                Печать реестра
            </button>
        }
        @if (Model.IsBulkApproveByManagerAvailable || Model.IsBulkApproveByHigherManagerAvailable)
        {
            <input type="hidden" id="IsApproveModified" name="isApproveModified" value="false" />                    
            <button id="SaveRosterButton" style="margin: 5px;">Записать</button>
        }
    </div>
    
    @* END CreateCandidate *@

    <fieldset class="bordered doc-wrap panel">
    <legend>Реестр по приему</legend>

    <input type="hidden" id="SortBy" name="SortBy" value="@Model.SortBy" />
    <input type="hidden" id="SortDescending" name="SortDescending" value="@Model.SortDescending" />

    <table class="grid">

    <tr style="vertical-align:bottom;">
        
        <th>
            №<br />п/п
        </th>
        <th>
            <div id="sort1"><a href="#" onclick = "SortColumnChanged(1);">№ <br />заявки</a></div>
        </th>
        <th>
            <div id="sort2"><a href="#" onclick = "SortColumnChanged(2);">Дата <br />заявки</a></div>
        </th>
        <th>
            <div id="sort16"><a href="#" onclick = "SortColumnChanged(16);">Номер <br />документа<br />из 1С</a></div>
        </th>
        <th>
            <div id="sort3"><a href="#" onclick = "SortColumnChanged(3);">ФИО</a></div>
        </th>
        <th>
            <div id="sort4"><a href="#" onclick = "SortColumnChanged(4);">Должность</a></div>
        </th>        
        <th>
            <div id="sort5"><a href="#" onclick = "SortColumnChanged(5);">Структурное<br />подразделение<br />3 ур.</a></div>
        </th>
        <th>
            <div id="sort6"><a href="#" onclick = "SortColumnChanged(6);">Структурное<br />подразделение<br />7 ур.</a></div>
        </th>
        <th>
            <div id="sort7"><a href="#" onclick = "SortColumnChanged(7);">Город<br />места<br />работы</a></div>
        </th>
        <th>
            <div id="sort8"><a href="#" onclick = "SortColumnChanged(8);">Основная\<br />По<br />совместительству</a></div>
        </th>
        <th>
            <div id="sort9"><a href="#" onclick = "SortColumnChanged(9);">Исп.<br />срок</a></div>
        </th>
        <th>
            <div id="sort10"><a href="#" onclick = "SortColumnChanged(10);">Инвалидность</a></div>
        </th>
        <th>
            <div id="sort11"><a href="#" onclick = "SortColumnChanged(11);">Обучение</a></div>
        </th>
        <th>
            <div id="sort12"><a href="#" onclick = "SortColumnChanged(12);">Дата<br />приема</a></div>
        </th>
        <th>
            Дата<br />окончания<br />СТД
        </th>
        <th>
            <div id="sort17"><a href="#" onclick = "SortColumnChanged(17);">Дата<br />создания<br />кандидата</a></div>
        </th>
        <th>
            Сотрудник<br />переведен на<br />бессрочный ТД<br />
            @if (Model.IsBulkChangeContractToIndefiniteAvailable)
            {
                <input type="checkbox" id="setAllToChangeContractToIndefinite" />
            }
        </th>
        <th>
            <div id="sort13"><a href="#" onclick = "SortColumnChanged(13);">Руководитель</a></div>
        </th>
        <th>
            <div id="sort14"><a href="#" onclick = "SortColumnChanged(14);">Кадровик</a></div>
        </th>
        <th>
            <div id="sort18"><a href="#" onclick = "SortColumnChanged(18);">Состояние<br />документов<br />приема</a></div>
        </th>
        <th>
            <div id="sort15"><a href="#" onclick = "SortColumnChanged(15);">Текущее<br />состояние</a></div>
        </th>
        @*
        <th>
            Анкета
        </th>
        *@
        
@*
        @if (Model.IsBulkApproveByManagerAvailable)
        {
            <th>
                Согласовано<br />руководителем<br />
                <input type="checkbox" id="setAllByManager" />
            </th>
        }
    
        @if (Model.IsBulkApproveByHigherManagerAvailable)
        {
            <th>
                Согласовано<br />вышестоящим<br />руководителем<br />
                <input type="checkbox" id="setAllByHigherManager" />
            </th>
        }
  *@  
    </tr>
    <tbody id="tblBody">
        @{ int i = 1; }

        @foreach (var candidate in Model.Roster)
        {
  
            <tr>
        
                <td >
                    @i
                    @Html.HiddenFor(m => m.Roster[i - 1].Id)
                </td>
                <td>
                    @candidate.Id.ToString()
                </td>
                <td>
                    &nbsp;@(candidate.QuestionnaireDate.HasValue ? candidate.QuestionnaireDate.Value.ToShortDateString() : String.Empty)
                </td>
                <td>
                    @candidate.ContractNumber1C
                </td>
                <td>
                    <a class="ui-notify-close" href='@Url.Action("PersonnelInfo", "Employment", new { id = @candidate.UserId, IsCandidateInfoAvailable = Model.IsCandidateInfoAvailable, IsBackgroundCheckAvailable = Model.IsBackgroundCheckAvailable, IsManagersAvailable = Model.IsManagersAvailable, IsPersonalManagersAvailable = Model.IsPersonalManagersAvailable, TabIndex = 0 })' style="cursor:hand">@candidate.Name</a>
                </td>
                <td>
                    &nbsp;@candidate.Position
                </td>        
                <td>
                    &nbsp;@candidate.Department3
                </td>

                <td>
                    &nbsp;@candidate.Department
                </td>
                <td>
                    &nbsp;@candidate.WorkCity
                </td>
                <td class="centered">
                     &nbsp;@Html.CheckBoxFor(m => m.Roster[i - 1].IsSecondaryJob, new { disabled = "disabled" })
                </td>
                <td>
                    &nbsp;@candidate.ProbationaryPeriod
                </td>
                <td>
                    &nbsp;@candidate.Disabilities
                </td>
                <td>
                    &nbsp;@candidate.Training
                </td>
                <td>
                    &nbsp;@(candidate.EmploymentDate.HasValue ? candidate.EmploymentDate.Value.ToShortDateString() : String.Empty)
                </td>
                <td @if (candidate.IsFixedTermContract != null && candidate.IsFixedTermContract.Value)
                    {<text>style="background-color:yellow"</text>}>
                    &nbsp;@(candidate.ContractEndDate.HasValue ? candidate.ContractEndDate.Value.ToShortDateString() : String.Empty)
                </td>
                <td>
                    &nbsp;@(candidate.CompleteDate.HasValue ? candidate.CompleteDate.Value.ToShortDateString() : String.Empty)
                </td>
                <td class="centered">
                    @if (Model.Roster[i - 1].IsChangeContractToIndefiniteAvailable)
                    {
                        @Html.CheckBoxFor(m => m.Roster[i - 1].IsContractChangedToIndefinite, new { @class = "selcheckContractToIndefinite", dataId = Model.Roster[i - 1].Id })
                    }
                    else
                    {
                        @Html.CheckBoxFor(m => m.Roster[i - 1].IsContractChangedToIndefinite, new { disabled = "disabled" })
                    }
                </td>
                <td>
                    &nbsp;@candidate.AppointmentManager
                </td>
                <td>
                    &nbsp;@candidate.PersonnelName
                </td>
                <td>
                    &nbsp;@candidate.DocStatus
                </td>
                <td>
                    &nbsp;@candidate.Status
                </td>
                @*
                <td rowspan="2" class="displayLinks" style="vertical-align:bottom; padding: 0;">
                    <span class="buttonLink">Разделы</span>
                </td>
                *@
                


                
                @*        
                @if (Model.IsBulkApproveByManagerAvailable)
                {
                    <td rowspan="2" class="centered">
                        @if (Model.Roster[i - 1].IsApproveByManagerAvailable)
                        {
                            @Html.CheckBoxFor(m => m.Roster[i - 1].IsApprovedByManager, new { @class = "selcheckByManager", dataId = Model.Roster[i - 1].Id })
                        }&nbsp;
                    </td>
                }
        
                @if (Model.IsBulkApproveByHigherManagerAvailable)
                {
                    <td rowspan="2" class="centered">
                        @if (Model.Roster[i - 1].IsApproveByHigherManagerAvailable)
                        {
                            @Html.CheckBoxFor(m => m.Roster[i - 1].IsApprovedByHigherManager, new { @class = "selcheckByHigherManager", dataId = Model.Roster[i - 1].Id })
                        }&nbsp;
                    </td>
                }        

                @{i++;}
                *@
            </tr>
        
        }
    </tbody>
    </table>

    </fieldset>
    
}

<script src="/Scripts/UIHelpers.js" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/TableSort.js")" type="text/javascript"></script>

<script type="text/javascript">
    var actionDepUrl = '@Url.Action("GetChildren", "Home")';
    var actionDepDialogUrl = '@Url.Action("DepartmentDialog", "Home")';
        
    var isApproveByManagerChanged = false;
    var isApproveByHigherManagerChanged = false;
    var isChangeContractToIndefiniteChanged = false;

    $(document).ready(function () {
        setActiveMenuItem("empRoster");
        UIHelpers.attachDatepickerToInputs($('#BeginDate, #EndDate, #CompleteDate'), "-1:+0", true);
        $(".hasDatepicker").width("75px");

        $(".selcheckByManager, #setAllByManager").click(function () {
            isApproveByManagerChanged = true;
        });
        $(".selcheckByHigherManager, #setAllByHigherManager").click(function () {
            isApproveByHigherManagerChanged = true;
        });
        $(".selcheckContractToIndefinite, #setAllToChangeContractToIndefinite").click(function () {
            isChangeContractToIndefiniteChanged = true;
        });

        setSortFields();

        $("#btnSubmit").click(function () {
            $("tblBody").remove();
            this.form.submit();
        });

        $("#setAllToChangeContractToIndefinite").click(function () {
            if ($(this).is(':checked')) {
                $(".selcheckContractToIndefinite").attr('checked', 'checked');
            }
            else {
                $(".selcheckContractToIndefinite").removeAttr('checked');
            }
        });

        $("#setAllByManager").click(function () {
            if ($(this).is(':checked')) {
                $(".selcheckByManager").attr('checked', 'checked');
            }
            else {
                $(".selcheckByManager").removeAttr('checked');
            }
        });

        $("#setAllByHigherManager").click(function () {
            if ($(this).is(':checked')) {
                $(".selcheckByHigherManager").attr('checked', 'checked');
            }
            else {
                $(".selcheckByHigherManager").removeAttr('checked');
            }
        });

        $("#SaveRosterButton").click(function (e) {
            $("#IsApproveModified").val("true");
            var url = "";

            if (isApproveByManagerChanged || isApproveByHigherManagerChanged) {
                url = "/Employment/RosterBulkApprove";
            }

            if (isChangeContractToIndefiniteChanged) {
                url = "/Employment/RosterBulkChangeContractToIndefinite";
            }

            $.post(url,
                $("#mainForm").serialize(),
                function (data) {
                    if (data.ok === true) {
                        UIHelpers.showInputActionResult([$(this)], true);
                    }
                    else {
                        UIHelpers.showInputActionResult([$(this)], false);
                    }
                }
            );

            e.preventDefault();
        });

    });

    function resetFilter() {
        $("#BeginDate").val('');
        $("#EndDate").val('');
        $("#CompleteDate").val('');

        $("#DepartmentId").val('0');
        $("#DepartmentNameLabel").text('');
        $("#DepartmentName").val('');
        $("#CandidateId").val('');
        $("#StatusId").val('');

        if ($('#PositionId option').length > 1)
            $("#PositionId").val('0');
        $("#VacationTypeId").val('0');
        $("#RequestStatusId").val('0');
        $("#UserName").val('');
    }

    function onPrintClick() {

        window.location.href = '@Url.Action("GetPrintRoster", "Employment")?' +
            'beginDate='+ SetLocale($("#BeginDate").val()) +
            '&endDate=' + SetLocale($("#EndDate").val()) +
            '&departmentId=' + $("#DepartmentId").val() +
            '&statusId='+ $("#StatusId").val() +
            '&userName=' + escapeJson($("#UserName").val()) +
            '&sortBy=' + $("#SortBy").val() +
            '&sortDescending=' + $("#SortDescending").val();
    }

    function SetLocale(changeformat) {
        var arraydates = changeformat.split(".");
        var newdate = arraydates[1] + "." + arraydates[0] + "." + arraydates[2];
        return newdate;
    }

    function SortColumnChanged(OrderId) {
        $("tblBody").remove();
        SortChanged(OrderId);
    }

</script>