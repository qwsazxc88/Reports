@model Reports.Presenters.UI.ViewModel.StaffList.StaffListArrangementModel
@{
    Layout = "~/Views/Shared/_LayoutStaffList.cshtml";
    ViewBag.Title = "Штатная расстановка";
}

@using (Html.BeginForm("StaffListArrangement", "StaffList", FormMethod.Post, new { enctype = "multipart/form-data", id = "StaffListArrangementForm" }))
{
    @Html.HiddenFor(m => m.DepId)
    <div style="border:solid 1px black; padding:10px; background-color:#FAFAFA;">
        
        <table id="tbl" class="grid">
            <thead>
                <tr>
                    <th rowspan="3">Уровень<br />подразделений</th>
                    <th rowspan="3">Структура подразделений</th>
                    <th rowspan="3">Должность</th>
                    <th rowspan="3">Кол-во<br />шт. ед.</th>
                    <th rowspan="3">Оклад</th>
                    <th rowspan="3">Ставка</th>
                    <th colspan="7">Надбавки</th>
                    <th rowspan="3">Итого</th>
                    <th rowspan="3">ФИО<br />сотрудника</th>
                    <th rowspan="3">ОЖ</th>
                    <th rowspan="3">Временный<br />перевод</th>
                    <th rowspan="3">Длительное<br />отсутствие</th>
                    <th rowspan="3">Резерв<br />вакансии</th>
                    <th rowspan="3">Основной<br />сотрудник</th>
                </tr>   
                <tr>
                    <th>Должностная</th>
                    <th colspan="6">Персональные</th>
                </tr>
                <tr>
                    <th>Районный<br />коэфф.</th>
                    <th>Персон.</th>
                    <th>Терр.</th>
                    <th>Фронт</th>
                    <th>Разъезд.<br />характер<br />работы</th>
                    <th>Северная</th>
                    <th>Квал-ция</th>
                </tr>
            </thead>
            
            @{ int i = 0; }
            @foreach (var item in Model.Departments.OrderBy(x => x.Priority))
            {
                <tr id="tr-@item.Code1C" accessKey="@item.Path" style="background-color: #E9FFE9;">
                    <td class="tdBtn">@item.ItemLevel</td>
                    <td>
                        <span>
                            <a class="Acollapsible" accessKey="@item.Path" href="#" id="getnodes-@item.Code1C" onclick="GetNodes(@item.Code1C);"><span class="collapse collapsible">&nbsp;</span> @item.Name</a>
                        </span>
                        <button type="button" class="btnDepExpand" title="Раскрыть ветку" onclick="GetNodes(@item.Code1C, true);" style="@if(item.ItemLevel == 7 || item.ItemLevel == 1){<text>display:none;</text>}"></button>
                        <button type="button" class="btnDepNewWindow" title="Открыть ветку в новом окне" onclick="GetDepartments(@item.Code);" style="@if(item.ItemLevel == 7 || item.ItemLevel == 1){<text>display:none;</text>}"></button>
                    </td>
                    <td></td>
                    <td>@item.SEPCount</td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                </tr>
            }
            @{ i++; }
        </table>             

    </div>
    
    <div id="DivIndicator" style="display:none;">
        <table>
            <tr>
                <td><span id="LoadingIndicator2"></span></td>
                <td><label>Идет загрузка данных...</label></td>
            </tr>
        </table>
    </div>
    
    <div id="DivTemporaryVacation" style="display:none;">
        <table>
            <tr>
                <td>@Html.LabelFor(m => m.AbsencesTypeId)</td>
                <td>@Html.DropDownListFor(m => m.AbsencesTypeId, new SelectList(Model.AbsencesTypes, "Id", "Name"))</td>
            </tr>
            <tr>
                <td>@Html.LabelFor(m => m.DateBegin)</td>
                <td>@Html.TextBoxFor(m => m.DateBegin)</td>
            </tr>
            <tr>
                <td>@Html.LabelFor(m => m.DateEnd)</td>
                <td>@Html.TextBoxFor(m => m.DateEnd)</td>
            </tr>
            <tr>
                <td>@Html.LabelFor(m => m.Note)</td>
                <td>@Html.TextAreaFor(m => m.Note, new { style = "width:400px;" })</td>
            </tr>
        </table>
    </div>
}

<script type="text/javascript">
    var DepTable = [];

    $(document).ready(function () {
        setActiveMenuItem("moStaffArrangement");

         $(document).tooltip({track: false,
            show: { /*effect: "blind",*/ duration: 1000 }});

        $(".CallModal").click(function(e){e.preventDefault(); return false;});//чтобы при вызове модального окна не скроллилась страница вверх

        $("#DateBegin").datepicker({ changeYear: true, changeMonth: true, showButtonPanel: true });
        $("#DateEnd").datepicker({ changeYear: true, changeMonth: true, showButtonPanel: true });
        $(".hasDatepicker").width("85px");

        ShowFlash(true);
        ShowFlash(false);
        $(":button").button();
        //для эффекта раскрытой ветки
        $(".Acollapsible").click(function (e) {
            e.preventDefault();
            $(this).children('span').toggleClass("collapse expand");
        })
    });


    //подгружаем уровни структуры и штатные единицы
    function GetNodes(Id, IsExpandAll) {
        //чтобы не подгружались данные вторично
        if($("#getnodes-" + Id).hasClass("IsLoading")){
            var IsCollapse = false;
            var akParent = "";
            akParent = $("#tr-" + Id)[0].accessKey;
            //перебираем загруженные строковые элементы страницы, чтобы скрывать/раскрывать загруженные ветки
            $("tr").each(function(){
                if (this.id == "tr-" + Id){
                }
                else{
                    //по пути определяем нужные строки и по наличию класса показываем/скрываем их
                    if (akParent.length != 0)
                    {
                        if (this.accessKey.indexOf(akParent) > -1){
                            if (this.accessKey.substring(akParent.length) == this.id.substring(3) + "." || this.accessKey == akParent)//дочерние следующего уровня
                            {
                                if($("#" + this.id).hasClass("IsVisible")){ IsCollapse = true; }    //определяем что происходит в данный момент, скрытие/расркытие дочерних строк

                                if (IsCollapse)
                                {
                                    $("#" + this.id).removeClass("IsVisible");
                                    $("#" + this.id).hide();
                                }
                                else
                                {
                                    $("#" + this.id).addClass("IsVisible");
                                    $("#" + this.id).show();
                                }
                            }

                            if(IsCollapse)
                            {
                                $("#" + this.id).hide();
                                $("#" + this.id).addClass("IsHide");
                            }
                            else
                            {
                                if ($("#" + this.id).hasClass("IsVisible") && $("#" + this.id).hasClass("IsHide"))
                                {
                                    $("#" + this.id).show();
                                    $("#" + this.id).removeClass("IsHide");
                                }
                            }
                        }
                    }
                }
            });
            return;
        }
        else{$("#getnodes-" + Id).addClass("IsLoading");}

        var actionUrl="@Url.Action("StaffListArrangement", "StaffList")";
        $("#DepId").val(Id);
        var dataToSend = $("#StaffListArrangementForm").serialize();
        ShowFlash(true);

        jQuery.ajax({
            url: actionUrl,
            type: 'POST',
            dataType: 'json',
            data: dataToSend,
            async: true,
            success: function(result){
                // $liParent = $("#li-" + Id.toString());
                var ResultStr = "";
                var tblStr = "";


                if (result.Departments != null)
                {
                    //DepTable = result.Departments;
                    for (var i = 0; i < result.Departments.length; i++)
                    {   
                        if(IsExpandAll)
                        {
                            DepTable[i] = result.Departments[i].Code1C;
                        }

                        tblStr = "<tr id='tr-" + result.Departments[i].Code1C + "' accessKey='" + result.Departments[i].Path + "' class='IsVisible' style='background-color: #E9FFE9;'>" +
                                    "<td class='tdBtn'>" + result.Departments[i].ItemLevel + "</td>" +
                                    "<td>" +
                                    "<span>";
                                        var BSCount = (result.Departments[i].ItemLevel - 1) * 4; //отступ от левого края каждого вложения на 4 пробела больше родительского
                                        for (var j = 0; j < BSCount; j++)
                                        {
                                            tblStr += "&nbsp;";
                                        }
                                        tblStr += "<a class='Acollapsible' accessKey='" + result.Departments[i].Path + "' href='#' id='getnodes-" + result.Departments[i].Code1C + "' onclick='GetNodes(" + result.Departments[i].Code1C + ");'>" +
                                        "<span Id='span-tr" + result.Departments[i].Code1C + "' class='collapse collapsible'>&nbsp;</span> " + result.Departments[i].Name + "</a>" +
                                    "</span>" +
                                        "<button type='button' class='btnDepExpand' title='Раскрыть ветку' onclick='GetNodes("+ result.Departments[i].Code1C +", true);' " + (result.Departments[i].ItemLevel == 7 ? "style='display:none;'" : "") + "></button>" +
                                        "<button type='button' class='btnDepNewWindow' title='Открыть ветку в новом окне' onclick='GetDepartments("+ result.Departments[i].Code + ");' " + (result.Departments[i].ItemLevel == 7 ? "style='display:none;'" : "") + "></button>" +
                                    "</td>" + 
                                    "<td></td>" +
                                    "<td>" + result.Departments[i].SEPCount + "</td>" +
                                    "<td></td>" +
                                    "<td></td>" +
                                    "<td></td>" +
                                    "<td></td>" +
                                        "<td></td>" +
                                        "<td></td>" +
                                        "<td></td>" +
                                        "<td></td>" +
                                        "<td></td>" +
                                        "<td></td>" +
                                        "<td></td>" +
                                        "<td></td>" +
                                        "<td></td>" +
                                        "<td></td>" +
                                        "<td></td>" +
                                        "<td></td>" +
                                    "</tr>";

                        var ParentRowName = "#tr-" + (i == 0 ? Id : result.Departments[i - 1].Code1C);//определяем Id строки после которой нужно добавить новую строку
                        $(ParentRowName).after(tblStr);//вставляем новую строку
                        //var aa = $(ParentRowName);
                        //console.log(aa);
                        $("#span-tr" + result.Departments[i].Code1C).removeClass("collapse collapsible");
                        $("#getnodes-" + result.Departments[i].Code1C).removeClass("Acollapsible");

                        //для седьмого уровня надо обработчик, так как показываем еще и сотрудников
                        if (result.Departments[i].ItemLevel <= 7){
                            $("#span-tr" + result.Departments[i].Code1C).addClass("collapse collapsible");
                            $("#getnodes-" + result.Departments[i].Code1C).addClass("Acollapsible");
                            //console.log(ResultStr);
                            //назначаем обработчик для раскрытия веток дерева
                            $("#getnodes-" + result.Departments[i].Code1C).click(function (e) {
                                e.preventDefault();
                                $(this).children('span').toggleClass("collapse expand");
                                $(this).closest('li').children('ul').slideToggle();
                            });

                            //при автооткрытии имитируем клик, меняем внешний вид
                            if (IsExpandAll){
                                $("#span-tr" + result.Departments[i].Code1C).toggleClass("collapse expand");

                            }
                        }
                    }
                }
                    
                if(result.EstablishedPosts != null)
                {
                    for (var i = 0; i < result.EstablishedPosts.length; i++)//штатные единицы
                    {   
                        tblStr = "<tr id='tru-" + result.EstablishedPosts[i].Id + "-" + result.EstablishedPosts[i].SEPId + "' accessKey='" + result.EstablishedPosts[i].Path + "' class='IsVisible' ;'>" +
                                    "<td></td>" +
                                    "<td></td>" +
                                    "<td>" +
                                    "<span>" +
                                        "<a class='Acollapsible CallModal' accessKey='' href='#' id='' onclick='' style='color:green;'>" +  //onclick='CreateTemporaryVacation(" + Id + ", " + result.EstablishedPosts[i].Id + ", " + result.EstablishedPosts[i].SEPId + ");'
                                        result.EstablishedPosts[i].PositionName + "</a>" +
                                    "</span>" +
                                    "</td>" + 
                                    "<td>" + result.EstablishedPosts[i].Quantity + "</td>" +
                                    "<td>" + result.EstablishedPosts[i].Salary + "</td>" +
                                    "<td>" + (result.EstablishedPosts[i].Rate != null ? result.EstablishedPosts[i].Rate : "") + "</td>" +
                                        
                                        "<td>" + (result.EstablishedPosts[i].Regional != null ? result.EstablishedPosts[i].Regional : "") + "</td>" +
                                        "<td>" + (result.EstablishedPosts[i].Personnel != null ? result.EstablishedPosts[i].Personnel : "") + "</td>" +
                                        "<td>" + (result.EstablishedPosts[i].Territory != null ? result.EstablishedPosts[i].Territory : "") + "</td>" +
                                        "<td>" + (result.EstablishedPosts[i].Front != null ? result.EstablishedPosts[i].Front : "") + "</td>" +
                                        "<td>" + (result.EstablishedPosts[i].Drive != null ? result.EstablishedPosts[i].Drive : "") + "</td>" +
                                        "<td>" + (result.EstablishedPosts[i].North != null ? result.EstablishedPosts[i].North : "") + "</td>" +
                                        "<td>" + (result.EstablishedPosts[i].Qualification != null ? result.EstablishedPosts[i].Qualification : "") + "</td>" +
                                        "<td>" + (result.EstablishedPosts[i].TotalSalary != null ? result.EstablishedPosts[i].TotalSalary : "") + "</td>" 
                                        //красим увольняющихся
                                        if(!result.EstablishedPosts[i].IsDismiss && !result.EstablishedPosts[i].IsDismissal)
                                        {
                                            if(result.EstablishedPosts[i].IsVacation || result.EstablishedPosts[i].IsReserve)
                                            {
                                                tblStr += "<td>" + (result.EstablishedPosts[i].Surname == null ? "" : result.EstablishedPosts[i].Surname) + "</td>"
                                            }
                                            else
                                            {
                                                tblStr += "<td><a class='CallModal' href='#' onclick='GetStaffMovementRequest(" + result.EstablishedPosts[i].UserId + ");'>" + (result.EstablishedPosts[i].Surname == null ? "" : result.EstablishedPosts[i].Surname) + "</a></td>"
                                            }
                                        }
                                        else
                                        {
                                            tblStr += "<td style='color:Red;'>" + (result.EstablishedPosts[i].Surname == null ? "" : result.EstablishedPosts[i].Surname) + "</td>"
                                        }
                                        tblStr += "<td>" + (result.EstablishedPosts[i].ReplacedName == null ? "" : result.EstablishedPosts[i].ReplacedName) + "</td>" +
                                        "<td></td>" +
                                        "<td></td>" +
                                        "<td>" + (result.EstablishedPosts[i].Reserve == null ? "" : result.EstablishedPosts[i].Reserve) + "</td>" +
                                        "<td>" + (result.EstablishedPosts[i].BasicUser == null ? "" : result.EstablishedPosts[i].BasicUser) + "</td>" +
                                    "</tr>";

                        var ParentRowName = "#tr-" + Id;//определяем Id строки после которой нужно добавить новую строку
                        $(ParentRowName).after(tblStr);//вставляем новую строку
                            $(".CallModal").click(function(e){e.preventDefault(); return false;});//чтобы при вызове модального окна не скроллилась страница вверх
                    }
                }
                    

                //пытаемся раскрыть рекурсивно всю ветку 
                if (DepTable.length > 0)
                {
                    for (var i = 0; i < DepTable.length; i++)
                    {
                        GetNodes(DepTable[i], IsExpandAll);
                    }
                    DepTable = [];
                }
                    


                $(":button").button();

                ShowFlash(false);
            },
            error: function(e, str1){
                if(str1 == "parsererror")
                    alert("Доступ запрещен!.");
                else
                    alert("При загрузке данных произошла ошибка.");

                ShowFlash(false);
            }
        });
    }


    function ShowFlash(IsShow)  //показываем индикатор загрузки
    {
        if (!IsShow) {
            $("#LoadingIndicator2").removeClass("loading2");
            $("#DivIndicator").dialog("close");
            $("#DivIndicator").hide();
        }
        else {
            $("#LoadingIndicator2").addClass("loading2");
            $("#DivIndicator").show();
            $("#DivIndicator").dialog(
            { // initialize dialog box
                autoOpen: true,
                modal: true,
                // fix IE6  
                bgiframe: true,
                draggable: false,
                resizable: false,
                width: 300,
                height: 60,
                closeOnEscape: false,
                close: function (event, ui) {
                    //$(this).dialog("destroy").remove();
                }
            });
            $(".ui-dialog-titlebar").hide();
            $(".ui-dialog-titlebar-close").hide();
        }
    }

   
   //открываем ветку в новом окне
    function GetDepartments(DepCode)
    {
        var actionUrl="@Url.Action("StaffListArrangement", "StaffList")";
        actionUrl += "?DepId=" + DepCode + "&IsParentDepOnly=true&IsBegin=false";
        location.href = actionUrl;
    }


    //переходим в создание заявки на перемещение
    function GetStaffMovementRequest(UserId)
    {
        var elem = document.createElement('div');
        elem.id = "divSelectTypeDialog";
        var newDiv = $(elem);

        var actionDetailDialogUrl = "@Url.Action("SelectMovementType", "StaffList")";
        actionDetailDialogUrl += "?UserId=" + UserId;

        var title = "Выбор типа заявки для штатного перемещения";
        

        $(newDiv).text('Подождите, идет загрузка данных ...');
        $.ajaxSetup({ cache: false });
        $(newDiv).load(actionDetailDialogUrl + " #SelectMovementType"
            , function (response, status, xhr) {
                if (status == "error") {
                    var msg = "Произошла ошибка: ";
                    $(newDiv).html("<div style='color:Red'>" + msg + xhr.status + " " + xhr.statusText + "</div>");
                }
            }
        );
                $(newDiv).dialog(
        { 
            autoOpen: false,
            modal: true,
            title: title,
            draggable: false,
            resizable: false,
            width: "auto",
            //position: { my: "left top", at: "left bottom", of: button },
            //position: "center",
            closeOnEscape: true,
            close: function (event, ui) {
                $(this).dialog("destroy").remove();
            },
            buttons:
            {
                "Отмена": function () {
                    $(this).dialog("close");
                }
            }
        });

        $(newDiv).dialog("open");
    }

    //создание временной вакансии
    function CreateTemporaryVacation(DepId, UserLinkId, SEPId){
        //$("#DivTemporaryVacation").show();
        $("#DivTemporaryVacation").dialog(
        {
            autoOpen: true,
            modal: true,
            title: "Создание временной вакансии",
            draggable: false,
            resizable: false,
            width: "auto",
            closeOnEscape: true,
            close: function (event, ui) {
                //$(this).dialog("destroy").remove();
            },
            buttons:
            {
                "Ок": function () {
                    $("#DivTemporaryVacation").hide();
                    //window.location.reload();
                    $("#AbsencesTypeId").val(1);
                    $("#DateBegin").val("");
                    $("#DateEnd").val("");
                    $("#Note").val("");
                    ReplacePostUserLinkRow(DepId, UserLinkId, SEPId);
                    $(this).dialog("close");
                },
                "Отмена": function () {
                    $("#DivTemporaryVacation").hide();
                    $(this).dialog("close");
                }
            }
        });
    }


    //создаем временную вакансию и делаем замену строки расстановки на измененную
    function ReplacePostUserLinkRow(DepId, UserLinkId, SEPId){
        var actionUrl="@Url.Action("StaffListArrangement", "StaffList")";
        $("#DepId").val(DepId);
        var dataToSend = $("#StaffListArrangementForm").serialize();
        ShowFlash(true);

        jQuery.ajax({
            url: actionUrl,
            type: 'POST',
            dataType: 'json',
            data: dataToSend,
            async: true,
            success: function(result){
                // $liParent = $("#li-" + Id.toString());
                var tblStr = "";
                var OldRowId = "#tru-" + UserLinkId + "-" + SEPId;
                  
                if(result.EstablishedPosts != null)
                {
                    for (var i = 0; i < result.EstablishedPosts.length; i++)//штатные единицы
                    {   
                        if(result.EstablishedPosts[i].Id == UserLinkId){
                            tblStr = "<tr id='tru-" + result.EstablishedPosts[i].Id + "-" + result.EstablishedPosts[i].SEPId + "' accessKey='" + result.EstablishedPosts[i].Path + "' class='IsVisible' ;'>" +
                                        "<td></td>" +
                                        "<td></td>" +
                                        "<td>" +
                                        "<span>" +
                                            "<a class='Acollapsible CallModal' accessKey='' href='#' id='' onclick='CreateTemporaryVacation();' style='color:green;'>" +  //onclick='CreateTemporaryVacation();'
                                            result.EstablishedPosts[i].PositionName + "</a>" +
                                        "</span>" +
                                        "</td>" + 
                                        "<td>" + result.EstablishedPosts[i].Quantity + "</td>" +
                                        "<td>" + result.EstablishedPosts[i].Salary + "</td>" +
                                        "<td>" + (result.EstablishedPosts[i].Rate != null ? result.EstablishedPosts[i].Rate : "") + "</td>" +
                                        
                                            "<td>" + (result.EstablishedPosts[i].Regional != null ? result.EstablishedPosts[i].Regional : "") + "</td>" +
                                            "<td>" + (result.EstablishedPosts[i].Personnel != null ? result.EstablishedPosts[i].Personnel : "") + "</td>" +
                                            "<td>" + (result.EstablishedPosts[i].Territory != null ? result.EstablishedPosts[i].Territory : "") + "</td>" +
                                            "<td>" + (result.EstablishedPosts[i].Front != null ? result.EstablishedPosts[i].Front : "") + "</td>" +
                                            "<td>" + (result.EstablishedPosts[i].Drive != null ? result.EstablishedPosts[i].Drive : "") + "</td>" +
                                            "<td>" + (result.EstablishedPosts[i].North != null ? result.EstablishedPosts[i].North : "") + "</td>" +
                                            "<td>" + (result.EstablishedPosts[i].Qualification != null ? result.EstablishedPosts[i].Qualification : "") + "</td>" +
                                            "<td>" + (result.EstablishedPosts[i].TotalSalary != null ? result.EstablishedPosts[i].TotalSalary : "") + "</td>" 
                                            //красим увольняющихся
                                            if(!result.EstablishedPosts[i].IsDismiss && !result.EstablishedPosts[i].IsDismissal)
                                            {
                                                if(result.EstablishedPosts[i].IsVacation || result.EstablishedPosts[i].IsReserve)
                                                {
                                                    tblStr += "<td>" + (result.EstablishedPosts[i].Surname == null ? "" : result.EstablishedPosts[i].Surname) + "</td>"
                                                }
                                                else
                                                {
                                                    tblStr += "<td><a class='CallModal' href='#' onclick='GetStaffMovementRequest(" + result.EstablishedPosts[i].UserId + ");'>" + (result.EstablishedPosts[i].Surname == null ? "" : result.EstablishedPosts[i].Surname) + "</a></td>"
                                                }
                                            }
                                            else
                                            {
                                                tblStr += "<td style='color:Red;'>" + (result.EstablishedPosts[i].Surname == null ? "" : result.EstablishedPosts[i].Surname) + "</td>"
                                            }
                                            tblStr += "<td>" + (result.EstablishedPosts[i].ReplacedName == null ? "" : result.EstablishedPosts[i].ReplacedName) + "</td>" +
                                            "<td></td>" +
                                            "<td></td>" +
                                            "<td>" + (result.EstablishedPosts[i].Reserve == null ? "" : result.EstablishedPosts[i].Reserve) + "</td>" +
                                            "<td>" + (result.EstablishedPosts[i].BasicUser == null ? "" : result.EstablishedPosts[i].BasicUser) + "</td>" +
                                        "</tr>";
                            
                            //var ParentRowName = "#tr-" + Id;//определяем Id строки после которой нужно добавить новую строку
                            //$(ParentRowName).after(tblStr);//вставляем новую строку
                            $(OldRowId).replaceWith(tblStr);
                            $(".CallModal").click(function(e){e.preventDefault(); return false;});//чтобы при вызове модального окна не скроллилась страница вверх
                        }
                    }
                }
                    

                $(":button").button();

                ShowFlash(false);
            },
            error: function(e, str1){
                if(str1 == "parsererror")
                    alert("Доступ запрещен!.");
                else
                    alert("При загрузке данных произошла ошибка.");

                ShowFlash(false);
            }
        });
    }

    
</script>


