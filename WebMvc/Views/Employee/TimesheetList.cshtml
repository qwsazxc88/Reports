@model Reports.Presenters.UI.ViewModel.TimesheetListModel
@{
    ViewBag.Title = "Табель";
}
@using (Html.BeginForm())
{

    <table style="width:100%">
    
    <tr>
        <td colspan="2">
          <div class="filter-wrap">
            <table style="width:100%">
                <tr>
                    <td colspan="2">
                    <b>Выбор параметров</b><br/><br/>
                @Html.HiddenFor(m => m.ManagerId)
                @*@Html.HiddenFor(m => m.IsEditable)*@
                @Html.LabelFor(m => m.Month):
                @Html.DropDownListFor(model => model.Month, new SelectList(Model.Monthes, "Id", "Name"), new { onchange = "ChangeMonth();"}) 
                @Html.LabelFor(m => m.Year):
                @Html.DropDownListFor(model => model.Year, new SelectList(Model.Years, "Id", "Name"), new { onchange = "ChangeMonth();"})
                    </td>
                </tr>
                <tr>
                    <td style="width:202px">
                        @Html.LabelFor(m => m.DepartmentName):
                    </td>
                    <td>
                        <label id="DepartmentNameLabel">@Model.DepartmentName</label>
                        <input type="hidden" id="DepartmentName" name="DepartmentName" value="@Model.DepartmentName" />
                        <input type="hidden" id="DepartmentId" name="DepartmentId" value="@Model.DepartmentId" />
                    </td>
                </tr>
                <tr>
                    <td colspan="2">
                        <input type="hidden" id="DepartmentReadOnly" name="DepartmentReadOnly" value="@Model.DepartmentReadOnly" />
                        @if (!Model.DepartmentReadOnly)
                        {
                            <input type="button" value="Выбрать" onclick="changeDepartment();"/>
                        }            
                    </td>
                </tr>
                <tr>
                    <td colspan="2">
                        @Html.LabelFor(m => m.UserName):
                        @Html.TextBoxFor(model => model.UserName)
                    </td>
                </tr>
                <tr>
                  <td colspan="2">
                  <input type="submit" value="Применить"/>
                   @* <input type="button" value="Применить" onclick="OnPageClick(0);"/>*@
                    <input type="button" value="Сбросить" onclick="resetFilter();"/>
                  </td>
                </tr>
         </table>
        </div>          
        </td>
        </tr>
        <tr>
        <td colspan="2">
                @Html.ValidationSummary(false)
                <div id="Error" style="color:Red;display:none;"></div>
            </td>
        </tr>
        <tr>
            @if (Model.TimesheetDtos != null && Model.TimesheetDtos.Count > 0)
            {
                <td colspan="2" style="text-align:left">
                    @for (int i = 1; i <= Model.NumberOfPages; i++)
                    {
                        if (i == Model.CurrentPage)
                        {
                            <text>@i</text>
                        }
                        else
                        {    
                            <a href="" onclick="return OnPageClick(@i);">@i</a>
                        }
                    }
                </td>
            }
         </tr>
        <tr>
            <td colspan="2">
                
                @Html.EditorFor(model => model.TimesheetDtos)
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <input type="hidden" id="IsSaveVisible" name="IsSaveVisible" value="@Model.IsSaveVisible" />
                <input type="hidden" id="IsSaveNeed" name="IsSaveNeed" value="@Model.IsSaveNeed" />
                @if (Model.IsSaveVisible)
                {
                    <input type="submit" value="Записать" onclick="return onSaveClick();"/>
                }
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <hr style="width:100%"/>
            </td>
        </tr>
        <tr>
            @if (Model.TimesheetDtos != null && Model.TimesheetDtos.Count > 0)
            {
                <td colspan="2" style="text-align:left">
                    <input type="hidden" id="CurrentPage" name="CurrentPage" value="@Model.CurrentPage" />
                    @for (int i = 1; i <= Model.NumberOfPages; i++)
                    {
                        if (i == Model.CurrentPage)
                        {
                            <text>@i</text>
                        }
                        else
                        {    
                            <a href="" onclick="return OnPageClick(@i);">@i</a>
                        }
                    }
                </td>
            }
        </tr>
    </table>

}
<script type="text/javascript">
    var actionDepUrl = "@Url.Action("GetChildren", "UserRequest")";
    var actionDepDialogUrl = "@Url.Action("DepartmentDialog", "UserRequest")";
     $(document).ready(function () {
        setActiveMenuItem("userTimesheet");
    });
    function ChangeMonth() {
        //submitForm();
    }
    function OnPageClick(pageNumber) {
        $("#CurrentPage").val(pageNumber);
        /*window.location.href = '@Url.Action("TimesheetList", "Employee")?managerId='
        + $("#ManagerId").val() +'&month=' + $("#Month").val() + '&year=' + $("#Year").val()+
        '&currentPage='+pageNumber +'&departmentId=' + $("#DepartmentId").val() +
        '&userName=' + $("#UserName").val()+ '&departmentName=' + $("#DepartmentName").val();*/
        submitForm();
        return false;
    }
    function submitForm() {
        if (document.forms[0].onsubmit && !document.forms[0].onsubmit())
            return;
        document.forms[0].submit();
    }   
    function resetFilter() {
        $("#UserName").val('');
        if ($("#DepartmentReadOnly").val() == "False") {
            $("#DepartmentId").val('0');
            $("#DepartmentNameLabel").text('');
            $("#DepartmentName").val('');
        }
    } 
    function onSaveClick() {
        if(!Validate())
            return false;
        $("#IsSaveNeed").val('true');
        return true;
    }  
    function Validate()
    {
        var isValid = 1;
        jQuery( "[is_edit='1']" ).each(function( index,control) {
            if(!ValidateHours(control))
            {
                isValid = 0;
                return false;
            }       
        });
        if(isValid == 0)
        {
            addError("Указаны недопустимые значения рабочего времени.Значения должны быть от 0 до 24 или пустыми.");
            return false;
        }
        else
        {
            clearErrors();
            return true;
        }
    }
    function ValidateHours(control)
     {
        var hours = $(control).val();
        if(hours == "")
        {
            //addError("Часы - обязательное поле.");
             $(control).removeClass("editError");
            return true;
        }
        var hourValue = getFloatValue(hours);
        if(isNaN(hourValue) || (hourValue < 0) || (hourValue > 24) ||
        !/^[0-9\.,]+$/.test(hours))
        {
            $(control).addClass("editError");
            //addError('Недопустимое значение поля "Часы".');
            return false;
        }
        $(control).removeClass("editError");
        hourValue = GetTwoDigitValue(hourValue);
        //hours = ReplaceToRussianDecimalPoint(hourValue.toString());
        //$("#Hours").val(hours);
        //clearErrors();
        return true;
     }

    function getFloatValue(textValue) 
    {
        var value = trimSpaces(textValue);
        value = ReplaceDecimalPoint(value); 
        return parseFloat(value);
    }
    function ReplaceDecimalPoint(value) {
         return value.replace(/,/g, '.');

    }
    function ReplaceToRussianDecimalPoint(value) {
           return value.replace('.', ',');

    }

</script>                          

